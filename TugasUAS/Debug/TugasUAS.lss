
TugasUAS.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000037e8  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000004c  00802000  000037e8  0000387c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000283  0080204c  0080204c  000038c8  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  000038c8  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000044  00000000  00000000  00003924  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000628  00000000  00000000  00003968  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000122d1  00000000  00000000  00003f90  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00005750  00000000  00000000  00016261  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000a3b5  00000000  00000000  0001b9b1  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00001404  00000000  00000000  00025d68  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0003b4e6  00000000  00000000  0002716c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000a062  00000000  00000000  00062652  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000818  00000000  00000000  0006c6b4  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_macro  0000c9db  00000000  00000000  0006cecc  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	4f c2       	rjmp	.+1182   	; 0x4a0 <__ctors_end>
       2:	00 00       	nop
       4:	6e c2       	rjmp	.+1244   	; 0x4e2 <__bad_interrupt>
       6:	00 00       	nop
       8:	6c c2       	rjmp	.+1240   	; 0x4e2 <__bad_interrupt>
       a:	00 00       	nop
       c:	6a c2       	rjmp	.+1236   	; 0x4e2 <__bad_interrupt>
       e:	00 00       	nop
      10:	68 c2       	rjmp	.+1232   	; 0x4e2 <__bad_interrupt>
      12:	00 00       	nop
      14:	66 c2       	rjmp	.+1228   	; 0x4e2 <__bad_interrupt>
      16:	00 00       	nop
      18:	64 c2       	rjmp	.+1224   	; 0x4e2 <__bad_interrupt>
      1a:	00 00       	nop
      1c:	62 c2       	rjmp	.+1220   	; 0x4e2 <__bad_interrupt>
      1e:	00 00       	nop
      20:	60 c2       	rjmp	.+1216   	; 0x4e2 <__bad_interrupt>
      22:	00 00       	nop
      24:	5e c2       	rjmp	.+1212   	; 0x4e2 <__bad_interrupt>
      26:	00 00       	nop
      28:	5c c2       	rjmp	.+1208   	; 0x4e2 <__bad_interrupt>
      2a:	00 00       	nop
      2c:	5a c2       	rjmp	.+1204   	; 0x4e2 <__bad_interrupt>
      2e:	00 00       	nop
      30:	58 c2       	rjmp	.+1200   	; 0x4e2 <__bad_interrupt>
      32:	00 00       	nop
      34:	56 c2       	rjmp	.+1196   	; 0x4e2 <__bad_interrupt>
      36:	00 00       	nop
      38:	0c 94 a4 0a 	jmp	0x1548	; 0x1548 <__vector_14>
      3c:	52 c2       	rjmp	.+1188   	; 0x4e2 <__bad_interrupt>
      3e:	00 00       	nop
      40:	50 c2       	rjmp	.+1184   	; 0x4e2 <__bad_interrupt>
      42:	00 00       	nop
      44:	4e c2       	rjmp	.+1180   	; 0x4e2 <__bad_interrupt>
      46:	00 00       	nop
      48:	4c c2       	rjmp	.+1176   	; 0x4e2 <__bad_interrupt>
      4a:	00 00       	nop
      4c:	4a c2       	rjmp	.+1172   	; 0x4e2 <__bad_interrupt>
      4e:	00 00       	nop
      50:	48 c2       	rjmp	.+1168   	; 0x4e2 <__bad_interrupt>
      52:	00 00       	nop
      54:	46 c2       	rjmp	.+1164   	; 0x4e2 <__bad_interrupt>
      56:	00 00       	nop
      58:	44 c2       	rjmp	.+1160   	; 0x4e2 <__bad_interrupt>
      5a:	00 00       	nop
      5c:	42 c2       	rjmp	.+1156   	; 0x4e2 <__bad_interrupt>
      5e:	00 00       	nop
      60:	40 c2       	rjmp	.+1152   	; 0x4e2 <__bad_interrupt>
      62:	00 00       	nop
      64:	3e c2       	rjmp	.+1148   	; 0x4e2 <__bad_interrupt>
      66:	00 00       	nop
      68:	3c c2       	rjmp	.+1144   	; 0x4e2 <__bad_interrupt>
      6a:	00 00       	nop
      6c:	3a c2       	rjmp	.+1140   	; 0x4e2 <__bad_interrupt>
      6e:	00 00       	nop
      70:	38 c2       	rjmp	.+1136   	; 0x4e2 <__bad_interrupt>
      72:	00 00       	nop
      74:	36 c2       	rjmp	.+1132   	; 0x4e2 <__bad_interrupt>
      76:	00 00       	nop
      78:	34 c2       	rjmp	.+1128   	; 0x4e2 <__bad_interrupt>
      7a:	00 00       	nop
      7c:	32 c2       	rjmp	.+1124   	; 0x4e2 <__bad_interrupt>
      7e:	00 00       	nop
      80:	30 c2       	rjmp	.+1120   	; 0x4e2 <__bad_interrupt>
      82:	00 00       	nop
      84:	2e c2       	rjmp	.+1116   	; 0x4e2 <__bad_interrupt>
      86:	00 00       	nop
      88:	2c c2       	rjmp	.+1112   	; 0x4e2 <__bad_interrupt>
      8a:	00 00       	nop
      8c:	2a c2       	rjmp	.+1108   	; 0x4e2 <__bad_interrupt>
      8e:	00 00       	nop
      90:	28 c2       	rjmp	.+1104   	; 0x4e2 <__bad_interrupt>
      92:	00 00       	nop
      94:	26 c2       	rjmp	.+1100   	; 0x4e2 <__bad_interrupt>
      96:	00 00       	nop
      98:	24 c2       	rjmp	.+1096   	; 0x4e2 <__bad_interrupt>
      9a:	00 00       	nop
      9c:	22 c2       	rjmp	.+1092   	; 0x4e2 <__bad_interrupt>
      9e:	00 00       	nop
      a0:	20 c2       	rjmp	.+1088   	; 0x4e2 <__bad_interrupt>
      a2:	00 00       	nop
      a4:	1e c2       	rjmp	.+1084   	; 0x4e2 <__bad_interrupt>
      a6:	00 00       	nop
      a8:	1c c2       	rjmp	.+1080   	; 0x4e2 <__bad_interrupt>
      aa:	00 00       	nop
      ac:	1a c2       	rjmp	.+1076   	; 0x4e2 <__bad_interrupt>
      ae:	00 00       	nop
      b0:	18 c2       	rjmp	.+1072   	; 0x4e2 <__bad_interrupt>
      b2:	00 00       	nop
      b4:	16 c2       	rjmp	.+1068   	; 0x4e2 <__bad_interrupt>
      b6:	00 00       	nop
      b8:	14 c2       	rjmp	.+1064   	; 0x4e2 <__bad_interrupt>
      ba:	00 00       	nop
      bc:	12 c2       	rjmp	.+1060   	; 0x4e2 <__bad_interrupt>
      be:	00 00       	nop
      c0:	10 c2       	rjmp	.+1056   	; 0x4e2 <__bad_interrupt>
      c2:	00 00       	nop
      c4:	0e c2       	rjmp	.+1052   	; 0x4e2 <__bad_interrupt>
      c6:	00 00       	nop
      c8:	0c c2       	rjmp	.+1048   	; 0x4e2 <__bad_interrupt>
      ca:	00 00       	nop
      cc:	0a c2       	rjmp	.+1044   	; 0x4e2 <__bad_interrupt>
      ce:	00 00       	nop
      d0:	08 c2       	rjmp	.+1040   	; 0x4e2 <__bad_interrupt>
      d2:	00 00       	nop
      d4:	06 c2       	rjmp	.+1036   	; 0x4e2 <__bad_interrupt>
      d6:	00 00       	nop
      d8:	04 c2       	rjmp	.+1032   	; 0x4e2 <__bad_interrupt>
      da:	00 00       	nop
      dc:	02 c2       	rjmp	.+1028   	; 0x4e2 <__bad_interrupt>
      de:	00 00       	nop
      e0:	00 c2       	rjmp	.+1024   	; 0x4e2 <__bad_interrupt>
      e2:	00 00       	nop
      e4:	fe c1       	rjmp	.+1020   	; 0x4e2 <__bad_interrupt>
      e6:	00 00       	nop
      e8:	fc c1       	rjmp	.+1016   	; 0x4e2 <__bad_interrupt>
      ea:	00 00       	nop
      ec:	fa c1       	rjmp	.+1012   	; 0x4e2 <__bad_interrupt>
      ee:	00 00       	nop
      f0:	f8 c1       	rjmp	.+1008   	; 0x4e2 <__bad_interrupt>
      f2:	00 00       	nop
      f4:	f6 c1       	rjmp	.+1004   	; 0x4e2 <__bad_interrupt>
      f6:	00 00       	nop
      f8:	f4 c1       	rjmp	.+1000   	; 0x4e2 <__bad_interrupt>
      fa:	00 00       	nop
      fc:	f2 c1       	rjmp	.+996    	; 0x4e2 <__bad_interrupt>
      fe:	00 00       	nop
     100:	f0 c1       	rjmp	.+992    	; 0x4e2 <__bad_interrupt>
     102:	00 00       	nop
     104:	ee c1       	rjmp	.+988    	; 0x4e2 <__bad_interrupt>
     106:	00 00       	nop
     108:	ec c1       	rjmp	.+984    	; 0x4e2 <__bad_interrupt>
     10a:	00 00       	nop
     10c:	ea c1       	rjmp	.+980    	; 0x4e2 <__bad_interrupt>
     10e:	00 00       	nop
     110:	e8 c1       	rjmp	.+976    	; 0x4e2 <__bad_interrupt>
     112:	00 00       	nop
     114:	e6 c1       	rjmp	.+972    	; 0x4e2 <__bad_interrupt>
     116:	00 00       	nop
     118:	e4 c1       	rjmp	.+968    	; 0x4e2 <__bad_interrupt>
     11a:	00 00       	nop
     11c:	e2 c1       	rjmp	.+964    	; 0x4e2 <__bad_interrupt>
     11e:	00 00       	nop
     120:	e0 c1       	rjmp	.+960    	; 0x4e2 <__bad_interrupt>
     122:	00 00       	nop
     124:	de c1       	rjmp	.+956    	; 0x4e2 <__bad_interrupt>
     126:	00 00       	nop
     128:	dc c1       	rjmp	.+952    	; 0x4e2 <__bad_interrupt>
     12a:	00 00       	nop
     12c:	da c1       	rjmp	.+948    	; 0x4e2 <__bad_interrupt>
     12e:	00 00       	nop
     130:	d8 c1       	rjmp	.+944    	; 0x4e2 <__bad_interrupt>
     132:	00 00       	nop
     134:	d6 c1       	rjmp	.+940    	; 0x4e2 <__bad_interrupt>
     136:	00 00       	nop
     138:	d4 c1       	rjmp	.+936    	; 0x4e2 <__bad_interrupt>
     13a:	00 00       	nop
     13c:	d2 c1       	rjmp	.+932    	; 0x4e2 <__bad_interrupt>
     13e:	00 00       	nop
     140:	d0 c1       	rjmp	.+928    	; 0x4e2 <__bad_interrupt>
     142:	00 00       	nop
     144:	ce c1       	rjmp	.+924    	; 0x4e2 <__bad_interrupt>
     146:	00 00       	nop
     148:	cc c1       	rjmp	.+920    	; 0x4e2 <__bad_interrupt>
     14a:	00 00       	nop
     14c:	ca c1       	rjmp	.+916    	; 0x4e2 <__bad_interrupt>
     14e:	00 00       	nop
     150:	c8 c1       	rjmp	.+912    	; 0x4e2 <__bad_interrupt>
     152:	00 00       	nop
     154:	c6 c1       	rjmp	.+908    	; 0x4e2 <__bad_interrupt>
     156:	00 00       	nop
     158:	c4 c1       	rjmp	.+904    	; 0x4e2 <__bad_interrupt>
     15a:	00 00       	nop
     15c:	c2 c1       	rjmp	.+900    	; 0x4e2 <__bad_interrupt>
     15e:	00 00       	nop
     160:	c0 c1       	rjmp	.+896    	; 0x4e2 <__bad_interrupt>
     162:	00 00       	nop
     164:	be c1       	rjmp	.+892    	; 0x4e2 <__bad_interrupt>
     166:	00 00       	nop
     168:	bc c1       	rjmp	.+888    	; 0x4e2 <__bad_interrupt>
     16a:	00 00       	nop
     16c:	ba c1       	rjmp	.+884    	; 0x4e2 <__bad_interrupt>
     16e:	00 00       	nop
     170:	b8 c1       	rjmp	.+880    	; 0x4e2 <__bad_interrupt>
     172:	00 00       	nop
     174:	b6 c1       	rjmp	.+876    	; 0x4e2 <__bad_interrupt>
     176:	00 00       	nop
     178:	b4 c1       	rjmp	.+872    	; 0x4e2 <__bad_interrupt>
     17a:	00 00       	nop
     17c:	b2 c1       	rjmp	.+868    	; 0x4e2 <__bad_interrupt>
     17e:	00 00       	nop
     180:	b0 c1       	rjmp	.+864    	; 0x4e2 <__bad_interrupt>
     182:	00 00       	nop
     184:	ae c1       	rjmp	.+860    	; 0x4e2 <__bad_interrupt>
     186:	00 00       	nop
     188:	ac c1       	rjmp	.+856    	; 0x4e2 <__bad_interrupt>
     18a:	00 00       	nop
     18c:	aa c1       	rjmp	.+852    	; 0x4e2 <__bad_interrupt>
     18e:	00 00       	nop
     190:	a8 c1       	rjmp	.+848    	; 0x4e2 <__bad_interrupt>
     192:	00 00       	nop
     194:	a6 c1       	rjmp	.+844    	; 0x4e2 <__bad_interrupt>
     196:	00 00       	nop
     198:	a4 c1       	rjmp	.+840    	; 0x4e2 <__bad_interrupt>
     19a:	00 00       	nop
     19c:	a2 c1       	rjmp	.+836    	; 0x4e2 <__bad_interrupt>
     19e:	00 00       	nop
     1a0:	a0 c1       	rjmp	.+832    	; 0x4e2 <__bad_interrupt>
     1a2:	00 00       	nop
     1a4:	9e c1       	rjmp	.+828    	; 0x4e2 <__bad_interrupt>
     1a6:	00 00       	nop
     1a8:	9c c1       	rjmp	.+824    	; 0x4e2 <__bad_interrupt>
     1aa:	00 00       	nop
     1ac:	9a c1       	rjmp	.+820    	; 0x4e2 <__bad_interrupt>
     1ae:	00 00       	nop
     1b0:	98 c1       	rjmp	.+816    	; 0x4e2 <__bad_interrupt>
     1b2:	00 00       	nop
     1b4:	96 c1       	rjmp	.+812    	; 0x4e2 <__bad_interrupt>
     1b6:	00 00       	nop
     1b8:	94 c1       	rjmp	.+808    	; 0x4e2 <__bad_interrupt>
     1ba:	00 00       	nop
     1bc:	92 c1       	rjmp	.+804    	; 0x4e2 <__bad_interrupt>
     1be:	00 00       	nop
     1c0:	90 c1       	rjmp	.+800    	; 0x4e2 <__bad_interrupt>
     1c2:	00 00       	nop
     1c4:	8e c1       	rjmp	.+796    	; 0x4e2 <__bad_interrupt>
     1c6:	00 00       	nop
     1c8:	8c c1       	rjmp	.+792    	; 0x4e2 <__bad_interrupt>
     1ca:	00 00       	nop
     1cc:	8a c1       	rjmp	.+788    	; 0x4e2 <__bad_interrupt>
     1ce:	00 00       	nop
     1d0:	88 c1       	rjmp	.+784    	; 0x4e2 <__bad_interrupt>
     1d2:	00 00       	nop
     1d4:	86 c1       	rjmp	.+780    	; 0x4e2 <__bad_interrupt>
     1d6:	00 00       	nop
     1d8:	84 c1       	rjmp	.+776    	; 0x4e2 <__bad_interrupt>
     1da:	00 00       	nop
     1dc:	82 c1       	rjmp	.+772    	; 0x4e2 <__bad_interrupt>
     1de:	00 00       	nop
     1e0:	80 c1       	rjmp	.+768    	; 0x4e2 <__bad_interrupt>
     1e2:	00 00       	nop
     1e4:	7e c1       	rjmp	.+764    	; 0x4e2 <__bad_interrupt>
     1e6:	00 00       	nop
     1e8:	7c c1       	rjmp	.+760    	; 0x4e2 <__bad_interrupt>
     1ea:	00 00       	nop
     1ec:	7a c1       	rjmp	.+756    	; 0x4e2 <__bad_interrupt>
     1ee:	00 00       	nop
     1f0:	78 c1       	rjmp	.+752    	; 0x4e2 <__bad_interrupt>
     1f2:	00 00       	nop
     1f4:	76 c1       	rjmp	.+748    	; 0x4e2 <__bad_interrupt>
     1f6:	00 00       	nop
     1f8:	74 c1       	rjmp	.+744    	; 0x4e2 <__bad_interrupt>
     1fa:	00 00       	nop
     1fc:	b1 14       	cp	r11, r1
     1fe:	b1 14       	cp	r11, r1
     200:	de 14       	cp	r13, r14
     202:	e3 14       	cp	r14, r3
     204:	f8 14       	cp	r15, r8
     206:	b1 14       	cp	r11, r1
     208:	b1 14       	cp	r11, r1
     20a:	de 14       	cp	r13, r14
     20c:	e3 14       	cp	r14, r3

0000020e <__trampolines_end>:
     20e:	00 00       	nop
     210:	00 00       	nop
     212:	00 00       	nop
     214:	00 20       	and	r0, r0
     216:	20 20       	and	r2, r0
     218:	20 20       	and	r2, r0
     21a:	00 20       	and	r0, r0
     21c:	50 50       	subi	r21, 0x00	; 0
     21e:	50 00       	.word	0x0050	; ????
     220:	00 00       	nop
     222:	00 50       	subi	r16, 0x00	; 0
     224:	50 f8       	bld	r5, 0
     226:	50 f8       	bld	r5, 0
     228:	50 50       	subi	r21, 0x00	; 0
     22a:	20 78       	andi	r18, 0x80	; 128
     22c:	a0 70       	andi	r26, 0x00	; 0
     22e:	28 f0       	brcs	.+10     	; 0x23a <__trampolines_end+0x2c>
     230:	20 c0       	rjmp	.+64     	; 0x272 <__trampolines_end+0x64>
     232:	c8 10       	cpse	r12, r8
     234:	20 40       	sbci	r18, 0x00	; 0
     236:	98 18       	sub	r9, r8
     238:	60 90 a0 40 	lds	r6, 0x40A0	; 0x8040a0 <__bss_end+0x1dd1>
     23c:	a8 90       	.word	0x90a8	; ????
     23e:	68 60       	ori	r22, 0x08	; 8
     240:	20 40       	sbci	r18, 0x00	; 0
     242:	00 00       	nop
     244:	00 00       	nop
     246:	10 20       	and	r1, r0
     248:	40 40       	sbci	r20, 0x00	; 0
     24a:	40 20       	and	r4, r0
     24c:	10 40       	sbci	r17, 0x00	; 0
     24e:	20 10       	cpse	r2, r0
     250:	10 10       	cpse	r1, r0
     252:	20 40       	sbci	r18, 0x00	; 0
     254:	00 50       	subi	r16, 0x00	; 0
     256:	20 f8       	bld	r2, 0
     258:	20 50       	subi	r18, 0x00	; 0
     25a:	00 00       	nop
     25c:	20 20       	and	r2, r0
     25e:	f8 20       	and	r15, r8
     260:	20 00       	.word	0x0020	; ????
     262:	00 00       	nop
     264:	00 00       	nop
     266:	60 20       	and	r6, r0
     268:	40 00       	.word	0x0040	; ????
     26a:	00 00       	nop
     26c:	f8 00       	.word	0x00f8	; ????
     26e:	00 00       	nop
     270:	00 00       	nop
     272:	00 00       	nop
     274:	00 60       	ori	r16, 0x00	; 0
     276:	60 00       	.word	0x0060	; ????
     278:	08 10       	cpse	r0, r8
     27a:	20 40       	sbci	r18, 0x00	; 0
     27c:	80 00       	.word	0x0080	; ????
     27e:	70 88       	ldd	r7, Z+16	; 0x10
     280:	98 a8       	ldd	r9, Y+48	; 0x30
     282:	c8 88       	ldd	r12, Y+16	; 0x10
     284:	70 20       	and	r7, r0
     286:	60 20       	and	r6, r0
     288:	20 20       	and	r2, r0
     28a:	20 70       	andi	r18, 0x00	; 0
     28c:	70 88       	ldd	r7, Z+16	; 0x10
     28e:	08 10       	cpse	r0, r8
     290:	20 40       	sbci	r18, 0x00	; 0
     292:	f8 f8       	.word	0xf8f8	; ????
     294:	10 20       	and	r1, r0
     296:	10 08       	sbc	r1, r0
     298:	88 70       	andi	r24, 0x08	; 8
     29a:	10 30       	cpi	r17, 0x00	; 0
     29c:	50 90 f8 10 	lds	r5, 0x10F8	; 0x8010f8 <__TEXT_REGION_LENGTH__+0x7bf0f8>
     2a0:	10 f8       	bld	r1, 0
     2a2:	80 f0       	brcs	.+32     	; 0x2c4 <__trampolines_end+0xb6>
     2a4:	08 08       	sbc	r0, r8
     2a6:	88 70       	andi	r24, 0x08	; 8
     2a8:	30 40       	sbci	r19, 0x00	; 0
     2aa:	80 f0       	brcs	.+32     	; 0x2cc <__trampolines_end+0xbe>
     2ac:	88 88       	ldd	r8, Y+16	; 0x10
     2ae:	70 f8       	bld	r7, 0
     2b0:	08 10       	cpse	r0, r8
     2b2:	20 40       	sbci	r18, 0x00	; 0
     2b4:	40 40       	sbci	r20, 0x00	; 0
     2b6:	70 88       	ldd	r7, Z+16	; 0x10
     2b8:	88 70       	andi	r24, 0x08	; 8
     2ba:	88 88       	ldd	r8, Y+16	; 0x10
     2bc:	70 70       	andi	r23, 0x00	; 0
     2be:	88 88       	ldd	r8, Y+16	; 0x10
     2c0:	78 08       	sbc	r7, r8
     2c2:	10 60       	ori	r17, 0x00	; 0
     2c4:	00 60       	ori	r16, 0x00	; 0
     2c6:	60 00       	.word	0x0060	; ????
     2c8:	60 60       	ori	r22, 0x00	; 0
     2ca:	00 00       	nop
     2cc:	60 60       	ori	r22, 0x00	; 0
     2ce:	00 60       	ori	r16, 0x00	; 0
     2d0:	20 40       	sbci	r18, 0x00	; 0
     2d2:	08 10       	cpse	r0, r8
     2d4:	20 40       	sbci	r18, 0x00	; 0
     2d6:	20 10       	cpse	r2, r0
     2d8:	08 00       	.word	0x0008	; ????
     2da:	00 f8       	bld	r0, 0
     2dc:	00 f8       	bld	r0, 0
     2de:	00 00       	nop
     2e0:	80 40       	sbci	r24, 0x00	; 0
     2e2:	20 10       	cpse	r2, r0
     2e4:	20 40       	sbci	r18, 0x00	; 0
     2e6:	80 70       	andi	r24, 0x00	; 0
     2e8:	88 08       	sbc	r8, r8
     2ea:	10 20       	and	r1, r0
     2ec:	00 20       	and	r0, r0
     2ee:	70 88       	ldd	r7, Z+16	; 0x10
     2f0:	08 68       	ori	r16, 0x88	; 136
     2f2:	a8 a8       	ldd	r10, Y+48	; 0x30
     2f4:	70 70       	andi	r23, 0x00	; 0
     2f6:	88 88       	ldd	r8, Y+16	; 0x10
     2f8:	88 f8       	.word	0xf888	; ????
     2fa:	88 88       	ldd	r8, Y+16	; 0x10
     2fc:	f0 88       	ldd	r15, Z+16	; 0x10
     2fe:	88 f0       	brcs	.+34     	; 0x322 <__trampolines_end+0x114>
     300:	88 88       	ldd	r8, Y+16	; 0x10
     302:	f0 70       	andi	r31, 0x00	; 0
     304:	88 80       	ld	r8, Y
     306:	80 80       	ld	r8, Z
     308:	88 70       	andi	r24, 0x08	; 8
     30a:	e0 90 88 88 	lds	r14, 0x8888	; 0x808888 <__bss_end+0x65b9>
     30e:	88 90       	.word	0x9088	; ????
     310:	e0 f8       	bld	r14, 0
     312:	80 80       	ld	r8, Z
     314:	f0 80       	ld	r15, Z
     316:	80 f8       	bld	r8, 0
     318:	f8 80       	ld	r15, Y
     31a:	80 e0       	ldi	r24, 0x00	; 0
     31c:	80 80       	ld	r8, Z
     31e:	80 70       	andi	r24, 0x00	; 0
     320:	88 80       	ld	r8, Y
     322:	80 98       	cbi	0x10, 0	; 16
     324:	88 70       	andi	r24, 0x08	; 8
     326:	88 88       	ldd	r8, Y+16	; 0x10
     328:	88 f8       	.word	0xf888	; ????
     32a:	88 88       	ldd	r8, Y+16	; 0x10
     32c:	88 70       	andi	r24, 0x08	; 8
     32e:	20 20       	and	r2, r0
     330:	20 20       	and	r2, r0
     332:	20 70       	andi	r18, 0x00	; 0
     334:	38 10       	cpse	r3, r8
     336:	10 10       	cpse	r1, r0
     338:	10 90 60 88 	lds	r1, 0x8860	; 0x808860 <__bss_end+0x6591>
     33c:	90 a0       	ldd	r9, Z+32	; 0x20
     33e:	c0 a0       	ldd	r12, Z+32	; 0x20
     340:	90 88       	ldd	r9, Z+16	; 0x10
     342:	80 80       	ld	r8, Z
     344:	80 80       	ld	r8, Z
     346:	80 80       	ld	r8, Z
     348:	f8 88       	ldd	r15, Y+16	; 0x10
     34a:	d8 a8       	ldd	r13, Y+48	; 0x30
     34c:	88 88       	ldd	r8, Y+16	; 0x10
     34e:	88 88       	ldd	r8, Y+16	; 0x10
     350:	88 88       	ldd	r8, Y+16	; 0x10
     352:	c8 a8       	ldd	r12, Y+48	; 0x30
     354:	98 88       	ldd	r9, Y+16	; 0x10
     356:	88 70       	andi	r24, 0x08	; 8
     358:	88 88       	ldd	r8, Y+16	; 0x10
     35a:	88 88       	ldd	r8, Y+16	; 0x10
     35c:	88 70       	andi	r24, 0x08	; 8
     35e:	f0 88       	ldd	r15, Z+16	; 0x10
     360:	88 f0       	brcs	.+34     	; 0x384 <__trampolines_end+0x176>
     362:	80 80       	ld	r8, Z
     364:	80 70       	andi	r24, 0x00	; 0
     366:	88 88       	ldd	r8, Y+16	; 0x10
     368:	88 a8       	ldd	r8, Y+48	; 0x30
     36a:	90 68       	ori	r25, 0x80	; 128
     36c:	f0 88       	ldd	r15, Z+16	; 0x10
     36e:	88 f0       	brcs	.+34     	; 0x392 <__trampolines_end+0x184>
     370:	a0 90 88 78 	lds	r10, 0x7888	; 0x807888 <__bss_end+0x55b9>
     374:	80 80       	ld	r8, Z
     376:	70 08       	sbc	r7, r0
     378:	08 f0       	brcs	.+2      	; 0x37c <__trampolines_end+0x16e>
     37a:	f8 20       	and	r15, r8
     37c:	20 20       	and	r2, r0
     37e:	20 20       	and	r2, r0
     380:	20 88       	ldd	r2, Z+16	; 0x10
     382:	88 88       	ldd	r8, Y+16	; 0x10
     384:	88 88       	ldd	r8, Y+16	; 0x10
     386:	88 70       	andi	r24, 0x08	; 8
     388:	88 88       	ldd	r8, Y+16	; 0x10
     38a:	88 88       	ldd	r8, Y+16	; 0x10
     38c:	88 50       	subi	r24, 0x08	; 8
     38e:	20 88       	ldd	r2, Z+16	; 0x10
     390:	88 88       	ldd	r8, Y+16	; 0x10
     392:	a8 a8       	ldd	r10, Y+48	; 0x30
     394:	d8 88       	ldd	r13, Y+16	; 0x10
     396:	88 88       	ldd	r8, Y+16	; 0x10
     398:	50 20       	and	r5, r0
     39a:	50 88       	ldd	r5, Z+16	; 0x10
     39c:	88 88       	ldd	r8, Y+16	; 0x10
     39e:	88 50       	subi	r24, 0x08	; 8
     3a0:	20 20       	and	r2, r0
     3a2:	20 20       	and	r2, r0
     3a4:	f8 08       	sbc	r15, r8
     3a6:	10 20       	and	r1, r0
     3a8:	40 80       	ld	r4, Z
     3aa:	f8 38       	cpi	r31, 0x88	; 136
     3ac:	20 20       	and	r2, r0
     3ae:	20 20       	and	r2, r0
     3b0:	20 38       	cpi	r18, 0x80	; 128
     3b2:	00 80       	ld	r0, Z
     3b4:	40 20       	and	r4, r0
     3b6:	10 08       	sbc	r1, r0
     3b8:	00 e0       	ldi	r16, 0x00	; 0
     3ba:	20 20       	and	r2, r0
     3bc:	20 20       	and	r2, r0
     3be:	20 e0       	ldi	r18, 0x00	; 0
     3c0:	20 50       	subi	r18, 0x00	; 0
     3c2:	88 00       	.word	0x0088	; ????
	...
     3cc:	00 f8       	bld	r0, 0
     3ce:	40 20       	and	r4, r0
     3d0:	10 00       	.word	0x0010	; ????
     3d2:	00 00       	nop
     3d4:	00 00       	nop
     3d6:	00 70       	andi	r16, 0x00	; 0
     3d8:	08 78       	andi	r16, 0x88	; 136
     3da:	88 78       	andi	r24, 0x88	; 136
     3dc:	80 80       	ld	r8, Z
     3de:	b0 c8       	rjmp	.-3744   	; 0xfffff540 <__eeprom_end+0xff7ef540>
     3e0:	88 88       	ldd	r8, Y+16	; 0x10
     3e2:	f0 00       	.word	0x00f0	; ????
     3e4:	00 70       	andi	r16, 0x00	; 0
     3e6:	80 80       	ld	r8, Z
     3e8:	88 70       	andi	r24, 0x08	; 8
     3ea:	08 08       	sbc	r0, r8
     3ec:	68 98       	cbi	0x0d, 0	; 13
     3ee:	88 88       	ldd	r8, Y+16	; 0x10
     3f0:	78 00       	.word	0x0078	; ????
     3f2:	00 70       	andi	r16, 0x00	; 0
     3f4:	88 f8       	.word	0xf888	; ????
     3f6:	80 70       	andi	r24, 0x00	; 0
     3f8:	30 48       	sbci	r19, 0x80	; 128
     3fa:	40 e0       	ldi	r20, 0x00	; 0
     3fc:	40 40       	sbci	r20, 0x00	; 0
     3fe:	40 00       	.word	0x0040	; ????
     400:	00 78       	andi	r16, 0x80	; 128
     402:	88 78       	andi	r24, 0x88	; 136
     404:	08 30       	cpi	r16, 0x08	; 8
     406:	80 80       	ld	r8, Z
     408:	b0 c8       	rjmp	.-3744   	; 0xfffff56a <__eeprom_end+0xff7ef56a>
     40a:	88 88       	ldd	r8, Y+16	; 0x10
     40c:	88 20       	and	r8, r8
     40e:	00 60       	ori	r16, 0x00	; 0
     410:	20 20       	and	r2, r0
     412:	20 70       	andi	r18, 0x00	; 0
     414:	10 00       	.word	0x0010	; ????
     416:	30 10       	cpse	r3, r0
     418:	10 90 60 40 	lds	r1, 0x4060	; 0x804060 <__bss_end+0x1d91>
     41c:	40 48       	sbci	r20, 0x80	; 128
     41e:	50 60       	ori	r21, 0x00	; 0
     420:	50 48       	sbci	r21, 0x80	; 128
     422:	60 20       	and	r6, r0
     424:	20 20       	and	r2, r0
     426:	20 20       	and	r2, r0
     428:	70 00       	.word	0x0070	; ????
     42a:	00 d0       	rcall	.+0      	; 0x42c <__LOCK_REGION_LENGTH__+0x2c>
     42c:	a8 a8       	ldd	r10, Y+48	; 0x30
     42e:	88 88       	ldd	r8, Y+16	; 0x10
     430:	00 00       	nop
     432:	b0 c8       	rjmp	.-3744   	; 0xfffff594 <__eeprom_end+0xff7ef594>
     434:	88 88       	ldd	r8, Y+16	; 0x10
     436:	88 00       	.word	0x0088	; ????
     438:	00 70       	andi	r16, 0x00	; 0
     43a:	88 88       	ldd	r8, Y+16	; 0x10
     43c:	88 70       	andi	r24, 0x08	; 8
     43e:	00 00       	nop
     440:	f0 88       	ldd	r15, Z+16	; 0x10
     442:	f0 80       	ld	r15, Z
     444:	80 00       	.word	0x0080	; ????
     446:	00 68       	ori	r16, 0x80	; 128
     448:	98 78       	andi	r25, 0x88	; 136
     44a:	08 08       	sbc	r0, r8
     44c:	00 00       	nop
     44e:	b0 c8       	rjmp	.-3744   	; 0xfffff5b0 <__eeprom_end+0xff7ef5b0>
     450:	80 80       	ld	r8, Z
     452:	80 00       	.word	0x0080	; ????
     454:	00 70       	andi	r16, 0x00	; 0
     456:	80 70       	andi	r24, 0x00	; 0
     458:	08 f0       	brcs	.+2      	; 0x45c <__LOCK_REGION_LENGTH__+0x5c>
     45a:	40 40       	sbci	r20, 0x00	; 0
     45c:	e0 40       	sbci	r30, 0x00	; 0
     45e:	40 48       	sbci	r20, 0x80	; 128
     460:	30 00       	.word	0x0030	; ????
     462:	00 88       	ldd	r0, Z+16	; 0x10
     464:	88 88       	ldd	r8, Y+16	; 0x10
     466:	98 68       	ori	r25, 0x88	; 136
     468:	00 00       	nop
     46a:	88 88       	ldd	r8, Y+16	; 0x10
     46c:	88 50       	subi	r24, 0x08	; 8
     46e:	20 00       	.word	0x0020	; ????
     470:	00 88       	ldd	r0, Z+16	; 0x10
     472:	88 a8       	ldd	r8, Y+48	; 0x30
     474:	a8 50       	subi	r26, 0x08	; 8
     476:	00 00       	nop
     478:	88 50       	subi	r24, 0x08	; 8
     47a:	20 50       	subi	r18, 0x00	; 0
     47c:	88 00       	.word	0x0088	; ????
     47e:	00 88       	ldd	r0, Z+16	; 0x10
     480:	88 78       	andi	r24, 0x88	; 136
     482:	08 70       	andi	r16, 0x08	; 8
     484:	00 00       	nop
     486:	f8 10       	cpse	r15, r8
     488:	20 40       	sbci	r18, 0x00	; 0
     48a:	f8 10       	cpse	r15, r8
     48c:	20 20       	and	r2, r0
     48e:	40 20       	and	r4, r0
     490:	20 10       	cpse	r2, r0
     492:	20 20       	and	r2, r0
     494:	20 20       	and	r2, r0
     496:	20 20       	and	r2, r0
     498:	20 40       	sbci	r18, 0x00	; 0
     49a:	20 20       	and	r2, r0
     49c:	10 20       	and	r1, r0
     49e:	20 40       	sbci	r18, 0x00	; 0

000004a0 <__ctors_end>:
     4a0:	11 24       	eor	r1, r1
     4a2:	1f be       	out	0x3f, r1	; 63
     4a4:	cf ef       	ldi	r28, 0xFF	; 255
     4a6:	cd bf       	out	0x3d, r28	; 61
     4a8:	df e5       	ldi	r29, 0x5F	; 95
     4aa:	de bf       	out	0x3e, r29	; 62
     4ac:	00 e0       	ldi	r16, 0x00	; 0
     4ae:	0c bf       	out	0x3c, r16	; 60

000004b0 <__do_copy_data>:
     4b0:	10 e2       	ldi	r17, 0x20	; 32
     4b2:	a0 e0       	ldi	r26, 0x00	; 0
     4b4:	b0 e2       	ldi	r27, 0x20	; 32
     4b6:	e8 ee       	ldi	r30, 0xE8	; 232
     4b8:	f7 e3       	ldi	r31, 0x37	; 55
     4ba:	00 e0       	ldi	r16, 0x00	; 0
     4bc:	0b bf       	out	0x3b, r16	; 59
     4be:	02 c0       	rjmp	.+4      	; 0x4c4 <__do_copy_data+0x14>
     4c0:	07 90       	elpm	r0, Z+
     4c2:	0d 92       	st	X+, r0
     4c4:	ac 34       	cpi	r26, 0x4C	; 76
     4c6:	b1 07       	cpc	r27, r17
     4c8:	d9 f7       	brne	.-10     	; 0x4c0 <__do_copy_data+0x10>

000004ca <__do_clear_bss>:
     4ca:	22 e2       	ldi	r18, 0x22	; 34
     4cc:	ac e4       	ldi	r26, 0x4C	; 76
     4ce:	b0 e2       	ldi	r27, 0x20	; 32
     4d0:	01 c0       	rjmp	.+2      	; 0x4d4 <.do_clear_bss_start>

000004d2 <.do_clear_bss_loop>:
     4d2:	1d 92       	st	X+, r1

000004d4 <.do_clear_bss_start>:
     4d4:	af 3c       	cpi	r26, 0xCF	; 207
     4d6:	b2 07       	cpc	r27, r18
     4d8:	e1 f7       	brne	.-8      	; 0x4d2 <.do_clear_bss_loop>
     4da:	0e 94 53 17 	call	0x2ea6	; 0x2ea6 <main>
     4de:	0c 94 f2 1b 	jmp	0x37e4	; 0x37e4 <_exit>

000004e2 <__bad_interrupt>:
     4e2:	8e cd       	rjmp	.-1252   	; 0x0 <__vectors>

000004e4 <__portable_avr_delay_cycles>:
 *
 * @{
 */
__always_optimize
static inline void __portable_avr_delay_cycles(unsigned long n)
{
     4e4:	04 c0       	rjmp	.+8      	; 0x4ee <__portable_avr_delay_cycles+0xa>
	while (n) {
		barrier();
		n--;
     4e6:	61 50       	subi	r22, 0x01	; 1
     4e8:	71 09       	sbc	r23, r1
     4ea:	81 09       	sbc	r24, r1
     4ec:	91 09       	sbc	r25, r1
 * @{
 */
__always_optimize
static inline void __portable_avr_delay_cycles(unsigned long n)
{
	while (n) {
     4ee:	61 15       	cp	r22, r1
     4f0:	71 05       	cpc	r23, r1
     4f2:	81 05       	cpc	r24, r1
     4f4:	91 05       	cpc	r25, r1
     4f6:	b9 f7       	brne	.-18     	; 0x4e6 <__portable_avr_delay_cycles+0x2>
     4f8:	08 95       	ret

000004fa <st7565r_init>:
 * Call this function to initialize the hardware interface and the LCD
 * controller. When initialization is done the display is turned on and ready
 * to receive data.
 */
void st7565r_init(void)
{
     4fa:	bf 92       	push	r11
     4fc:	cf 92       	push	r12
     4fe:	df 92       	push	r13
     500:	ef 92       	push	r14
     502:	ff 92       	push	r15
     504:	0f 93       	push	r16
     506:	1f 93       	push	r17
     508:	cf 93       	push	r28
     50a:	df 93       	push	r29
     50c:	1f 92       	push	r1
     50e:	cd b7       	in	r28, 0x3d	; 61
     510:	de b7       	in	r29, 0x3e	; 62
	PORT_t *base = arch_ioport_pin_to_base(pin);

	if (level) {
		base->OUTSET = arch_ioport_pin_to_mask(pin);
	} else {
		base->OUTCLR = arch_ioport_pin_to_mask(pin);
     512:	00 e0       	ldi	r16, 0x00	; 0
     514:	16 e0       	ldi	r17, 0x06	; 6
     516:	68 94       	set
     518:	ff 24       	eor	r15, r15
     51a:	f3 f8       	bld	r15, 3
     51c:	f8 01       	movw	r30, r16
     51e:	f6 82       	std	Z+6, r15	; 0x06
 * function, this command will control the RST pin.
 */
static inline void st7565r_hard_reset(void)
{
	ioport_set_pin_low(ST7565R_RESET_PIN);
	delay_us(10);
     520:	64 e0       	ldi	r22, 0x04	; 4
     522:	70 e0       	ldi	r23, 0x00	; 0
     524:	80 e0       	ldi	r24, 0x00	; 0
     526:	90 e0       	ldi	r25, 0x00	; 0
     528:	dd df       	rcall	.-70     	; 0x4e4 <__portable_avr_delay_cycles>
		bool level)
{
	PORT_t *base = arch_ioport_pin_to_base(pin);

	if (level) {
		base->OUTSET = arch_ioport_pin_to_mask(pin);
     52a:	f8 01       	movw	r30, r16
     52c:	f5 82       	std	Z+5, r15	; 0x05
	ioport_set_pin_high(ST7565R_RESET_PIN);
	delay_us(10);
     52e:	64 e0       	ldi	r22, 0x04	; 4
     530:	70 e0       	ldi	r23, 0x00	; 0
     532:	80 e0       	ldi	r24, 0x00	; 0
     534:	90 e0       	ldi	r25, 0x00	; 0
     536:	d6 df       	rcall	.-84     	; 0x4e4 <__portable_avr_delay_cycles>
	spi_flags_t spi_flags = SPI_MODE_3;
	board_spi_select_id_t spi_select_id = 0;
#endif

#if defined(ST7565R_USART_SPI_INTERFACE)
	struct usart_spi_device device = {
     538:	0f 2e       	mov	r0, r31
     53a:	fb e2       	ldi	r31, 0x2B	; 43
     53c:	bf 2e       	mov	r11, r31
     53e:	f0 2d       	mov	r31, r0
     540:	b9 82       	std	Y+1, r11	; 0x01
		.id = ST7565R_CS_PIN,
	};
	usart_spi_init(ST7565R_USART_SPI);
     542:	80 ea       	ldi	r24, 0xA0	; 160
     544:	99 e0       	ldi	r25, 0x09	; 9
     546:	d4 d4       	rcall	.+2472   	; 0xef0 <usart_spi_init>
	usart_spi_setup_device(ST7565R_USART_SPI, &device, spi_flags,
     548:	c1 2c       	mov	r12, r1
     54a:	d1 2c       	mov	r13, r1
     54c:	76 01       	movw	r14, r12
     54e:	00 e4       	ldi	r16, 0x40	; 64
     550:	12 e4       	ldi	r17, 0x42	; 66
     552:	2f e0       	ldi	r18, 0x0F	; 15
     554:	30 e0       	ldi	r19, 0x00	; 0
     556:	43 e0       	ldi	r20, 0x03	; 3
     558:	be 01       	movw	r22, r28
     55a:	6f 5f       	subi	r22, 0xFF	; 255
     55c:	7f 4f       	sbci	r23, 0xFF	; 255
     55e:	80 ea       	ldi	r24, 0xA0	; 160
     560:	99 e0       	ldi	r25, 0x09	; 9
     562:	f5 d4       	rcall	.+2538   	; 0xf4e <usart_spi_setup_device>
	} else {
		base->OUTCLR = arch_ioport_pin_to_mask(pin);
     564:	00 e6       	ldi	r16, 0x60	; 96
     566:	16 e0       	ldi	r17, 0x06	; 6
     568:	ff 24       	eor	r15, r15
     56a:	f3 94       	inc	r15
     56c:	f8 01       	movw	r30, r16
     56e:	f6 82       	std	Z+6, r15	; 0x06
 * \param command the command to write
 */
static inline void st7565r_write_command(uint8_t command)
{
#if defined(ST7565R_USART_SPI_INTERFACE)
	struct usart_spi_device device = {.id = ST7565R_CS_PIN};
     570:	b9 82       	std	Y+1, r11	; 0x01
	usart_spi_select_device(ST7565R_USART_SPI, &device);
     572:	be 01       	movw	r22, r28
     574:	6f 5f       	subi	r22, 0xFF	; 255
     576:	7f 4f       	sbci	r23, 0xFF	; 255
     578:	80 ea       	ldi	r24, 0xA0	; 160
     57a:	99 e0       	ldi	r25, 0x09	; 9
     57c:	02 d5       	rcall	.+2564   	; 0xf82 <usart_spi_select_device>
     57e:	f8 01       	movw	r30, r16
     580:	f6 82       	std	Z+6, r15	; 0x06
 *
 * \param usart The USART module.
 */
static inline bool usart_data_register_is_empty(USART_t * usart)
{
	return (usart)->STATUS & USART_DREIF_bm;
     582:	e0 ea       	ldi	r30, 0xA0	; 160
     584:	f9 e0       	ldi	r31, 0x09	; 9
     586:	81 81       	ldd	r24, Z+1	; 0x01
 * \return The received data
 */
static inline uint8_t usart_spi_transmit(USART_t * usart,
		uint8_t txdata)
{
	while (usart_data_register_is_empty(usart) == false);
     588:	85 ff       	sbrs	r24, 5
     58a:	fd cf       	rjmp	.-6      	; 0x586 <st7565r_init+0x8c>
 * \param usart The USART module.
 * \param txdata The data to be transmitted.
 */
static inline void usart_put(USART_t * usart, uint8_t txdata)
{
	(usart)->DATA = txdata;
     58c:	80 ea       	ldi	r24, 0xA0	; 160
     58e:	80 93 a0 09 	sts	0x09A0, r24	; 0x8009a0 <__TEXT_REGION_LENGTH__+0x7be9a0>
 *
 * \param usart The USART module.
 */
static inline bool usart_tx_is_complete(USART_t * usart)
{
	return (usart)->STATUS & USART_TXCIF_bm;
     592:	e0 ea       	ldi	r30, 0xA0	; 160
     594:	f9 e0       	ldi	r31, 0x09	; 9
     596:	81 81       	ldd	r24, Z+1	; 0x01
static inline uint8_t usart_spi_transmit(USART_t * usart,
		uint8_t txdata)
{
	while (usart_data_register_is_empty(usart) == false);
	usart_put(usart, txdata);
	while (!usart_tx_is_complete(usart));
     598:	86 ff       	sbrs	r24, 6
     59a:	fd cf       	rjmp	.-6      	; 0x596 <st7565r_init+0x9c>
 *
 * \param usart The USART module.
 */
static inline void usart_clear_tx_complete(USART_t * usart)
{
	(usart)->STATUS = USART_TXCIF_bm;
     59c:	e0 ea       	ldi	r30, 0xA0	; 160
     59e:	f9 e0       	ldi	r31, 0x09	; 9
     5a0:	80 e4       	ldi	r24, 0x40	; 64
     5a2:	81 83       	std	Z+1, r24	; 0x01
 *
 * \return The received data
 */
static inline uint8_t usart_get(USART_t * usart)
{
	return (usart)->DATA;
     5a4:	80 81       	ld	r24, Z
	ioport_set_pin_low(ST7565R_A0_PIN);
	usart_spi_transmit(ST7565R_USART_SPI, command);
	usart_spi_deselect_device(ST7565R_USART_SPI, &device);
     5a6:	be 01       	movw	r22, r28
     5a8:	6f 5f       	subi	r22, 0xFF	; 255
     5aa:	7f 4f       	sbci	r23, 0xFF	; 255
     5ac:	80 ea       	ldi	r24, 0xA0	; 160
     5ae:	99 e0       	ldi	r25, 0x09	; 9
     5b0:	fe d4       	rcall	.+2556   	; 0xfae <usart_spi_deselect_device>
 * \param command the command to write
 */
static inline void st7565r_write_command(uint8_t command)
{
#if defined(ST7565R_USART_SPI_INTERFACE)
	struct usart_spi_device device = {.id = ST7565R_CS_PIN};
     5b2:	8b e2       	ldi	r24, 0x2B	; 43
	usart_spi_select_device(ST7565R_USART_SPI, &device);
     5b4:	89 83       	std	Y+1, r24	; 0x01
     5b6:	be 01       	movw	r22, r28
     5b8:	6f 5f       	subi	r22, 0xFF	; 255
     5ba:	7f 4f       	sbci	r23, 0xFF	; 255
     5bc:	80 ea       	ldi	r24, 0xA0	; 160
     5be:	99 e0       	ldi	r25, 0x09	; 9
     5c0:	e0 d4       	rcall	.+2496   	; 0xf82 <usart_spi_select_device>
     5c2:	81 e0       	ldi	r24, 0x01	; 1
     5c4:	80 93 66 06 	sts	0x0666, r24	; 0x800666 <__TEXT_REGION_LENGTH__+0x7be666>
 *
 * \param usart The USART module.
 */
static inline bool usart_data_register_is_empty(USART_t * usart)
{
	return (usart)->STATUS & USART_DREIF_bm;
     5c8:	e0 ea       	ldi	r30, 0xA0	; 160
     5ca:	f9 e0       	ldi	r31, 0x09	; 9
     5cc:	81 81       	ldd	r24, Z+1	; 0x01
 * \return The received data
 */
static inline uint8_t usart_spi_transmit(USART_t * usart,
		uint8_t txdata)
{
	while (usart_data_register_is_empty(usart) == false);
     5ce:	85 ff       	sbrs	r24, 5
     5d0:	fd cf       	rjmp	.-6      	; 0x5cc <st7565r_init+0xd2>
 * \param usart The USART module.
 * \param txdata The data to be transmitted.
 */
static inline void usart_put(USART_t * usart, uint8_t txdata)
{
	(usart)->DATA = txdata;
     5d2:	86 ea       	ldi	r24, 0xA6	; 166
     5d4:	80 93 a0 09 	sts	0x09A0, r24	; 0x8009a0 <__TEXT_REGION_LENGTH__+0x7be9a0>
 *
 * \param usart The USART module.
 */
static inline bool usart_tx_is_complete(USART_t * usart)
{
	return (usart)->STATUS & USART_TXCIF_bm;
     5d8:	e0 ea       	ldi	r30, 0xA0	; 160
     5da:	f9 e0       	ldi	r31, 0x09	; 9
     5dc:	81 81       	ldd	r24, Z+1	; 0x01
static inline uint8_t usart_spi_transmit(USART_t * usart,
		uint8_t txdata)
{
	while (usart_data_register_is_empty(usart) == false);
	usart_put(usart, txdata);
	while (!usart_tx_is_complete(usart));
     5de:	86 ff       	sbrs	r24, 6
     5e0:	fd cf       	rjmp	.-6      	; 0x5dc <st7565r_init+0xe2>
 *
 * \param usart The USART module.
 */
static inline void usart_clear_tx_complete(USART_t * usart)
{
	(usart)->STATUS = USART_TXCIF_bm;
     5e2:	e0 ea       	ldi	r30, 0xA0	; 160
     5e4:	f9 e0       	ldi	r31, 0x09	; 9
     5e6:	80 e4       	ldi	r24, 0x40	; 64
 *
 * \return The received data
 */
static inline uint8_t usart_get(USART_t * usart)
{
	return (usart)->DATA;
     5e8:	81 83       	std	Z+1, r24	; 0x01
	ioport_set_pin_low(ST7565R_A0_PIN);
	usart_spi_transmit(ST7565R_USART_SPI, command);
	usart_spi_deselect_device(ST7565R_USART_SPI, &device);
     5ea:	80 81       	ld	r24, Z
     5ec:	be 01       	movw	r22, r28
     5ee:	6f 5f       	subi	r22, 0xFF	; 255
     5f0:	7f 4f       	sbci	r23, 0xFF	; 255
     5f2:	80 ea       	ldi	r24, 0xA0	; 160
     5f4:	99 e0       	ldi	r25, 0x09	; 9
 * \param command the command to write
 */
static inline void st7565r_write_command(uint8_t command)
{
#if defined(ST7565R_USART_SPI_INTERFACE)
	struct usart_spi_device device = {.id = ST7565R_CS_PIN};
     5f6:	db d4       	rcall	.+2486   	; 0xfae <usart_spi_deselect_device>
     5f8:	8b e2       	ldi	r24, 0x2B	; 43
	usart_spi_select_device(ST7565R_USART_SPI, &device);
     5fa:	89 83       	std	Y+1, r24	; 0x01
     5fc:	be 01       	movw	r22, r28
     5fe:	6f 5f       	subi	r22, 0xFF	; 255
     600:	7f 4f       	sbci	r23, 0xFF	; 255
     602:	80 ea       	ldi	r24, 0xA0	; 160
     604:	99 e0       	ldi	r25, 0x09	; 9
     606:	bd d4       	rcall	.+2426   	; 0xf82 <usart_spi_select_device>
     608:	81 e0       	ldi	r24, 0x01	; 1
     60a:	80 93 66 06 	sts	0x0666, r24	; 0x800666 <__TEXT_REGION_LENGTH__+0x7be666>
 *
 * \param usart The USART module.
 */
static inline bool usart_data_register_is_empty(USART_t * usart)
{
	return (usart)->STATUS & USART_DREIF_bm;
     60e:	e0 ea       	ldi	r30, 0xA0	; 160
     610:	f9 e0       	ldi	r31, 0x09	; 9
     612:	81 81       	ldd	r24, Z+1	; 0x01
 * \return The received data
 */
static inline uint8_t usart_spi_transmit(USART_t * usart,
		uint8_t txdata)
{
	while (usart_data_register_is_empty(usart) == false);
     614:	85 ff       	sbrs	r24, 5
     616:	fd cf       	rjmp	.-6      	; 0x612 <st7565r_init+0x118>
 * \param usart The USART module.
 * \param txdata The data to be transmitted.
 */
static inline void usart_put(USART_t * usart, uint8_t txdata)
{
	(usart)->DATA = txdata;
     618:	88 ec       	ldi	r24, 0xC8	; 200
     61a:	80 93 a0 09 	sts	0x09A0, r24	; 0x8009a0 <__TEXT_REGION_LENGTH__+0x7be9a0>
 *
 * \param usart The USART module.
 */
static inline bool usart_tx_is_complete(USART_t * usart)
{
	return (usart)->STATUS & USART_TXCIF_bm;
     61e:	e0 ea       	ldi	r30, 0xA0	; 160
     620:	f9 e0       	ldi	r31, 0x09	; 9
     622:	81 81       	ldd	r24, Z+1	; 0x01
static inline uint8_t usart_spi_transmit(USART_t * usart,
		uint8_t txdata)
{
	while (usart_data_register_is_empty(usart) == false);
	usart_put(usart, txdata);
	while (!usart_tx_is_complete(usart));
     624:	86 ff       	sbrs	r24, 6
     626:	fd cf       	rjmp	.-6      	; 0x622 <st7565r_init+0x128>
 *
 * \param usart The USART module.
 */
static inline void usart_clear_tx_complete(USART_t * usart)
{
	(usart)->STATUS = USART_TXCIF_bm;
     628:	e0 ea       	ldi	r30, 0xA0	; 160
     62a:	f9 e0       	ldi	r31, 0x09	; 9
     62c:	80 e4       	ldi	r24, 0x40	; 64
 *
 * \return The received data
 */
static inline uint8_t usart_get(USART_t * usart)
{
	return (usart)->DATA;
     62e:	81 83       	std	Z+1, r24	; 0x01
	ioport_set_pin_low(ST7565R_A0_PIN);
	usart_spi_transmit(ST7565R_USART_SPI, command);
	usart_spi_deselect_device(ST7565R_USART_SPI, &device);
     630:	80 81       	ld	r24, Z
     632:	be 01       	movw	r22, r28
     634:	6f 5f       	subi	r22, 0xFF	; 255
     636:	7f 4f       	sbci	r23, 0xFF	; 255
     638:	80 ea       	ldi	r24, 0xA0	; 160
     63a:	99 e0       	ldi	r25, 0x09	; 9
 * \param command the command to write
 */
static inline void st7565r_write_command(uint8_t command)
{
#if defined(ST7565R_USART_SPI_INTERFACE)
	struct usart_spi_device device = {.id = ST7565R_CS_PIN};
     63c:	b8 d4       	rcall	.+2416   	; 0xfae <usart_spi_deselect_device>
     63e:	8b e2       	ldi	r24, 0x2B	; 43
	usart_spi_select_device(ST7565R_USART_SPI, &device);
     640:	89 83       	std	Y+1, r24	; 0x01
     642:	be 01       	movw	r22, r28
     644:	6f 5f       	subi	r22, 0xFF	; 255
     646:	7f 4f       	sbci	r23, 0xFF	; 255
     648:	80 ea       	ldi	r24, 0xA0	; 160
     64a:	99 e0       	ldi	r25, 0x09	; 9
     64c:	9a d4       	rcall	.+2356   	; 0xf82 <usart_spi_select_device>
     64e:	81 e0       	ldi	r24, 0x01	; 1
     650:	80 93 66 06 	sts	0x0666, r24	; 0x800666 <__TEXT_REGION_LENGTH__+0x7be666>
 *
 * \param usart The USART module.
 */
static inline bool usart_data_register_is_empty(USART_t * usart)
{
	return (usart)->STATUS & USART_DREIF_bm;
     654:	e0 ea       	ldi	r30, 0xA0	; 160
     656:	f9 e0       	ldi	r31, 0x09	; 9
     658:	81 81       	ldd	r24, Z+1	; 0x01
 * \return The received data
 */
static inline uint8_t usart_spi_transmit(USART_t * usart,
		uint8_t txdata)
{
	while (usart_data_register_is_empty(usart) == false);
     65a:	85 ff       	sbrs	r24, 5
     65c:	fd cf       	rjmp	.-6      	; 0x658 <st7565r_init+0x15e>
 * \param usart The USART module.
 * \param txdata The data to be transmitted.
 */
static inline void usart_put(USART_t * usart, uint8_t txdata)
{
	(usart)->DATA = txdata;
     65e:	82 ea       	ldi	r24, 0xA2	; 162
     660:	80 93 a0 09 	sts	0x09A0, r24	; 0x8009a0 <__TEXT_REGION_LENGTH__+0x7be9a0>
 *
 * \param usart The USART module.
 */
static inline bool usart_tx_is_complete(USART_t * usart)
{
	return (usart)->STATUS & USART_TXCIF_bm;
     664:	e0 ea       	ldi	r30, 0xA0	; 160
     666:	f9 e0       	ldi	r31, 0x09	; 9
     668:	81 81       	ldd	r24, Z+1	; 0x01
static inline uint8_t usart_spi_transmit(USART_t * usart,
		uint8_t txdata)
{
	while (usart_data_register_is_empty(usart) == false);
	usart_put(usart, txdata);
	while (!usart_tx_is_complete(usart));
     66a:	86 ff       	sbrs	r24, 6
 *
 * \param usart The USART module.
 */
static inline void usart_clear_tx_complete(USART_t * usart)
{
	(usart)->STATUS = USART_TXCIF_bm;
     66c:	fd cf       	rjmp	.-6      	; 0x668 <st7565r_init+0x16e>
     66e:	e0 ea       	ldi	r30, 0xA0	; 160
     670:	f9 e0       	ldi	r31, 0x09	; 9
     672:	80 e4       	ldi	r24, 0x40	; 64
 *
 * \return The received data
 */
static inline uint8_t usart_get(USART_t * usart)
{
	return (usart)->DATA;
     674:	81 83       	std	Z+1, r24	; 0x01
	ioport_set_pin_low(ST7565R_A0_PIN);
	usart_spi_transmit(ST7565R_USART_SPI, command);
	usart_spi_deselect_device(ST7565R_USART_SPI, &device);
     676:	80 81       	ld	r24, Z
     678:	be 01       	movw	r22, r28
     67a:	6f 5f       	subi	r22, 0xFF	; 255
     67c:	7f 4f       	sbci	r23, 0xFF	; 255
     67e:	80 ea       	ldi	r24, 0xA0	; 160
     680:	99 e0       	ldi	r25, 0x09	; 9
 * \param command the command to write
 */
static inline void st7565r_write_command(uint8_t command)
{
#if defined(ST7565R_USART_SPI_INTERFACE)
	struct usart_spi_device device = {.id = ST7565R_CS_PIN};
     682:	95 d4       	rcall	.+2346   	; 0xfae <usart_spi_deselect_device>
     684:	8b e2       	ldi	r24, 0x2B	; 43
	usart_spi_select_device(ST7565R_USART_SPI, &device);
     686:	89 83       	std	Y+1, r24	; 0x01
     688:	be 01       	movw	r22, r28
     68a:	6f 5f       	subi	r22, 0xFF	; 255
     68c:	7f 4f       	sbci	r23, 0xFF	; 255
     68e:	80 ea       	ldi	r24, 0xA0	; 160
     690:	99 e0       	ldi	r25, 0x09	; 9
     692:	77 d4       	rcall	.+2286   	; 0xf82 <usart_spi_select_device>
     694:	81 e0       	ldi	r24, 0x01	; 1
     696:	80 93 66 06 	sts	0x0666, r24	; 0x800666 <__TEXT_REGION_LENGTH__+0x7be666>
 *
 * \param usart The USART module.
 */
static inline bool usart_data_register_is_empty(USART_t * usart)
{
	return (usart)->STATUS & USART_DREIF_bm;
     69a:	e0 ea       	ldi	r30, 0xA0	; 160
     69c:	f9 e0       	ldi	r31, 0x09	; 9
     69e:	81 81       	ldd	r24, Z+1	; 0x01
 * \return The received data
 */
static inline uint8_t usart_spi_transmit(USART_t * usart,
		uint8_t txdata)
{
	while (usart_data_register_is_empty(usart) == false);
     6a0:	85 ff       	sbrs	r24, 5
     6a2:	fd cf       	rjmp	.-6      	; 0x69e <st7565r_init+0x1a4>
 * \param usart The USART module.
 * \param txdata The data to be transmitted.
 */
static inline void usart_put(USART_t * usart, uint8_t txdata)
{
	(usart)->DATA = txdata;
     6a4:	8f e2       	ldi	r24, 0x2F	; 47
     6a6:	80 93 a0 09 	sts	0x09A0, r24	; 0x8009a0 <__TEXT_REGION_LENGTH__+0x7be9a0>
 *
 * \param usart The USART module.
 */
static inline bool usart_tx_is_complete(USART_t * usart)
{
	return (usart)->STATUS & USART_TXCIF_bm;
     6aa:	e0 ea       	ldi	r30, 0xA0	; 160
     6ac:	f9 e0       	ldi	r31, 0x09	; 9
static inline uint8_t usart_spi_transmit(USART_t * usart,
		uint8_t txdata)
{
	while (usart_data_register_is_empty(usart) == false);
	usart_put(usart, txdata);
	while (!usart_tx_is_complete(usart));
     6ae:	81 81       	ldd	r24, Z+1	; 0x01
     6b0:	86 ff       	sbrs	r24, 6
 *
 * \param usart The USART module.
 */
static inline void usart_clear_tx_complete(USART_t * usart)
{
	(usart)->STATUS = USART_TXCIF_bm;
     6b2:	fd cf       	rjmp	.-6      	; 0x6ae <st7565r_init+0x1b4>
     6b4:	e0 ea       	ldi	r30, 0xA0	; 160
     6b6:	f9 e0       	ldi	r31, 0x09	; 9
     6b8:	80 e4       	ldi	r24, 0x40	; 64
 *
 * \return The received data
 */
static inline uint8_t usart_get(USART_t * usart)
{
	return (usart)->DATA;
     6ba:	81 83       	std	Z+1, r24	; 0x01
	ioport_set_pin_low(ST7565R_A0_PIN);
	usart_spi_transmit(ST7565R_USART_SPI, command);
	usart_spi_deselect_device(ST7565R_USART_SPI, &device);
     6bc:	80 81       	ld	r24, Z
     6be:	be 01       	movw	r22, r28
     6c0:	6f 5f       	subi	r22, 0xFF	; 255
     6c2:	7f 4f       	sbci	r23, 0xFF	; 255
     6c4:	80 ea       	ldi	r24, 0xA0	; 160
     6c6:	99 e0       	ldi	r25, 0x09	; 9
 * \param command the command to write
 */
static inline void st7565r_write_command(uint8_t command)
{
#if defined(ST7565R_USART_SPI_INTERFACE)
	struct usart_spi_device device = {.id = ST7565R_CS_PIN};
     6c8:	72 d4       	rcall	.+2276   	; 0xfae <usart_spi_deselect_device>
     6ca:	8b e2       	ldi	r24, 0x2B	; 43
	usart_spi_select_device(ST7565R_USART_SPI, &device);
     6cc:	89 83       	std	Y+1, r24	; 0x01
     6ce:	be 01       	movw	r22, r28
     6d0:	6f 5f       	subi	r22, 0xFF	; 255
     6d2:	7f 4f       	sbci	r23, 0xFF	; 255
     6d4:	80 ea       	ldi	r24, 0xA0	; 160
     6d6:	99 e0       	ldi	r25, 0x09	; 9
     6d8:	54 d4       	rcall	.+2216   	; 0xf82 <usart_spi_select_device>
     6da:	81 e0       	ldi	r24, 0x01	; 1
     6dc:	80 93 66 06 	sts	0x0666, r24	; 0x800666 <__TEXT_REGION_LENGTH__+0x7be666>
 *
 * \param usart The USART module.
 */
static inline bool usart_data_register_is_empty(USART_t * usart)
{
	return (usart)->STATUS & USART_DREIF_bm;
     6e0:	e0 ea       	ldi	r30, 0xA0	; 160
     6e2:	f9 e0       	ldi	r31, 0x09	; 9
     6e4:	81 81       	ldd	r24, Z+1	; 0x01
 * \return The received data
 */
static inline uint8_t usart_spi_transmit(USART_t * usart,
		uint8_t txdata)
{
	while (usart_data_register_is_empty(usart) == false);
     6e6:	85 ff       	sbrs	r24, 5
     6e8:	fd cf       	rjmp	.-6      	; 0x6e4 <st7565r_init+0x1ea>
 * \param usart The USART module.
 * \param txdata The data to be transmitted.
 */
static inline void usart_put(USART_t * usart, uint8_t txdata)
{
	(usart)->DATA = txdata;
     6ea:	88 ef       	ldi	r24, 0xF8	; 248
     6ec:	80 93 a0 09 	sts	0x09A0, r24	; 0x8009a0 <__TEXT_REGION_LENGTH__+0x7be9a0>
 *
 * \param usart The USART module.
 */
static inline bool usart_tx_is_complete(USART_t * usart)
{
	return (usart)->STATUS & USART_TXCIF_bm;
     6f0:	e0 ea       	ldi	r30, 0xA0	; 160
     6f2:	f9 e0       	ldi	r31, 0x09	; 9
static inline uint8_t usart_spi_transmit(USART_t * usart,
		uint8_t txdata)
{
	while (usart_data_register_is_empty(usart) == false);
	usart_put(usart, txdata);
	while (!usart_tx_is_complete(usart));
     6f4:	81 81       	ldd	r24, Z+1	; 0x01
     6f6:	86 ff       	sbrs	r24, 6
 *
 * \param usart The USART module.
 */
static inline void usart_clear_tx_complete(USART_t * usart)
{
	(usart)->STATUS = USART_TXCIF_bm;
     6f8:	fd cf       	rjmp	.-6      	; 0x6f4 <st7565r_init+0x1fa>
     6fa:	e0 ea       	ldi	r30, 0xA0	; 160
     6fc:	f9 e0       	ldi	r31, 0x09	; 9
 *
 * \return The received data
 */
static inline uint8_t usart_get(USART_t * usart)
{
	return (usart)->DATA;
     6fe:	80 e4       	ldi	r24, 0x40	; 64
	ioport_set_pin_low(ST7565R_A0_PIN);
	usart_spi_transmit(ST7565R_USART_SPI, command);
	usart_spi_deselect_device(ST7565R_USART_SPI, &device);
     700:	81 83       	std	Z+1, r24	; 0x01
     702:	80 81       	ld	r24, Z
     704:	be 01       	movw	r22, r28
     706:	6f 5f       	subi	r22, 0xFF	; 255
     708:	7f 4f       	sbci	r23, 0xFF	; 255
     70a:	80 ea       	ldi	r24, 0xA0	; 160
     70c:	99 e0       	ldi	r25, 0x09	; 9
 * \param command the command to write
 */
static inline void st7565r_write_command(uint8_t command)
{
#if defined(ST7565R_USART_SPI_INTERFACE)
	struct usart_spi_device device = {.id = ST7565R_CS_PIN};
     70e:	4f d4       	rcall	.+2206   	; 0xfae <usart_spi_deselect_device>
     710:	8b e2       	ldi	r24, 0x2B	; 43
	usart_spi_select_device(ST7565R_USART_SPI, &device);
     712:	89 83       	std	Y+1, r24	; 0x01
     714:	be 01       	movw	r22, r28
     716:	6f 5f       	subi	r22, 0xFF	; 255
     718:	7f 4f       	sbci	r23, 0xFF	; 255
     71a:	80 ea       	ldi	r24, 0xA0	; 160
     71c:	99 e0       	ldi	r25, 0x09	; 9
     71e:	31 d4       	rcall	.+2146   	; 0xf82 <usart_spi_select_device>
     720:	81 e0       	ldi	r24, 0x01	; 1
     722:	80 93 66 06 	sts	0x0666, r24	; 0x800666 <__TEXT_REGION_LENGTH__+0x7be666>
 *
 * \param usart The USART module.
 */
static inline bool usart_data_register_is_empty(USART_t * usart)
{
	return (usart)->STATUS & USART_DREIF_bm;
     726:	e0 ea       	ldi	r30, 0xA0	; 160
     728:	f9 e0       	ldi	r31, 0x09	; 9
     72a:	81 81       	ldd	r24, Z+1	; 0x01
 * \return The received data
 */
static inline uint8_t usart_spi_transmit(USART_t * usart,
		uint8_t txdata)
{
	while (usart_data_register_is_empty(usart) == false);
     72c:	85 ff       	sbrs	r24, 5
     72e:	fd cf       	rjmp	.-6      	; 0x72a <st7565r_init+0x230>
 * \param usart The USART module.
 * \param txdata The data to be transmitted.
 */
static inline void usart_put(USART_t * usart, uint8_t txdata)
{
	(usart)->DATA = txdata;
     730:	10 92 a0 09 	sts	0x09A0, r1	; 0x8009a0 <__TEXT_REGION_LENGTH__+0x7be9a0>
 *
 * \param usart The USART module.
 */
static inline bool usart_tx_is_complete(USART_t * usart)
{
	return (usart)->STATUS & USART_TXCIF_bm;
     734:	e0 ea       	ldi	r30, 0xA0	; 160
     736:	f9 e0       	ldi	r31, 0x09	; 9
static inline uint8_t usart_spi_transmit(USART_t * usart,
		uint8_t txdata)
{
	while (usart_data_register_is_empty(usart) == false);
	usart_put(usart, txdata);
	while (!usart_tx_is_complete(usart));
     738:	81 81       	ldd	r24, Z+1	; 0x01
     73a:	86 ff       	sbrs	r24, 6
 *
 * \param usart The USART module.
 */
static inline void usart_clear_tx_complete(USART_t * usart)
{
	(usart)->STATUS = USART_TXCIF_bm;
     73c:	fd cf       	rjmp	.-6      	; 0x738 <st7565r_init+0x23e>
     73e:	e0 ea       	ldi	r30, 0xA0	; 160
     740:	f9 e0       	ldi	r31, 0x09	; 9
 *
 * \return The received data
 */
static inline uint8_t usart_get(USART_t * usart)
{
	return (usart)->DATA;
     742:	80 e4       	ldi	r24, 0x40	; 64
	ioport_set_pin_low(ST7565R_A0_PIN);
	usart_spi_transmit(ST7565R_USART_SPI, command);
	usart_spi_deselect_device(ST7565R_USART_SPI, &device);
     744:	81 83       	std	Z+1, r24	; 0x01
     746:	80 81       	ld	r24, Z
     748:	be 01       	movw	r22, r28
     74a:	6f 5f       	subi	r22, 0xFF	; 255
     74c:	7f 4f       	sbci	r23, 0xFF	; 255
     74e:	80 ea       	ldi	r24, 0xA0	; 160
     750:	99 e0       	ldi	r25, 0x09	; 9
 * \param command the command to write
 */
static inline void st7565r_write_command(uint8_t command)
{
#if defined(ST7565R_USART_SPI_INTERFACE)
	struct usart_spi_device device = {.id = ST7565R_CS_PIN};
     752:	2d d4       	rcall	.+2138   	; 0xfae <usart_spi_deselect_device>
     754:	8b e2       	ldi	r24, 0x2B	; 43
	usart_spi_select_device(ST7565R_USART_SPI, &device);
     756:	89 83       	std	Y+1, r24	; 0x01
     758:	be 01       	movw	r22, r28
     75a:	6f 5f       	subi	r22, 0xFF	; 255
     75c:	7f 4f       	sbci	r23, 0xFF	; 255
     75e:	80 ea       	ldi	r24, 0xA0	; 160
     760:	99 e0       	ldi	r25, 0x09	; 9
     762:	0f d4       	rcall	.+2078   	; 0xf82 <usart_spi_select_device>
     764:	81 e0       	ldi	r24, 0x01	; 1
     766:	80 93 66 06 	sts	0x0666, r24	; 0x800666 <__TEXT_REGION_LENGTH__+0x7be666>
 *
 * \param usart The USART module.
 */
static inline bool usart_data_register_is_empty(USART_t * usart)
{
	return (usart)->STATUS & USART_DREIF_bm;
     76a:	e0 ea       	ldi	r30, 0xA0	; 160
     76c:	f9 e0       	ldi	r31, 0x09	; 9
     76e:	81 81       	ldd	r24, Z+1	; 0x01
 * \return The received data
 */
static inline uint8_t usart_spi_transmit(USART_t * usart,
		uint8_t txdata)
{
	while (usart_data_register_is_empty(usart) == false);
     770:	85 ff       	sbrs	r24, 5
 * \param usart The USART module.
 * \param txdata The data to be transmitted.
 */
static inline void usart_put(USART_t * usart, uint8_t txdata)
{
	(usart)->DATA = txdata;
     772:	fd cf       	rjmp	.-6      	; 0x76e <st7565r_init+0x274>
     774:	81 e2       	ldi	r24, 0x21	; 33
     776:	80 93 a0 09 	sts	0x09A0, r24	; 0x8009a0 <__TEXT_REGION_LENGTH__+0x7be9a0>
 *
 * \param usart The USART module.
 */
static inline bool usart_tx_is_complete(USART_t * usart)
{
	return (usart)->STATUS & USART_TXCIF_bm;
     77a:	e0 ea       	ldi	r30, 0xA0	; 160
     77c:	f9 e0       	ldi	r31, 0x09	; 9
static inline uint8_t usart_spi_transmit(USART_t * usart,
		uint8_t txdata)
{
	while (usart_data_register_is_empty(usart) == false);
	usart_put(usart, txdata);
	while (!usart_tx_is_complete(usart));
     77e:	81 81       	ldd	r24, Z+1	; 0x01
 *
 * \param usart The USART module.
 */
static inline void usart_clear_tx_complete(USART_t * usart)
{
	(usart)->STATUS = USART_TXCIF_bm;
     780:	86 ff       	sbrs	r24, 6
     782:	fd cf       	rjmp	.-6      	; 0x77e <st7565r_init+0x284>
     784:	e0 ea       	ldi	r30, 0xA0	; 160
     786:	f9 e0       	ldi	r31, 0x09	; 9
 *
 * \return The received data
 */
static inline uint8_t usart_get(USART_t * usart)
{
	return (usart)->DATA;
     788:	80 e4       	ldi	r24, 0x40	; 64
	ioport_set_pin_low(ST7565R_A0_PIN);
	usart_spi_transmit(ST7565R_USART_SPI, command);
	usart_spi_deselect_device(ST7565R_USART_SPI, &device);
     78a:	81 83       	std	Z+1, r24	; 0x01
     78c:	80 81       	ld	r24, Z
     78e:	be 01       	movw	r22, r28
     790:	6f 5f       	subi	r22, 0xFF	; 255
     792:	7f 4f       	sbci	r23, 0xFF	; 255
     794:	80 ea       	ldi	r24, 0xA0	; 160
     796:	99 e0       	ldi	r25, 0x09	; 9
 * \param command the command to write
 */
static inline void st7565r_write_command(uint8_t command)
{
#if defined(ST7565R_USART_SPI_INTERFACE)
	struct usart_spi_device device = {.id = ST7565R_CS_PIN};
     798:	0a d4       	rcall	.+2068   	; 0xfae <usart_spi_deselect_device>
     79a:	8b e2       	ldi	r24, 0x2B	; 43
	usart_spi_select_device(ST7565R_USART_SPI, &device);
     79c:	89 83       	std	Y+1, r24	; 0x01
     79e:	be 01       	movw	r22, r28
     7a0:	6f 5f       	subi	r22, 0xFF	; 255
     7a2:	7f 4f       	sbci	r23, 0xFF	; 255
     7a4:	80 ea       	ldi	r24, 0xA0	; 160
     7a6:	99 e0       	ldi	r25, 0x09	; 9
     7a8:	ec d3       	rcall	.+2008   	; 0xf82 <usart_spi_select_device>
     7aa:	81 e0       	ldi	r24, 0x01	; 1
     7ac:	80 93 66 06 	sts	0x0666, r24	; 0x800666 <__TEXT_REGION_LENGTH__+0x7be666>
 *
 * \param usart The USART module.
 */
static inline bool usart_data_register_is_empty(USART_t * usart)
{
	return (usart)->STATUS & USART_DREIF_bm;
     7b0:	e0 ea       	ldi	r30, 0xA0	; 160
     7b2:	f9 e0       	ldi	r31, 0x09	; 9
 * \return The received data
 */
static inline uint8_t usart_spi_transmit(USART_t * usart,
		uint8_t txdata)
{
	while (usart_data_register_is_empty(usart) == false);
     7b4:	81 81       	ldd	r24, Z+1	; 0x01
     7b6:	85 ff       	sbrs	r24, 5
 * \param usart The USART module.
 * \param txdata The data to be transmitted.
 */
static inline void usart_put(USART_t * usart, uint8_t txdata)
{
	(usart)->DATA = txdata;
     7b8:	fd cf       	rjmp	.-6      	; 0x7b4 <st7565r_init+0x2ba>
     7ba:	81 e8       	ldi	r24, 0x81	; 129
     7bc:	80 93 a0 09 	sts	0x09A0, r24	; 0x8009a0 <__TEXT_REGION_LENGTH__+0x7be9a0>
 *
 * \param usart The USART module.
 */
static inline bool usart_tx_is_complete(USART_t * usart)
{
	return (usart)->STATUS & USART_TXCIF_bm;
     7c0:	e0 ea       	ldi	r30, 0xA0	; 160
static inline uint8_t usart_spi_transmit(USART_t * usart,
		uint8_t txdata)
{
	while (usart_data_register_is_empty(usart) == false);
	usart_put(usart, txdata);
	while (!usart_tx_is_complete(usart));
     7c2:	f9 e0       	ldi	r31, 0x09	; 9
     7c4:	81 81       	ldd	r24, Z+1	; 0x01
 *
 * \param usart The USART module.
 */
static inline void usart_clear_tx_complete(USART_t * usart)
{
	(usart)->STATUS = USART_TXCIF_bm;
     7c6:	86 ff       	sbrs	r24, 6
     7c8:	fd cf       	rjmp	.-6      	; 0x7c4 <st7565r_init+0x2ca>
     7ca:	e0 ea       	ldi	r30, 0xA0	; 160
     7cc:	f9 e0       	ldi	r31, 0x09	; 9
 *
 * \return The received data
 */
static inline uint8_t usart_get(USART_t * usart)
{
	return (usart)->DATA;
     7ce:	80 e4       	ldi	r24, 0x40	; 64
	ioport_set_pin_low(ST7565R_A0_PIN);
	usart_spi_transmit(ST7565R_USART_SPI, command);
	usart_spi_deselect_device(ST7565R_USART_SPI, &device);
     7d0:	81 83       	std	Z+1, r24	; 0x01
     7d2:	80 81       	ld	r24, Z
     7d4:	be 01       	movw	r22, r28
     7d6:	6f 5f       	subi	r22, 0xFF	; 255
     7d8:	7f 4f       	sbci	r23, 0xFF	; 255
     7da:	80 ea       	ldi	r24, 0xA0	; 160
     7dc:	99 e0       	ldi	r25, 0x09	; 9
 * \param command the command to write
 */
static inline void st7565r_write_command(uint8_t command)
{
#if defined(ST7565R_USART_SPI_INTERFACE)
	struct usart_spi_device device = {.id = ST7565R_CS_PIN};
     7de:	e7 d3       	rcall	.+1998   	; 0xfae <usart_spi_deselect_device>
     7e0:	8b e2       	ldi	r24, 0x2B	; 43
	usart_spi_select_device(ST7565R_USART_SPI, &device);
     7e2:	89 83       	std	Y+1, r24	; 0x01
     7e4:	be 01       	movw	r22, r28
     7e6:	6f 5f       	subi	r22, 0xFF	; 255
     7e8:	7f 4f       	sbci	r23, 0xFF	; 255
     7ea:	80 ea       	ldi	r24, 0xA0	; 160
     7ec:	99 e0       	ldi	r25, 0x09	; 9
     7ee:	c9 d3       	rcall	.+1938   	; 0xf82 <usart_spi_select_device>
     7f0:	81 e0       	ldi	r24, 0x01	; 1
     7f2:	80 93 66 06 	sts	0x0666, r24	; 0x800666 <__TEXT_REGION_LENGTH__+0x7be666>
 *
 * \param usart The USART module.
 */
static inline bool usart_data_register_is_empty(USART_t * usart)
{
	return (usart)->STATUS & USART_DREIF_bm;
     7f6:	e0 ea       	ldi	r30, 0xA0	; 160
     7f8:	f9 e0       	ldi	r31, 0x09	; 9
 * \return The received data
 */
static inline uint8_t usart_spi_transmit(USART_t * usart,
		uint8_t txdata)
{
	while (usart_data_register_is_empty(usart) == false);
     7fa:	81 81       	ldd	r24, Z+1	; 0x01
     7fc:	85 ff       	sbrs	r24, 5
 * \param usart The USART module.
 * \param txdata The data to be transmitted.
 */
static inline void usart_put(USART_t * usart, uint8_t txdata)
{
	(usart)->DATA = txdata;
     7fe:	fd cf       	rjmp	.-6      	; 0x7fa <st7565r_init+0x300>
     800:	81 e2       	ldi	r24, 0x21	; 33
     802:	80 93 a0 09 	sts	0x09A0, r24	; 0x8009a0 <__TEXT_REGION_LENGTH__+0x7be9a0>
 *
 * \param usart The USART module.
 */
static inline bool usart_tx_is_complete(USART_t * usart)
{
	return (usart)->STATUS & USART_TXCIF_bm;
     806:	e0 ea       	ldi	r30, 0xA0	; 160
static inline uint8_t usart_spi_transmit(USART_t * usart,
		uint8_t txdata)
{
	while (usart_data_register_is_empty(usart) == false);
	usart_put(usart, txdata);
	while (!usart_tx_is_complete(usart));
     808:	f9 e0       	ldi	r31, 0x09	; 9
     80a:	81 81       	ldd	r24, Z+1	; 0x01
 *
 * \param usart The USART module.
 */
static inline void usart_clear_tx_complete(USART_t * usart)
{
	(usart)->STATUS = USART_TXCIF_bm;
     80c:	86 ff       	sbrs	r24, 6
     80e:	fd cf       	rjmp	.-6      	; 0x80a <st7565r_init+0x310>
     810:	e0 ea       	ldi	r30, 0xA0	; 160
     812:	f9 e0       	ldi	r31, 0x09	; 9
 *
 * \return The received data
 */
static inline uint8_t usart_get(USART_t * usart)
{
	return (usart)->DATA;
     814:	80 e4       	ldi	r24, 0x40	; 64
	ioport_set_pin_low(ST7565R_A0_PIN);
	usart_spi_transmit(ST7565R_USART_SPI, command);
	usart_spi_deselect_device(ST7565R_USART_SPI, &device);
     816:	81 83       	std	Z+1, r24	; 0x01
     818:	80 81       	ld	r24, Z
     81a:	be 01       	movw	r22, r28
     81c:	6f 5f       	subi	r22, 0xFF	; 255
     81e:	7f 4f       	sbci	r23, 0xFF	; 255
     820:	80 ea       	ldi	r24, 0xA0	; 160
     822:	99 e0       	ldi	r25, 0x09	; 9
 * \param command the command to write
 */
static inline void st7565r_write_command(uint8_t command)
{
#if defined(ST7565R_USART_SPI_INTERFACE)
	struct usart_spi_device device = {.id = ST7565R_CS_PIN};
     824:	c4 d3       	rcall	.+1928   	; 0xfae <usart_spi_deselect_device>
     826:	8b e2       	ldi	r24, 0x2B	; 43
	usart_spi_select_device(ST7565R_USART_SPI, &device);
     828:	89 83       	std	Y+1, r24	; 0x01
     82a:	be 01       	movw	r22, r28
     82c:	6f 5f       	subi	r22, 0xFF	; 255
     82e:	7f 4f       	sbci	r23, 0xFF	; 255
     830:	80 ea       	ldi	r24, 0xA0	; 160
     832:	99 e0       	ldi	r25, 0x09	; 9
     834:	a6 d3       	rcall	.+1868   	; 0xf82 <usart_spi_select_device>
     836:	81 e0       	ldi	r24, 0x01	; 1
     838:	80 93 66 06 	sts	0x0666, r24	; 0x800666 <__TEXT_REGION_LENGTH__+0x7be666>
 *
 * \param usart The USART module.
 */
static inline bool usart_data_register_is_empty(USART_t * usart)
{
	return (usart)->STATUS & USART_DREIF_bm;
     83c:	e0 ea       	ldi	r30, 0xA0	; 160
     83e:	f9 e0       	ldi	r31, 0x09	; 9
 * \return The received data
 */
static inline uint8_t usart_spi_transmit(USART_t * usart,
		uint8_t txdata)
{
	while (usart_data_register_is_empty(usart) == false);
     840:	81 81       	ldd	r24, Z+1	; 0x01
     842:	85 ff       	sbrs	r24, 5
 * \param usart The USART module.
 * \param txdata The data to be transmitted.
 */
static inline void usart_put(USART_t * usart, uint8_t txdata)
{
	(usart)->DATA = txdata;
     844:	fd cf       	rjmp	.-6      	; 0x840 <st7565r_init+0x346>
     846:	8f ea       	ldi	r24, 0xAF	; 175
     848:	80 93 a0 09 	sts	0x09A0, r24	; 0x8009a0 <__TEXT_REGION_LENGTH__+0x7be9a0>
 *
 * \param usart The USART module.
 */
static inline bool usart_tx_is_complete(USART_t * usart)
{
	return (usart)->STATUS & USART_TXCIF_bm;
     84c:	e0 ea       	ldi	r30, 0xA0	; 160
     84e:	f9 e0       	ldi	r31, 0x09	; 9
static inline uint8_t usart_spi_transmit(USART_t * usart,
		uint8_t txdata)
{
	while (usart_data_register_is_empty(usart) == false);
	usart_put(usart, txdata);
	while (!usart_tx_is_complete(usart));
     850:	81 81       	ldd	r24, Z+1	; 0x01
     852:	86 ff       	sbrs	r24, 6
 *
 * \param usart The USART module.
 */
static inline void usart_clear_tx_complete(USART_t * usart)
{
	(usart)->STATUS = USART_TXCIF_bm;
     854:	fd cf       	rjmp	.-6      	; 0x850 <st7565r_init+0x356>
     856:	e0 ea       	ldi	r30, 0xA0	; 160
     858:	f9 e0       	ldi	r31, 0x09	; 9
     85a:	80 e4       	ldi	r24, 0x40	; 64
 *
 * \return The received data
 */
static inline uint8_t usart_get(USART_t * usart)
{
	return (usart)->DATA;
     85c:	81 83       	std	Z+1, r24	; 0x01
	ioport_set_pin_low(ST7565R_A0_PIN);
	usart_spi_transmit(ST7565R_USART_SPI, command);
	usart_spi_deselect_device(ST7565R_USART_SPI, &device);
     85e:	80 81       	ld	r24, Z
     860:	be 01       	movw	r22, r28
     862:	6f 5f       	subi	r22, 0xFF	; 255
     864:	7f 4f       	sbci	r23, 0xFF	; 255
     866:	80 ea       	ldi	r24, 0xA0	; 160
     868:	99 e0       	ldi	r25, 0x09	; 9
     86a:	a1 d3       	rcall	.+1858   	; 0xfae <usart_spi_deselect_device>
	is set to the defined min*/
	st7565r_set_contrast(ST7565R_DISPLAY_CONTRAST_MIN);

	// Turn on the display
	st7565r_display_on();
}
     86c:	0f 90       	pop	r0
     86e:	df 91       	pop	r29
     870:	cf 91       	pop	r28
     872:	1f 91       	pop	r17
     874:	0f 91       	pop	r16
     876:	ff 90       	pop	r15
     878:	ef 90       	pop	r14
     87a:	df 90       	pop	r13
     87c:	cf 90       	pop	r12
     87e:	bf 90       	pop	r11
     880:	08 95       	ret

00000882 <gfx_mono_st7565r_put_byte>:
	gfx_mono_st7565r_put_byte(0, 0, 0xFF);
\endcode
 */
void gfx_mono_st7565r_put_byte(gfx_coord_t page, gfx_coord_t column,
		uint8_t data)
{
     882:	ff 92       	push	r15
     884:	0f 93       	push	r16
     886:	1f 93       	push	r17
     888:	cf 93       	push	r28
     88a:	df 93       	push	r29
     88c:	1f 92       	push	r1
     88e:	cd b7       	in	r28, 0x3d	; 61
     890:	de b7       	in	r29, 0x3e	; 62
     892:	08 2f       	mov	r16, r24
     894:	f6 2e       	mov	r15, r22
     896:	14 2f       	mov	r17, r20
#ifdef CONFIG_ST7565R_FRAMEBUFFER
	gfx_mono_framebuffer_put_byte(page, column, data);
     898:	a5 d3       	rcall	.+1866   	; 0xfe4 <gfx_mono_framebuffer_put_byte>
 */
static inline void st7565r_set_page_address(uint8_t address)
{
	// Make sure that the address is 4 bits (only 8 pages)
	address &= 0x0F;
	st7565r_write_command(ST7565R_CMD_PAGE_ADDRESS_SET(address));
     89a:	0f 70       	andi	r16, 0x0F	; 15
     89c:	00 6b       	ori	r16, 0xB0	; 176
 * \param command the command to write
 */
static inline void st7565r_write_command(uint8_t command)
{
#if defined(ST7565R_USART_SPI_INTERFACE)
	struct usart_spi_device device = {.id = ST7565R_CS_PIN};
     89e:	8b e2       	ldi	r24, 0x2B	; 43
     8a0:	89 83       	std	Y+1, r24	; 0x01
	usart_spi_select_device(ST7565R_USART_SPI, &device);
     8a2:	be 01       	movw	r22, r28
     8a4:	6f 5f       	subi	r22, 0xFF	; 255
     8a6:	7f 4f       	sbci	r23, 0xFF	; 255
     8a8:	80 ea       	ldi	r24, 0xA0	; 160
     8aa:	99 e0       	ldi	r25, 0x09	; 9
     8ac:	6a d3       	rcall	.+1748   	; 0xf82 <usart_spi_select_device>
     8ae:	81 e0       	ldi	r24, 0x01	; 1
     8b0:	80 93 66 06 	sts	0x0666, r24	; 0x800666 <__TEXT_REGION_LENGTH__+0x7be666>
 *
 * \param usart The USART module.
 */
static inline bool usart_data_register_is_empty(USART_t * usart)
{
	return (usart)->STATUS & USART_DREIF_bm;
     8b4:	e0 ea       	ldi	r30, 0xA0	; 160
     8b6:	f9 e0       	ldi	r31, 0x09	; 9
     8b8:	91 81       	ldd	r25, Z+1	; 0x01
 * \return The received data
 */
static inline uint8_t usart_spi_transmit(USART_t * usart,
		uint8_t txdata)
{
	while (usart_data_register_is_empty(usart) == false);
     8ba:	95 ff       	sbrs	r25, 5
     8bc:	fd cf       	rjmp	.-6      	; 0x8b8 <gfx_mono_st7565r_put_byte+0x36>
 * \param usart The USART module.
 * \param txdata The data to be transmitted.
 */
static inline void usart_put(USART_t * usart, uint8_t txdata)
{
	(usart)->DATA = txdata;
     8be:	00 93 a0 09 	sts	0x09A0, r16	; 0x8009a0 <__TEXT_REGION_LENGTH__+0x7be9a0>
 *
 * \param usart The USART module.
 */
static inline bool usart_tx_is_complete(USART_t * usart)
{
	return (usart)->STATUS & USART_TXCIF_bm;
     8c2:	e0 ea       	ldi	r30, 0xA0	; 160
     8c4:	f9 e0       	ldi	r31, 0x09	; 9
     8c6:	81 81       	ldd	r24, Z+1	; 0x01
static inline uint8_t usart_spi_transmit(USART_t * usart,
		uint8_t txdata)
{
	while (usart_data_register_is_empty(usart) == false);
	usart_put(usart, txdata);
	while (!usart_tx_is_complete(usart));
     8c8:	86 ff       	sbrs	r24, 6
     8ca:	fd cf       	rjmp	.-6      	; 0x8c6 <gfx_mono_st7565r_put_byte+0x44>
 *
 * \param usart The USART module.
 */
static inline void usart_clear_tx_complete(USART_t * usart)
{
	(usart)->STATUS = USART_TXCIF_bm;
     8cc:	e0 ea       	ldi	r30, 0xA0	; 160
     8ce:	f9 e0       	ldi	r31, 0x09	; 9
     8d0:	80 e4       	ldi	r24, 0x40	; 64
     8d2:	81 83       	std	Z+1, r24	; 0x01
 *
 * \return The received data
 */
static inline uint8_t usart_get(USART_t * usart)
{
	return (usart)->DATA;
     8d4:	80 81       	ld	r24, Z
	ioport_set_pin_low(ST7565R_A0_PIN);
	usart_spi_transmit(ST7565R_USART_SPI, command);
	usart_spi_deselect_device(ST7565R_USART_SPI, &device);
     8d6:	be 01       	movw	r22, r28
     8d8:	6f 5f       	subi	r22, 0xFF	; 255
     8da:	7f 4f       	sbci	r23, 0xFF	; 255
     8dc:	80 ea       	ldi	r24, 0xA0	; 160
     8de:	99 e0       	ldi	r25, 0x09	; 9
     8e0:	66 d3       	rcall	.+1740   	; 0xfae <usart_spi_deselect_device>
 */
static inline void st7565r_set_column_address(uint8_t address)
{
	// Make sure the address is 7 bits
	address &= 0x7F;
	st7565r_write_command(ST7565R_CMD_COLUMN_ADDRESS_SET_MSB(address >> 4));
     8e2:	0f 2d       	mov	r16, r15
     8e4:	0f 77       	andi	r16, 0x7F	; 127
     8e6:	02 95       	swap	r16
     8e8:	0f 70       	andi	r16, 0x0F	; 15
     8ea:	00 61       	ori	r16, 0x10	; 16
 * \param command the command to write
 */
static inline void st7565r_write_command(uint8_t command)
{
#if defined(ST7565R_USART_SPI_INTERFACE)
	struct usart_spi_device device = {.id = ST7565R_CS_PIN};
     8ec:	8b e2       	ldi	r24, 0x2B	; 43
     8ee:	89 83       	std	Y+1, r24	; 0x01
	usart_spi_select_device(ST7565R_USART_SPI, &device);
     8f0:	be 01       	movw	r22, r28
     8f2:	6f 5f       	subi	r22, 0xFF	; 255
     8f4:	7f 4f       	sbci	r23, 0xFF	; 255
     8f6:	80 ea       	ldi	r24, 0xA0	; 160
     8f8:	99 e0       	ldi	r25, 0x09	; 9
     8fa:	43 d3       	rcall	.+1670   	; 0xf82 <usart_spi_select_device>
     8fc:	81 e0       	ldi	r24, 0x01	; 1
     8fe:	80 93 66 06 	sts	0x0666, r24	; 0x800666 <__TEXT_REGION_LENGTH__+0x7be666>
 *
 * \param usart The USART module.
 */
static inline bool usart_data_register_is_empty(USART_t * usart)
{
	return (usart)->STATUS & USART_DREIF_bm;
     902:	e0 ea       	ldi	r30, 0xA0	; 160
     904:	f9 e0       	ldi	r31, 0x09	; 9
     906:	81 81       	ldd	r24, Z+1	; 0x01
 * \return The received data
 */
static inline uint8_t usart_spi_transmit(USART_t * usart,
		uint8_t txdata)
{
	while (usart_data_register_is_empty(usart) == false);
     908:	85 ff       	sbrs	r24, 5
     90a:	fd cf       	rjmp	.-6      	; 0x906 <gfx_mono_st7565r_put_byte+0x84>
 * \param usart The USART module.
 * \param txdata The data to be transmitted.
 */
static inline void usart_put(USART_t * usart, uint8_t txdata)
{
	(usart)->DATA = txdata;
     90c:	00 93 a0 09 	sts	0x09A0, r16	; 0x8009a0 <__TEXT_REGION_LENGTH__+0x7be9a0>
 *
 * \param usart The USART module.
 */
static inline bool usart_tx_is_complete(USART_t * usart)
{
	return (usart)->STATUS & USART_TXCIF_bm;
     910:	e0 ea       	ldi	r30, 0xA0	; 160
     912:	f9 e0       	ldi	r31, 0x09	; 9
     914:	81 81       	ldd	r24, Z+1	; 0x01
static inline uint8_t usart_spi_transmit(USART_t * usart,
		uint8_t txdata)
{
	while (usart_data_register_is_empty(usart) == false);
	usart_put(usart, txdata);
	while (!usart_tx_is_complete(usart));
     916:	86 ff       	sbrs	r24, 6
     918:	fd cf       	rjmp	.-6      	; 0x914 <gfx_mono_st7565r_put_byte+0x92>
 *
 * \param usart The USART module.
 */
static inline void usart_clear_tx_complete(USART_t * usart)
{
	(usart)->STATUS = USART_TXCIF_bm;
     91a:	e0 ea       	ldi	r30, 0xA0	; 160
     91c:	f9 e0       	ldi	r31, 0x09	; 9
     91e:	80 e4       	ldi	r24, 0x40	; 64
     920:	81 83       	std	Z+1, r24	; 0x01
 *
 * \return The received data
 */
static inline uint8_t usart_get(USART_t * usart)
{
	return (usart)->DATA;
     922:	80 81       	ld	r24, Z
	ioport_set_pin_low(ST7565R_A0_PIN);
	usart_spi_transmit(ST7565R_USART_SPI, command);
	usart_spi_deselect_device(ST7565R_USART_SPI, &device);
     924:	be 01       	movw	r22, r28
     926:	6f 5f       	subi	r22, 0xFF	; 255
     928:	7f 4f       	sbci	r23, 0xFF	; 255
     92a:	80 ea       	ldi	r24, 0xA0	; 160
     92c:	99 e0       	ldi	r25, 0x09	; 9
     92e:	3f d3       	rcall	.+1662   	; 0xfae <usart_spi_deselect_device>
static inline void st7565r_set_column_address(uint8_t address)
{
	// Make sure the address is 7 bits
	address &= 0x7F;
	st7565r_write_command(ST7565R_CMD_COLUMN_ADDRESS_SET_MSB(address >> 4));
	st7565r_write_command(ST7565R_CMD_COLUMN_ADDRESS_SET_LSB(address & 0x0F));
     930:	0f 2d       	mov	r16, r15
     932:	0f 70       	andi	r16, 0x0F	; 15
 * \param command the command to write
 */
static inline void st7565r_write_command(uint8_t command)
{
#if defined(ST7565R_USART_SPI_INTERFACE)
	struct usart_spi_device device = {.id = ST7565R_CS_PIN};
     934:	8b e2       	ldi	r24, 0x2B	; 43
     936:	89 83       	std	Y+1, r24	; 0x01
	usart_spi_select_device(ST7565R_USART_SPI, &device);
     938:	be 01       	movw	r22, r28
     93a:	6f 5f       	subi	r22, 0xFF	; 255
     93c:	7f 4f       	sbci	r23, 0xFF	; 255
     93e:	80 ea       	ldi	r24, 0xA0	; 160
     940:	99 e0       	ldi	r25, 0x09	; 9
     942:	1f d3       	rcall	.+1598   	; 0xf82 <usart_spi_select_device>
     944:	81 e0       	ldi	r24, 0x01	; 1
     946:	80 93 66 06 	sts	0x0666, r24	; 0x800666 <__TEXT_REGION_LENGTH__+0x7be666>
 *
 * \param usart The USART module.
 */
static inline bool usart_data_register_is_empty(USART_t * usart)
{
	return (usart)->STATUS & USART_DREIF_bm;
     94a:	e0 ea       	ldi	r30, 0xA0	; 160
     94c:	f9 e0       	ldi	r31, 0x09	; 9
     94e:	81 81       	ldd	r24, Z+1	; 0x01
 * \return The received data
 */
static inline uint8_t usart_spi_transmit(USART_t * usart,
		uint8_t txdata)
{
	while (usart_data_register_is_empty(usart) == false);
     950:	85 ff       	sbrs	r24, 5
     952:	fd cf       	rjmp	.-6      	; 0x94e <gfx_mono_st7565r_put_byte+0xcc>
 * \param usart The USART module.
 * \param txdata The data to be transmitted.
 */
static inline void usart_put(USART_t * usart, uint8_t txdata)
{
	(usart)->DATA = txdata;
     954:	00 93 a0 09 	sts	0x09A0, r16	; 0x8009a0 <__TEXT_REGION_LENGTH__+0x7be9a0>
 *
 * \param usart The USART module.
 */
static inline bool usart_tx_is_complete(USART_t * usart)
{
	return (usart)->STATUS & USART_TXCIF_bm;
     958:	e0 ea       	ldi	r30, 0xA0	; 160
     95a:	f9 e0       	ldi	r31, 0x09	; 9
     95c:	81 81       	ldd	r24, Z+1	; 0x01
static inline uint8_t usart_spi_transmit(USART_t * usart,
		uint8_t txdata)
{
	while (usart_data_register_is_empty(usart) == false);
	usart_put(usart, txdata);
	while (!usart_tx_is_complete(usart));
     95e:	86 ff       	sbrs	r24, 6
     960:	fd cf       	rjmp	.-6      	; 0x95c <gfx_mono_st7565r_put_byte+0xda>
 *
 * \param usart The USART module.
 */
static inline void usart_clear_tx_complete(USART_t * usart)
{
	(usart)->STATUS = USART_TXCIF_bm;
     962:	e0 ea       	ldi	r30, 0xA0	; 160
     964:	f9 e0       	ldi	r31, 0x09	; 9
     966:	80 e4       	ldi	r24, 0x40	; 64
     968:	81 83       	std	Z+1, r24	; 0x01
	ioport_set_pin_low(ST7565R_A0_PIN);
	usart_spi_transmit(ST7565R_USART_SPI, command);
	usart_spi_deselect_device(ST7565R_USART_SPI, &device);
     96a:	80 81       	ld	r24, Z
     96c:	be 01       	movw	r22, r28
     96e:	6f 5f       	subi	r22, 0xFF	; 255
     970:	7f 4f       	sbci	r23, 0xFF	; 255
     972:	80 ea       	ldi	r24, 0xA0	; 160
     974:	99 e0       	ldi	r25, 0x09	; 9
     976:	1b d3       	rcall	.+1590   	; 0xfae <usart_spi_deselect_device>
 * \param data the data to write
 */
static inline void st7565r_write_data(uint8_t data)
{
#if defined(ST7565R_USART_SPI_INTERFACE)
	struct usart_spi_device device = {.id = ST7565R_CS_PIN};
     978:	8b e2       	ldi	r24, 0x2B	; 43
	usart_spi_select_device(ST7565R_USART_SPI, &device);
     97a:	89 83       	std	Y+1, r24	; 0x01
     97c:	be 01       	movw	r22, r28
     97e:	6f 5f       	subi	r22, 0xFF	; 255
     980:	7f 4f       	sbci	r23, 0xFF	; 255
     982:	80 ea       	ldi	r24, 0xA0	; 160
     984:	99 e0       	ldi	r25, 0x09	; 9
     986:	fd d2       	rcall	.+1530   	; 0xf82 <usart_spi_select_device>
		bool level)
{
	PORT_t *base = arch_ioport_pin_to_base(pin);

	if (level) {
		base->OUTSET = arch_ioport_pin_to_mask(pin);
     988:	81 e0       	ldi	r24, 0x01	; 1
     98a:	80 93 65 06 	sts	0x0665, r24	; 0x800665 <__TEXT_REGION_LENGTH__+0x7be665>
 *
 * \param usart The USART module.
 */
static inline bool usart_data_register_is_empty(USART_t * usart)
{
	return (usart)->STATUS & USART_DREIF_bm;
     98e:	e0 ea       	ldi	r30, 0xA0	; 160
     990:	f9 e0       	ldi	r31, 0x09	; 9
     992:	81 81       	ldd	r24, Z+1	; 0x01
 * \return The received data
 */
static inline uint8_t usart_spi_transmit(USART_t * usart,
		uint8_t txdata)
{
	while (usart_data_register_is_empty(usart) == false);
     994:	85 ff       	sbrs	r24, 5
     996:	fd cf       	rjmp	.-6      	; 0x992 <gfx_mono_st7565r_put_byte+0x110>
 * \param usart The USART module.
 * \param txdata The data to be transmitted.
 */
static inline void usart_put(USART_t * usart, uint8_t txdata)
{
	(usart)->DATA = txdata;
     998:	10 93 a0 09 	sts	0x09A0, r17	; 0x8009a0 <__TEXT_REGION_LENGTH__+0x7be9a0>
 *
 * \param usart The USART module.
 */
static inline bool usart_tx_is_complete(USART_t * usart)
{
	return (usart)->STATUS & USART_TXCIF_bm;
     99c:	e0 ea       	ldi	r30, 0xA0	; 160
     99e:	f9 e0       	ldi	r31, 0x09	; 9
     9a0:	81 81       	ldd	r24, Z+1	; 0x01
static inline uint8_t usart_spi_transmit(USART_t * usart,
		uint8_t txdata)
{
	while (usart_data_register_is_empty(usart) == false);
	usart_put(usart, txdata);
	while (!usart_tx_is_complete(usart));
     9a2:	86 ff       	sbrs	r24, 6
     9a4:	fd cf       	rjmp	.-6      	; 0x9a0 <gfx_mono_st7565r_put_byte+0x11e>
 *
 * \param usart The USART module.
 */
static inline void usart_clear_tx_complete(USART_t * usart)
{
	(usart)->STATUS = USART_TXCIF_bm;
     9a6:	e0 ea       	ldi	r30, 0xA0	; 160
     9a8:	f9 e0       	ldi	r31, 0x09	; 9
     9aa:	80 e4       	ldi	r24, 0x40	; 64
     9ac:	81 83       	std	Z+1, r24	; 0x01
 *
 * \return The received data
 */
static inline uint8_t usart_get(USART_t * usart)
{
	return (usart)->DATA;
     9ae:	80 81       	ld	r24, Z
	} else {
		base->OUTCLR = arch_ioport_pin_to_mask(pin);
     9b0:	81 e0       	ldi	r24, 0x01	; 1
     9b2:	80 93 66 06 	sts	0x0666, r24	; 0x800666 <__TEXT_REGION_LENGTH__+0x7be666>
	ioport_set_pin_high(ST7565R_A0_PIN);
	usart_spi_transmit(ST7565R_USART_SPI, data);
	ioport_set_pin_low(ST7565R_A0_PIN);
	usart_spi_deselect_device(ST7565R_USART_SPI, &device);
     9b6:	be 01       	movw	r22, r28
     9b8:	6f 5f       	subi	r22, 0xFF	; 255
     9ba:	7f 4f       	sbci	r23, 0xFF	; 255
     9bc:	80 ea       	ldi	r24, 0xA0	; 160
     9be:	99 e0       	ldi	r25, 0x09	; 9
     9c0:	f6 d2       	rcall	.+1516   	; 0xfae <usart_spi_deselect_device>

	st7565r_set_page_address(page);
	st7565r_set_column_address(column);

	st7565r_write_data(data);
}
     9c2:	0f 90       	pop	r0
     9c4:	df 91       	pop	r29
     9c6:	cf 91       	pop	r28
     9c8:	1f 91       	pop	r17
     9ca:	0f 91       	pop	r16
     9cc:	ff 90       	pop	r15
     9ce:	08 95       	ret

000009d0 <gfx_mono_st7565r_init>:
 * It will also write the graphic controller RAM to all zeroes.
 *
 * \note This function will clear the contents of the display.
 */
void gfx_mono_st7565r_init(void)
{
     9d0:	0f 93       	push	r16
     9d2:	1f 93       	push	r17
     9d4:	cf 93       	push	r28
     9d6:	df 93       	push	r29
     9d8:	1f 92       	push	r1
     9da:	cd b7       	in	r28, 0x3d	; 61
     9dc:	de b7       	in	r29, 0x3e	; 62
	uint8_t page;
	uint8_t column;

#ifdef CONFIG_ST7565R_FRAMEBUFFER
	gfx_mono_set_framebuffer(framebuffer);
     9de:	8c e4       	ldi	r24, 0x4C	; 76
     9e0:	90 e2       	ldi	r25, 0x20	; 32
     9e2:	fb d2       	rcall	.+1526   	; 0xfda <gfx_mono_set_framebuffer>
#endif

	/* Initialize the low-level display controller. */
	st7565r_init();
     9e4:	8a dd       	rcall	.-1260   	; 0x4fa <st7565r_init>
     9e6:	8b e2       	ldi	r24, 0x2B	; 43
 * \param command the command to write
 */
static inline void st7565r_write_command(uint8_t command)
{
#if defined(ST7565R_USART_SPI_INTERFACE)
	struct usart_spi_device device = {.id = ST7565R_CS_PIN};
     9e8:	89 83       	std	Y+1, r24	; 0x01
     9ea:	be 01       	movw	r22, r28
	usart_spi_select_device(ST7565R_USART_SPI, &device);
     9ec:	6f 5f       	subi	r22, 0xFF	; 255
     9ee:	7f 4f       	sbci	r23, 0xFF	; 255
     9f0:	80 ea       	ldi	r24, 0xA0	; 160
     9f2:	99 e0       	ldi	r25, 0x09	; 9
     9f4:	c6 d2       	rcall	.+1420   	; 0xf82 <usart_spi_select_device>
     9f6:	81 e0       	ldi	r24, 0x01	; 1
     9f8:	80 93 66 06 	sts	0x0666, r24	; 0x800666 <__TEXT_REGION_LENGTH__+0x7be666>
     9fc:	e0 ea       	ldi	r30, 0xA0	; 160
 *
 * \param usart The USART module.
 */
static inline bool usart_data_register_is_empty(USART_t * usart)
{
	return (usart)->STATUS & USART_DREIF_bm;
     9fe:	f9 e0       	ldi	r31, 0x09	; 9
     a00:	81 81       	ldd	r24, Z+1	; 0x01
     a02:	85 ff       	sbrs	r24, 5
 * \return The received data
 */
static inline uint8_t usart_spi_transmit(USART_t * usart,
		uint8_t txdata)
{
	while (usart_data_register_is_empty(usart) == false);
     a04:	fd cf       	rjmp	.-6      	; 0xa00 <gfx_mono_st7565r_init+0x30>
     a06:	80 e4       	ldi	r24, 0x40	; 64
 * \param usart The USART module.
 * \param txdata The data to be transmitted.
 */
static inline void usart_put(USART_t * usart, uint8_t txdata)
{
	(usart)->DATA = txdata;
     a08:	80 93 a0 09 	sts	0x09A0, r24	; 0x8009a0 <__TEXT_REGION_LENGTH__+0x7be9a0>
     a0c:	e0 ea       	ldi	r30, 0xA0	; 160
 *
 * \param usart The USART module.
 */
static inline bool usart_tx_is_complete(USART_t * usart)
{
	return (usart)->STATUS & USART_TXCIF_bm;
     a0e:	f9 e0       	ldi	r31, 0x09	; 9
     a10:	81 81       	ldd	r24, Z+1	; 0x01
     a12:	86 ff       	sbrs	r24, 6
static inline uint8_t usart_spi_transmit(USART_t * usart,
		uint8_t txdata)
{
	while (usart_data_register_is_empty(usart) == false);
	usart_put(usart, txdata);
	while (!usart_tx_is_complete(usart));
     a14:	fd cf       	rjmp	.-6      	; 0xa10 <gfx_mono_st7565r_init+0x40>
     a16:	e0 ea       	ldi	r30, 0xA0	; 160
 *
 * \param usart The USART module.
 */
static inline void usart_clear_tx_complete(USART_t * usart)
{
	(usart)->STATUS = USART_TXCIF_bm;
     a18:	f9 e0       	ldi	r31, 0x09	; 9
     a1a:	80 e4       	ldi	r24, 0x40	; 64
     a1c:	81 83       	std	Z+1, r24	; 0x01
     a1e:	80 81       	ld	r24, Z
 *
 * \return The received data
 */
static inline uint8_t usart_get(USART_t * usart)
{
	return (usart)->DATA;
     a20:	be 01       	movw	r22, r28
	ioport_set_pin_low(ST7565R_A0_PIN);
	usart_spi_transmit(ST7565R_USART_SPI, command);
	usart_spi_deselect_device(ST7565R_USART_SPI, &device);
     a22:	6f 5f       	subi	r22, 0xFF	; 255
     a24:	7f 4f       	sbci	r23, 0xFF	; 255
     a26:	80 ea       	ldi	r24, 0xA0	; 160
     a28:	99 e0       	ldi	r25, 0x09	; 9
     a2a:	c1 d2       	rcall	.+1410   	; 0xfae <usart_spi_deselect_device>
     a2c:	00 e0       	ldi	r16, 0x00	; 0

	/* Clear the contents of the display.
	 * If using a framebuffer (SPI interface) it will both clear the
	 * controller memory and the framebuffer.
	 */
	for (page = 0; page < GFX_MONO_LCD_PAGES; page++) {
     a2e:	0a c0       	rjmp	.+20     	; 0xa44 <gfx_mono_st7565r_init+0x74>
		for (column = 0; column < GFX_MONO_LCD_WIDTH; column++) {
			gfx_mono_put_byte(page, column, 0x00);
     a30:	40 e0       	ldi	r20, 0x00	; 0
     a32:	61 2f       	mov	r22, r17
     a34:	80 2f       	mov	r24, r16
     a36:	25 df       	rcall	.-438    	; 0x882 <gfx_mono_st7565r_put_byte>
     a38:	1f 5f       	subi	r17, 0xFF	; 255
	/* Clear the contents of the display.
	 * If using a framebuffer (SPI interface) it will both clear the
	 * controller memory and the framebuffer.
	 */
	for (page = 0; page < GFX_MONO_LCD_PAGES; page++) {
		for (column = 0; column < GFX_MONO_LCD_WIDTH; column++) {
     a3a:	10 38       	cpi	r17, 0x80	; 128
     a3c:	c9 f7       	brne	.-14     	; 0xa30 <gfx_mono_st7565r_init+0x60>
     a3e:	0f 5f       	subi	r16, 0xFF	; 255

	/* Clear the contents of the display.
	 * If using a framebuffer (SPI interface) it will both clear the
	 * controller memory and the framebuffer.
	 */
	for (page = 0; page < GFX_MONO_LCD_PAGES; page++) {
     a40:	04 30       	cpi	r16, 0x04	; 4
     a42:	11 f0       	breq	.+4      	; 0xa48 <gfx_mono_st7565r_init+0x78>
     a44:	10 e0       	ldi	r17, 0x00	; 0
 * It will also write the graphic controller RAM to all zeroes.
 *
 * \note This function will clear the contents of the display.
 */
void gfx_mono_st7565r_init(void)
{
     a46:	f4 cf       	rjmp	.-24     	; 0xa30 <gfx_mono_st7565r_init+0x60>
     a48:	0f 90       	pop	r0
	for (page = 0; page < GFX_MONO_LCD_PAGES; page++) {
		for (column = 0; column < GFX_MONO_LCD_WIDTH; column++) {
			gfx_mono_put_byte(page, column, 0x00);
		}
	}
}
     a4a:	df 91       	pop	r29
     a4c:	cf 91       	pop	r28
     a4e:	1f 91       	pop	r17
     a50:	0f 91       	pop	r16
     a52:	08 95       	ret

00000a54 <gfx_mono_st7565r_draw_pixel>:
     a54:	ff 92       	push	r15
	gfx_mono_st7565r_draw_pixel(10, 10, GFX_PIXEL_XOR);
\endcode
 */
void gfx_mono_st7565r_draw_pixel(gfx_coord_t x, gfx_coord_t y,
		gfx_coord_t color)
{
     a56:	0f 93       	push	r16
     a58:	1f 93       	push	r17
     a5a:	cf 93       	push	r28
     a5c:	df 93       	push	r29
	uint8_t page;
	uint8_t pixel_mask;
	uint8_t pixel_value;

	/* Discard pixels drawn outside the screen */
	if ((x > GFX_MONO_LCD_WIDTH - 1) || (y > GFX_MONO_LCD_HEIGHT - 1)) {
     a5e:	88 23       	and	r24, r24
     a60:	4c f1       	brlt	.+82     	; 0xab4 <gfx_mono_st7565r_draw_pixel+0x60>
     a62:	60 32       	cpi	r22, 0x20	; 32
     a64:	38 f5       	brcc	.+78     	; 0xab4 <gfx_mono_st7565r_draw_pixel+0x60>
     a66:	d4 2f       	mov	r29, r20
     a68:	c8 2f       	mov	r28, r24
		return;
	}

	page = y / GFX_MONO_LCD_PIXELS_PER_BYTE;
     a6a:	f6 2e       	mov	r15, r22
     a6c:	f6 94       	lsr	r15
     a6e:	f6 94       	lsr	r15
     a70:	f6 94       	lsr	r15
	pixel_mask = (1 << (y - (page * 8)));
     a72:	70 e0       	ldi	r23, 0x00	; 0
     a74:	88 e0       	ldi	r24, 0x08	; 8
     a76:	f8 9e       	mul	r15, r24
     a78:	60 19       	sub	r22, r0
     a7a:	71 09       	sbc	r23, r1
     a7c:	11 24       	eor	r1, r1
     a7e:	81 e0       	ldi	r24, 0x01	; 1
     a80:	90 e0       	ldi	r25, 0x00	; 0
     a82:	8c 01       	movw	r16, r24
     a84:	02 c0       	rjmp	.+4      	; 0xa8a <gfx_mono_st7565r_draw_pixel+0x36>
     a86:	00 0f       	add	r16, r16
     a88:	11 1f       	adc	r17, r17
     a8a:	6a 95       	dec	r22
     a8c:	e2 f7       	brpl	.-8      	; 0xa86 <gfx_mono_st7565r_draw_pixel+0x32>
\endcode
 */
uint8_t gfx_mono_st7565r_get_byte(gfx_coord_t page, gfx_coord_t column)
{
#ifdef CONFIG_ST7565R_FRAMEBUFFER
	return gfx_mono_framebuffer_get_byte(page, column);
     a8e:	6c 2f       	mov	r22, r28
     a90:	8f 2d       	mov	r24, r15
     a92:	b6 d2       	rcall	.+1388   	; 0x1000 <gfx_mono_framebuffer_get_byte>
	 * requested action on this pixel before writing the page back to the
	 * display.
	 */
	pixel_value = gfx_mono_get_byte(page, x);

	switch (color) {
     a94:	d1 30       	cpi	r29, 0x01	; 1
     a96:	21 f0       	breq	.+8      	; 0xaa0 <gfx_mono_st7565r_draw_pixel+0x4c>
     a98:	28 f0       	brcs	.+10     	; 0xaa4 <gfx_mono_st7565r_draw_pixel+0x50>
     a9a:	d2 30       	cpi	r29, 0x02	; 2
     a9c:	31 f0       	breq	.+12     	; 0xaaa <gfx_mono_st7565r_draw_pixel+0x56>
     a9e:	06 c0       	rjmp	.+12     	; 0xaac <gfx_mono_st7565r_draw_pixel+0x58>
	case GFX_PIXEL_SET:
		pixel_value |= pixel_mask;
     aa0:	80 2b       	or	r24, r16
		break;
     aa2:	04 c0       	rjmp	.+8      	; 0xaac <gfx_mono_st7565r_draw_pixel+0x58>

	case GFX_PIXEL_CLR:
		pixel_value &= ~pixel_mask;
     aa4:	00 95       	com	r16
     aa6:	80 23       	and	r24, r16
		break;
     aa8:	01 c0       	rjmp	.+2      	; 0xaac <gfx_mono_st7565r_draw_pixel+0x58>

	case GFX_PIXEL_XOR:
		pixel_value ^= pixel_mask;
     aaa:	80 27       	eor	r24, r16

	default:
		break;
	}

	gfx_mono_put_byte(page, x, pixel_value);
     aac:	48 2f       	mov	r20, r24
     aae:	6c 2f       	mov	r22, r28
     ab0:	8f 2d       	mov	r24, r15
     ab2:	e7 de       	rcall	.-562    	; 0x882 <gfx_mono_st7565r_put_byte>
}
     ab4:	df 91       	pop	r29
     ab6:	cf 91       	pop	r28
     ab8:	1f 91       	pop	r17
     aba:	0f 91       	pop	r16
     abc:	ff 90       	pop	r15
     abe:	08 95       	ret

00000ac0 <gfx_mono_st7565r_get_byte>:
\endcode
 */
uint8_t gfx_mono_st7565r_get_byte(gfx_coord_t page, gfx_coord_t column)
{
#ifdef CONFIG_ST7565R_FRAMEBUFFER
	return gfx_mono_framebuffer_get_byte(page, column);
     ac0:	9f c2       	rjmp	.+1342   	; 0x1000 <gfx_mono_framebuffer_get_byte>
	st7565r_set_column_address(column);

	return st7565r_read_data();

#endif
}
     ac2:	08 95       	ret

00000ac4 <usart_spi_set_baudrate>:
 * \param usart The USART(SPI) module.
 * \param baud The baudrate.
 * \param cpu_hz The CPU frequency.
 */
void usart_spi_set_baudrate(USART_t *usart, uint32_t baud, uint32_t cpu_hz)
{
     ac4:	cf 92       	push	r12
     ac6:	df 92       	push	r13
     ac8:	ef 92       	push	r14
     aca:	ff 92       	push	r15
     acc:	0f 93       	push	r16
     ace:	1f 93       	push	r17
     ad0:	cf 93       	push	r28
     ad2:	df 93       	push	r29
     ad4:	ec 01       	movw	r28, r24
	uint16_t bsel_value;

	/* Check if baudrate is less than the maximim limit specified in
	 * datasheet */
	if (baud < (cpu_hz / 2)) {
     ad6:	d9 01       	movw	r26, r18
     ad8:	c8 01       	movw	r24, r16
     ada:	b6 95       	lsr	r27
     adc:	a7 95       	ror	r26
     ade:	97 95       	ror	r25
     ae0:	87 95       	ror	r24
     ae2:	48 17       	cp	r20, r24
     ae4:	59 07       	cpc	r21, r25
     ae6:	6a 07       	cpc	r22, r26
     ae8:	7b 07       	cpc	r23, r27
     aea:	78 f4       	brcc	.+30     	; 0xb0a <usart_spi_set_baudrate+0x46>
		bsel_value = (cpu_hz / (baud * 2)) - 1;
     aec:	6a 01       	movw	r12, r20
     aee:	7b 01       	movw	r14, r22
     af0:	cc 0c       	add	r12, r12
     af2:	dd 1c       	adc	r13, r13
     af4:	ee 1c       	adc	r14, r14
     af6:	ff 1c       	adc	r15, r15
     af8:	c9 01       	movw	r24, r18
     afa:	b8 01       	movw	r22, r16
     afc:	a7 01       	movw	r20, r14
     afe:	96 01       	movw	r18, r12
     b00:	0e 94 c1 17 	call	0x2f82	; 0x2f82 <__udivmodsi4>
     b04:	21 50       	subi	r18, 0x01	; 1
     b06:	31 09       	sbc	r19, r1
     b08:	02 c0       	rjmp	.+4      	; 0xb0e <usart_spi_set_baudrate+0x4a>
	} else {
		/* If baudrate is not within the specfication in datasheet,
		 * assign maximum baudrate possible for the current CPU frequency */
		bsel_value = 0;
     b0a:	20 e0       	ldi	r18, 0x00	; 0
     b0c:	30 e0       	ldi	r19, 0x00	; 0
	}

	(usart)->BAUDCTRLB = (uint8_t)((~USART_BSCALE_gm) & (bsel_value >> 8));
     b0e:	83 2f       	mov	r24, r19
     b10:	8f 70       	andi	r24, 0x0F	; 15
     b12:	8f 83       	std	Y+7, r24	; 0x07
	(usart)->BAUDCTRLA = (uint8_t)(bsel_value);
     b14:	2e 83       	std	Y+6, r18	; 0x06
}
     b16:	df 91       	pop	r29
     b18:	cf 91       	pop	r28
     b1a:	1f 91       	pop	r17
     b1c:	0f 91       	pop	r16
     b1e:	ff 90       	pop	r15
     b20:	ef 90       	pop	r14
     b22:	df 90       	pop	r13
     b24:	cf 90       	pop	r12
     b26:	08 95       	ret

00000b28 <usart_init_spi>:
 *
 * \param usart The USART module.
 * \param opt The RS232 configuration option.
 */
void usart_init_spi(USART_t *usart, const usart_spi_options_t *opt)
{
     b28:	df 92       	push	r13
     b2a:	ef 92       	push	r14
     b2c:	ff 92       	push	r15
     b2e:	0f 93       	push	r16
     b30:	1f 93       	push	r17
     b32:	cf 93       	push	r28
     b34:	df 93       	push	r29
     b36:	1f 92       	push	r1
     b38:	cd b7       	in	r28, 0x3d	; 61
     b3a:	de b7       	in	r29, 0x3e	; 62
     b3c:	7c 01       	movw	r14, r24
     b3e:	8b 01       	movw	r16, r22
 *
 * \param module Pointer to the module's base address.
 */
static inline void sysclk_enable_peripheral_clock(const volatile void *module)
{
	if (module == NULL) {
     b40:	00 97       	sbiw	r24, 0x00	; 0
     b42:	09 f4       	brne	.+2      	; 0xb46 <usart_init_spi+0x1e>
     b44:	b2 c1       	rjmp	.+868    	; 0xeaa <usart_init_spi+0x382>
		Assert(false);
	}
#ifdef AES
	else if (module == &AES) {
     b46:	80 3c       	cpi	r24, 0xC0	; 192
     b48:	91 05       	cpc	r25, r1
     b4a:	21 f4       	brne	.+8      	; 0xb54 <usart_init_spi+0x2c>
		sysclk_enable_module(SYSCLK_PORT_GEN, SYSCLK_AES);
     b4c:	60 e1       	ldi	r22, 0x10	; 16
     b4e:	80 e0       	ldi	r24, 0x00	; 0
     b50:	e1 d2       	rcall	.+1474   	; 0x1114 <sysclk_enable_module>
     b52:	ab c1       	rjmp	.+854    	; 0xeaa <usart_init_spi+0x382>
	else if (module == &RTC) {
		sysclk_enable_module(SYSCLK_PORT_GEN, SYSCLK_RTC);
	}
#endif
#ifdef EVSYS
	else if (module == &EVSYS) {
     b54:	80 e8       	ldi	r24, 0x80	; 128
     b56:	e8 16       	cp	r14, r24
     b58:	81 e0       	ldi	r24, 0x01	; 1
     b5a:	f8 06       	cpc	r15, r24
     b5c:	21 f4       	brne	.+8      	; 0xb66 <usart_init_spi+0x3e>
		sysclk_enable_module(SYSCLK_PORT_GEN, SYSCLK_EVSYS);
     b5e:	62 e0       	ldi	r22, 0x02	; 2
     b60:	80 e0       	ldi	r24, 0x00	; 0
     b62:	d8 d2       	rcall	.+1456   	; 0x1114 <sysclk_enable_module>
     b64:	a2 c1       	rjmp	.+836    	; 0xeaa <usart_init_spi+0x382>
	}
#endif
#ifdef DMA
	else if (module == &DMA) {
     b66:	e1 14       	cp	r14, r1
     b68:	e1 e0       	ldi	r30, 0x01	; 1
     b6a:	fe 06       	cpc	r15, r30
     b6c:	21 f4       	brne	.+8      	; 0xb76 <usart_init_spi+0x4e>
		sysclk_enable_module(SYSCLK_PORT_GEN, SYSCLK_DMA);
     b6e:	61 e0       	ldi	r22, 0x01	; 1
     b70:	80 e0       	ldi	r24, 0x00	; 0
     b72:	d0 d2       	rcall	.+1440   	; 0x1114 <sysclk_enable_module>
     b74:	9a c1       	rjmp	.+820    	; 0xeaa <usart_init_spi+0x382>
	else if (module == &EDMA) {
		sysclk_enable_module(SYSCLK_PORT_GEN, SYSCLK_EDMA);
	}
#endif
#ifdef ACA
	else if (module == &ACA) {
     b76:	f0 e8       	ldi	r31, 0x80	; 128
     b78:	ef 16       	cp	r14, r31
     b7a:	f3 e0       	ldi	r31, 0x03	; 3
     b7c:	ff 06       	cpc	r15, r31
		sysclk_enable_module(SYSCLK_PORT_A, SYSCLK_AC);
     b7e:	21 f4       	brne	.+8      	; 0xb88 <usart_init_spi+0x60>
     b80:	61 e0       	ldi	r22, 0x01	; 1
     b82:	81 e0       	ldi	r24, 0x01	; 1
     b84:	c7 d2       	rcall	.+1422   	; 0x1114 <sysclk_enable_module>
     b86:	91 c1       	rjmp	.+802    	; 0xeaa <usart_init_spi+0x382>
	}
#endif
#ifdef ACB
	else if (module == &ACB) {
     b88:	30 e9       	ldi	r19, 0x90	; 144
     b8a:	e3 16       	cp	r14, r19
     b8c:	33 e0       	ldi	r19, 0x03	; 3
     b8e:	f3 06       	cpc	r15, r19
		sysclk_enable_module(SYSCLK_PORT_B, SYSCLK_AC);
     b90:	21 f4       	brne	.+8      	; 0xb9a <usart_init_spi+0x72>
     b92:	61 e0       	ldi	r22, 0x01	; 1
     b94:	82 e0       	ldi	r24, 0x02	; 2
     b96:	be d2       	rcall	.+1404   	; 0x1114 <sysclk_enable_module>
     b98:	88 c1       	rjmp	.+784    	; 0xeaa <usart_init_spi+0x382>
	}
#endif
#ifdef ADCA
	else if (module == &ADCA) {
     b9a:	e1 14       	cp	r14, r1
     b9c:	82 e0       	ldi	r24, 0x02	; 2
     b9e:	f8 06       	cpc	r15, r24
		sysclk_enable_module(SYSCLK_PORT_A, SYSCLK_ADC);
     ba0:	21 f4       	brne	.+8      	; 0xbaa <usart_init_spi+0x82>
     ba2:	62 e0       	ldi	r22, 0x02	; 2
     ba4:	81 e0       	ldi	r24, 0x01	; 1
     ba6:	b6 d2       	rcall	.+1388   	; 0x1114 <sysclk_enable_module>
     ba8:	80 c1       	rjmp	.+768    	; 0xeaa <usart_init_spi+0x382>
	}
#endif
#ifdef ADCB
	else if (module == &ADCB) {
     baa:	e0 e4       	ldi	r30, 0x40	; 64
     bac:	ee 16       	cp	r14, r30
     bae:	e2 e0       	ldi	r30, 0x02	; 2
     bb0:	fe 06       	cpc	r15, r30
		sysclk_enable_module(SYSCLK_PORT_B, SYSCLK_ADC);
     bb2:	21 f4       	brne	.+8      	; 0xbbc <usart_init_spi+0x94>
     bb4:	62 e0       	ldi	r22, 0x02	; 2
     bb6:	82 e0       	ldi	r24, 0x02	; 2
     bb8:	ad d2       	rcall	.+1370   	; 0x1114 <sysclk_enable_module>
     bba:	77 c1       	rjmp	.+750    	; 0xeaa <usart_init_spi+0x382>
	}
#endif
// Workaround for bad XMEGA D header file
#if !XMEGA_D
#ifdef DACB
	else if (module == &DACB) {
     bbc:	f0 e2       	ldi	r31, 0x20	; 32
     bbe:	ef 16       	cp	r14, r31
     bc0:	f3 e0       	ldi	r31, 0x03	; 3
     bc2:	ff 06       	cpc	r15, r31
		sysclk_enable_module(SYSCLK_PORT_B, SYSCLK_DAC);
     bc4:	21 f4       	brne	.+8      	; 0xbce <usart_init_spi+0xa6>
     bc6:	64 e0       	ldi	r22, 0x04	; 4
     bc8:	82 e0       	ldi	r24, 0x02	; 2
     bca:	a4 d2       	rcall	.+1352   	; 0x1114 <sysclk_enable_module>
	}
#endif
#endif // Workaround end
#ifdef TCC0
	else if (module == &TCC0) {
     bcc:	6e c1       	rjmp	.+732    	; 0xeaa <usart_init_spi+0x382>
     bce:	e1 14       	cp	r14, r1
     bd0:	38 e0       	ldi	r19, 0x08	; 8
     bd2:	f3 06       	cpc	r15, r19
		sysclk_enable_module(SYSCLK_PORT_C, SYSCLK_TC0);
     bd4:	21 f4       	brne	.+8      	; 0xbde <usart_init_spi+0xb6>
     bd6:	61 e0       	ldi	r22, 0x01	; 1
     bd8:	83 e0       	ldi	r24, 0x03	; 3
     bda:	9c d2       	rcall	.+1336   	; 0x1114 <sysclk_enable_module>
	}
#endif
#ifdef TCD0
	else if (module == &TCD0) {
     bdc:	66 c1       	rjmp	.+716    	; 0xeaa <usart_init_spi+0x382>
     bde:	e1 14       	cp	r14, r1
     be0:	89 e0       	ldi	r24, 0x09	; 9
     be2:	f8 06       	cpc	r15, r24
		sysclk_enable_module(SYSCLK_PORT_D, SYSCLK_TC0);
     be4:	21 f4       	brne	.+8      	; 0xbee <usart_init_spi+0xc6>
     be6:	61 e0       	ldi	r22, 0x01	; 1
     be8:	84 e0       	ldi	r24, 0x04	; 4
     bea:	94 d2       	rcall	.+1320   	; 0x1114 <sysclk_enable_module>
	}
#endif
#ifdef TCE0
	else if (module == &TCE0) {
     bec:	5e c1       	rjmp	.+700    	; 0xeaa <usart_init_spi+0x382>
     bee:	e1 14       	cp	r14, r1
     bf0:	ea e0       	ldi	r30, 0x0A	; 10
     bf2:	fe 06       	cpc	r15, r30
		sysclk_enable_module(SYSCLK_PORT_E, SYSCLK_TC0);
     bf4:	21 f4       	brne	.+8      	; 0xbfe <usart_init_spi+0xd6>
     bf6:	61 e0       	ldi	r22, 0x01	; 1
     bf8:	85 e0       	ldi	r24, 0x05	; 5
     bfa:	8c d2       	rcall	.+1304   	; 0x1114 <sysclk_enable_module>
	}
#endif
#ifdef TCF0
	else if (module == &TCF0) {
     bfc:	56 c1       	rjmp	.+684    	; 0xeaa <usart_init_spi+0x382>
     bfe:	e1 14       	cp	r14, r1
     c00:	fb e0       	ldi	r31, 0x0B	; 11
     c02:	ff 06       	cpc	r15, r31
		sysclk_enable_module(SYSCLK_PORT_F, SYSCLK_TC0);
     c04:	21 f4       	brne	.+8      	; 0xc0e <usart_init_spi+0xe6>
     c06:	61 e0       	ldi	r22, 0x01	; 1
     c08:	86 e0       	ldi	r24, 0x06	; 6
     c0a:	84 d2       	rcall	.+1288   	; 0x1114 <sysclk_enable_module>
	}
#endif
#ifdef TCC1
	else if (module == &TCC1) {
     c0c:	4e c1       	rjmp	.+668    	; 0xeaa <usart_init_spi+0x382>
     c0e:	30 e4       	ldi	r19, 0x40	; 64
     c10:	e3 16       	cp	r14, r19
     c12:	38 e0       	ldi	r19, 0x08	; 8
		sysclk_enable_module(SYSCLK_PORT_C, SYSCLK_TC1);
     c14:	f3 06       	cpc	r15, r19
     c16:	21 f4       	brne	.+8      	; 0xc20 <usart_init_spi+0xf8>
     c18:	62 e0       	ldi	r22, 0x02	; 2
     c1a:	83 e0       	ldi	r24, 0x03	; 3
     c1c:	7b d2       	rcall	.+1270   	; 0x1114 <sysclk_enable_module>
	}
#endif
#ifdef TCD1
	else if (module == &TCD1) {
     c1e:	45 c1       	rjmp	.+650    	; 0xeaa <usart_init_spi+0x382>
     c20:	80 e4       	ldi	r24, 0x40	; 64
     c22:	e8 16       	cp	r14, r24
     c24:	89 e0       	ldi	r24, 0x09	; 9
		sysclk_enable_module(SYSCLK_PORT_D, SYSCLK_TC1);
     c26:	f8 06       	cpc	r15, r24
     c28:	21 f4       	brne	.+8      	; 0xc32 <usart_init_spi+0x10a>
     c2a:	62 e0       	ldi	r22, 0x02	; 2
     c2c:	84 e0       	ldi	r24, 0x04	; 4
     c2e:	72 d2       	rcall	.+1252   	; 0x1114 <sysclk_enable_module>
	}
#endif
#ifdef TCE1
	else if (module == &TCE1) {
     c30:	3c c1       	rjmp	.+632    	; 0xeaa <usart_init_spi+0x382>
     c32:	e0 e4       	ldi	r30, 0x40	; 64
     c34:	ee 16       	cp	r14, r30
     c36:	ea e0       	ldi	r30, 0x0A	; 10
		sysclk_enable_module(SYSCLK_PORT_E, SYSCLK_TC1);
     c38:	fe 06       	cpc	r15, r30
     c3a:	21 f4       	brne	.+8      	; 0xc44 <usart_init_spi+0x11c>
     c3c:	62 e0       	ldi	r22, 0x02	; 2
     c3e:	85 e0       	ldi	r24, 0x05	; 5
     c40:	69 d2       	rcall	.+1234   	; 0x1114 <sysclk_enable_module>
	else if (module == &TCD5) {
		sysclk_enable_module(SYSCLK_PORT_D, SYSCLK_TC5);
	}
#endif
#ifdef HIRESC
	else if (module == &HIRESC) {
     c42:	33 c1       	rjmp	.+614    	; 0xeaa <usart_init_spi+0x382>
     c44:	f0 e9       	ldi	r31, 0x90	; 144
     c46:	ef 16       	cp	r14, r31
     c48:	f8 e0       	ldi	r31, 0x08	; 8
			sysclk_enable_module(SYSCLK_PORT_C, SYSCLK_HIRES);
     c4a:	ff 06       	cpc	r15, r31
     c4c:	21 f4       	brne	.+8      	; 0xc56 <usart_init_spi+0x12e>
     c4e:	64 e0       	ldi	r22, 0x04	; 4
     c50:	83 e0       	ldi	r24, 0x03	; 3
     c52:	60 d2       	rcall	.+1216   	; 0x1114 <sysclk_enable_module>
	}
#endif
#ifdef HIRESD
	else if (module == &HIRESD) {
     c54:	2a c1       	rjmp	.+596    	; 0xeaa <usart_init_spi+0x382>
     c56:	30 e9       	ldi	r19, 0x90	; 144
     c58:	e3 16       	cp	r14, r19
     c5a:	39 e0       	ldi	r19, 0x09	; 9
		sysclk_enable_module(SYSCLK_PORT_D, SYSCLK_HIRES);
     c5c:	f3 06       	cpc	r15, r19
     c5e:	21 f4       	brne	.+8      	; 0xc68 <usart_init_spi+0x140>
     c60:	64 e0       	ldi	r22, 0x04	; 4
     c62:	84 e0       	ldi	r24, 0x04	; 4
	}
#endif
#ifdef HIRESE
	else if (module == &HIRESE) {
     c64:	57 d2       	rcall	.+1198   	; 0x1114 <sysclk_enable_module>
     c66:	21 c1       	rjmp	.+578    	; 0xeaa <usart_init_spi+0x382>
     c68:	80 e9       	ldi	r24, 0x90	; 144
     c6a:	e8 16       	cp	r14, r24
     c6c:	8a e0       	ldi	r24, 0x0A	; 10
		sysclk_enable_module(SYSCLK_PORT_E, SYSCLK_HIRES);
     c6e:	f8 06       	cpc	r15, r24
     c70:	21 f4       	brne	.+8      	; 0xc7a <usart_init_spi+0x152>
     c72:	64 e0       	ldi	r22, 0x04	; 4
     c74:	85 e0       	ldi	r24, 0x05	; 5
	}
#endif
#ifdef HIRESF
	else if (module == &HIRESF) {
     c76:	4e d2       	rcall	.+1180   	; 0x1114 <sysclk_enable_module>
     c78:	18 c1       	rjmp	.+560    	; 0xeaa <usart_init_spi+0x382>
     c7a:	e0 e9       	ldi	r30, 0x90	; 144
     c7c:	ee 16       	cp	r14, r30
     c7e:	eb e0       	ldi	r30, 0x0B	; 11
		sysclk_enable_module(SYSCLK_PORT_F, SYSCLK_HIRES);
     c80:	fe 06       	cpc	r15, r30
     c82:	21 f4       	brne	.+8      	; 0xc8c <usart_init_spi+0x164>
     c84:	64 e0       	ldi	r22, 0x04	; 4
     c86:	86 e0       	ldi	r24, 0x06	; 6
	}
#endif
#ifdef SPIC
	else if (module == &SPIC) {
     c88:	45 d2       	rcall	.+1162   	; 0x1114 <sysclk_enable_module>
     c8a:	0f c1       	rjmp	.+542    	; 0xeaa <usart_init_spi+0x382>
     c8c:	f0 ec       	ldi	r31, 0xC0	; 192
     c8e:	ef 16       	cp	r14, r31
     c90:	f8 e0       	ldi	r31, 0x08	; 8
		sysclk_enable_module(SYSCLK_PORT_C, SYSCLK_SPI);
     c92:	ff 06       	cpc	r15, r31
     c94:	21 f4       	brne	.+8      	; 0xc9e <usart_init_spi+0x176>
     c96:	68 e0       	ldi	r22, 0x08	; 8
     c98:	83 e0       	ldi	r24, 0x03	; 3
	}
#endif
#ifdef SPID
	else if (module == &SPID) {
     c9a:	3c d2       	rcall	.+1144   	; 0x1114 <sysclk_enable_module>
     c9c:	06 c1       	rjmp	.+524    	; 0xeaa <usart_init_spi+0x382>
     c9e:	30 ec       	ldi	r19, 0xC0	; 192
     ca0:	e3 16       	cp	r14, r19
     ca2:	39 e0       	ldi	r19, 0x09	; 9
		sysclk_enable_module(SYSCLK_PORT_D, SYSCLK_SPI);
     ca4:	f3 06       	cpc	r15, r19
     ca6:	21 f4       	brne	.+8      	; 0xcb0 <usart_init_spi+0x188>
     ca8:	68 e0       	ldi	r22, 0x08	; 8
     caa:	84 e0       	ldi	r24, 0x04	; 4
     cac:	33 d2       	rcall	.+1126   	; 0x1114 <sysclk_enable_module>
	else if (module == &SPIF) {
		sysclk_enable_module(SYSCLK_PORT_F, SYSCLK_SPI);
	}
#endif
#ifdef USARTC0
	else if (module == &USARTC0) {
     cae:	fd c0       	rjmp	.+506    	; 0xeaa <usart_init_spi+0x382>
     cb0:	80 ea       	ldi	r24, 0xA0	; 160
     cb2:	e8 16       	cp	r14, r24
     cb4:	88 e0       	ldi	r24, 0x08	; 8
		sysclk_enable_module(SYSCLK_PORT_C, SYSCLK_USART0);
     cb6:	f8 06       	cpc	r15, r24
     cb8:	61 f4       	brne	.+24     	; 0xcd2 <usart_init_spi+0x1aa>
     cba:	60 e1       	ldi	r22, 0x10	; 16
     cbc:	83 e0       	ldi	r24, 0x03	; 3
 *
 * \param usart Pointer to the USART module.
 */
static inline void usart_rx_disable(USART_t *usart)
{
	(usart)->CTRLB &= ~USART_RXEN_bm;
     cbe:	2a d2       	rcall	.+1108   	; 0x1114 <sysclk_enable_module>
     cc0:	e0 ea       	ldi	r30, 0xA0	; 160
     cc2:	f8 e0       	ldi	r31, 0x08	; 8
     cc4:	84 81       	ldd	r24, Z+4	; 0x04
	sysclk_enable_peripheral_clock(usart);

	usart_rx_disable(usart);

	/* configure Clock polarity using INVEN bit of the correct SCK I/O port **/
	invert_sck = (opt->spimode == 2) || (opt->spimode == 3);
     cc6:	8f 7e       	andi	r24, 0xEF	; 239
     cc8:	84 83       	std	Z+4, r24	; 0x04
     cca:	f8 01       	movw	r30, r16
     ccc:	24 81       	ldd	r18, Z+4	; 0x04
	}
#endif
#ifdef USARTD0
	else if (module == &USARTD0) {
     cce:	22 50       	subi	r18, 0x02	; 2
     cd0:	4c c0       	rjmp	.+152    	; 0xd6a <usart_init_spi+0x242>
     cd2:	f0 ea       	ldi	r31, 0xA0	; 160
     cd4:	ef 16       	cp	r14, r31
		sysclk_enable_module(SYSCLK_PORT_D, SYSCLK_USART0);
     cd6:	f9 e0       	ldi	r31, 0x09	; 9
     cd8:	ff 06       	cpc	r15, r31
     cda:	21 f4       	brne	.+8      	; 0xce4 <usart_init_spi+0x1bc>
     cdc:	60 e1       	ldi	r22, 0x10	; 16
     cde:	84 e0       	ldi	r24, 0x04	; 4
	}
#endif
#ifdef USARTE0
	else if (module == &USARTE0) {
     ce0:	19 d2       	rcall	.+1074   	; 0x1114 <sysclk_enable_module>
     ce2:	e3 c0       	rjmp	.+454    	; 0xeaa <usart_init_spi+0x382>
     ce4:	30 ea       	ldi	r19, 0xA0	; 160
     ce6:	e3 16       	cp	r14, r19
		sysclk_enable_module(SYSCLK_PORT_E, SYSCLK_USART0);
     ce8:	3a e0       	ldi	r19, 0x0A	; 10
     cea:	f3 06       	cpc	r15, r19
     cec:	21 f4       	brne	.+8      	; 0xcf6 <usart_init_spi+0x1ce>
     cee:	60 e1       	ldi	r22, 0x10	; 16
     cf0:	85 e0       	ldi	r24, 0x05	; 5
	}
#endif
#ifdef USARTF0
	else if (module == &USARTF0) {
     cf2:	10 d2       	rcall	.+1056   	; 0x1114 <sysclk_enable_module>
     cf4:	da c0       	rjmp	.+436    	; 0xeaa <usart_init_spi+0x382>
     cf6:	80 ea       	ldi	r24, 0xA0	; 160
     cf8:	e8 16       	cp	r14, r24
		sysclk_enable_module(SYSCLK_PORT_F, SYSCLK_USART0);
     cfa:	8b e0       	ldi	r24, 0x0B	; 11
     cfc:	f8 06       	cpc	r15, r24
     cfe:	21 f4       	brne	.+8      	; 0xd08 <usart_init_spi+0x1e0>
     d00:	60 e1       	ldi	r22, 0x10	; 16
     d02:	86 e0       	ldi	r24, 0x06	; 6
	}
#endif
#ifdef USARTC1
	else if (module == &USARTC1) {
     d04:	07 d2       	rcall	.+1038   	; 0x1114 <sysclk_enable_module>
     d06:	d1 c0       	rjmp	.+418    	; 0xeaa <usart_init_spi+0x382>
     d08:	e0 eb       	ldi	r30, 0xB0	; 176
     d0a:	ee 16       	cp	r14, r30
		sysclk_enable_module(SYSCLK_PORT_C, SYSCLK_USART1);
     d0c:	e8 e0       	ldi	r30, 0x08	; 8
     d0e:	fe 06       	cpc	r15, r30
     d10:	21 f4       	brne	.+8      	; 0xd1a <usart_init_spi+0x1f2>
     d12:	60 e2       	ldi	r22, 0x20	; 32
	}
#endif
#ifdef USARTD1
	else if (module == &USARTD1) {
     d14:	83 e0       	ldi	r24, 0x03	; 3
     d16:	fe d1       	rcall	.+1020   	; 0x1114 <sysclk_enable_module>
     d18:	c8 c0       	rjmp	.+400    	; 0xeaa <usart_init_spi+0x382>
     d1a:	f0 eb       	ldi	r31, 0xB0	; 176
     d1c:	ef 16       	cp	r14, r31
		sysclk_enable_module(SYSCLK_PORT_D, SYSCLK_USART1);
     d1e:	f9 e0       	ldi	r31, 0x09	; 9
     d20:	ff 06       	cpc	r15, r31
     d22:	21 f4       	brne	.+8      	; 0xd2c <usart_init_spi+0x204>
     d24:	60 e2       	ldi	r22, 0x20	; 32
     d26:	84 e0       	ldi	r24, 0x04	; 4
	else if (module == &USARTF1) {
		sysclk_enable_module(SYSCLK_PORT_F, SYSCLK_USART1);
	}
#endif
#ifdef TWIC
	else if (module == &TWIC) {
     d28:	f5 d1       	rcall	.+1002   	; 0x1114 <sysclk_enable_module>
     d2a:	bf c0       	rjmp	.+382    	; 0xeaa <usart_init_spi+0x382>
     d2c:	30 e8       	ldi	r19, 0x80	; 128
     d2e:	e3 16       	cp	r14, r19
     d30:	34 e0       	ldi	r19, 0x04	; 4
		sysclk_enable_module(SYSCLK_PORT_C, SYSCLK_TWI);
     d32:	f3 06       	cpc	r15, r19
     d34:	21 f4       	brne	.+8      	; 0xd3e <usart_init_spi+0x216>
     d36:	60 e4       	ldi	r22, 0x40	; 64
     d38:	83 e0       	ldi	r24, 0x03	; 3
     d3a:	ec d1       	rcall	.+984    	; 0x1114 <sysclk_enable_module>
	else if (module == &TWID) {
		sysclk_enable_module(SYSCLK_PORT_D, SYSCLK_TWI);
	}
#endif
#ifdef TWIE
	else if (module == &TWIE) {
     d3c:	b6 c0       	rjmp	.+364    	; 0xeaa <usart_init_spi+0x382>
     d3e:	80 ea       	ldi	r24, 0xA0	; 160
     d40:	e8 16       	cp	r14, r24
     d42:	84 e0       	ldi	r24, 0x04	; 4
     d44:	f8 06       	cpc	r15, r24
		sysclk_enable_module(SYSCLK_PORT_E, SYSCLK_TWI);
     d46:	21 f4       	brne	.+8      	; 0xd50 <usart_init_spi+0x228>
     d48:	60 e4       	ldi	r22, 0x40	; 64
     d4a:	85 e0       	ldi	r24, 0x05	; 5
     d4c:	e3 d1       	rcall	.+966    	; 0x1114 <sysclk_enable_module>
     d4e:	ad c0       	rjmp	.+346    	; 0xeaa <usart_init_spi+0x382>
     d50:	f7 01       	movw	r30, r14
     d52:	84 81       	ldd	r24, Z+4	; 0x04
     d54:	8f 7e       	andi	r24, 0xEF	; 239
     d56:	84 83       	std	Z+4, r24	; 0x04
     d58:	fb 01       	movw	r30, r22
     d5a:	24 81       	ldd	r18, Z+4	; 0x04
     d5c:	22 50       	subi	r18, 0x02	; 2
	UNUSED(invert_sck);

#ifdef USARTC0
	if ((uint16_t)usart == (uint16_t)&USARTC0) {
     d5e:	c7 01       	movw	r24, r14
     d60:	f0 ea       	ldi	r31, 0xA0	; 160
     d62:	ef 16       	cp	r14, r31
     d64:	f8 e0       	ldi	r31, 0x08	; 8
     d66:	ff 06       	cpc	r15, r31
     d68:	49 f4       	brne	.+18     	; 0xd7c <usart_init_spi+0x254>
#  ifdef PORT_USART0_bm
		if (PORTC.REMAP & PORT_USART0_bm) {
     d6a:	80 91 4e 06 	lds	r24, 0x064E	; 0x80064e <__TEXT_REGION_LENGTH__+0x7be64e>
     d6e:	84 fd       	sbrc	r24, 4
     d70:	a5 c0       	rjmp	.+330    	; 0xebc <usart_init_spi+0x394>
			sck_pin = IOPORT_CREATE_PIN(PORTC, 5);
		} else {
			sck_pin = IOPORT_CREATE_PIN(PORTC, 1);
     d72:	0f 2e       	mov	r0, r31
     d74:	f1 e1       	ldi	r31, 0x11	; 17
     d76:	df 2e       	mov	r13, r31
     d78:	f0 2d       	mov	r31, r0
     d7a:	a4 c0       	rjmp	.+328    	; 0xec4 <usart_init_spi+0x39c>
		sck_pin = IOPORT_CREATE_PIN(PORTC, 1);
#  endif
	}
#endif
#ifdef USARTC1
	if ((uint16_t)usart == (uint16_t)&USARTC1) {
     d7c:	80 3b       	cpi	r24, 0xB0	; 176
     d7e:	38 e0       	ldi	r19, 0x08	; 8
     d80:	93 07       	cpc	r25, r19
     d82:	91 f0       	breq	.+36     	; 0xda8 <usart_init_spi+0x280>
		sck_pin = IOPORT_CREATE_PIN(PORTC, 5);
	}
#endif
#ifdef USARTD0
	if ((uint16_t)usart == (uint16_t)&USARTD0) {
     d84:	80 3a       	cpi	r24, 0xA0	; 160
     d86:	e9 e0       	ldi	r30, 0x09	; 9
     d88:	9e 07       	cpc	r25, r30
     d8a:	49 f4       	brne	.+18     	; 0xd9e <usart_init_spi+0x276>
#  ifdef PORT_USART0_bm
		if (PORTD.REMAP & PORT_USART0_bm) {
     d8c:	30 91 6e 06 	lds	r19, 0x066E	; 0x80066e <__TEXT_REGION_LENGTH__+0x7be66e>
     d90:	34 fd       	sbrc	r19, 4
     d92:	9b c0       	rjmp	.+310    	; 0xeca <usart_init_spi+0x3a2>
			sck_pin = IOPORT_CREATE_PIN(PORTD, 5);
		} else {
			sck_pin = IOPORT_CREATE_PIN(PORTD, 1);
     d94:	0f 2e       	mov	r0, r31
     d96:	f9 e1       	ldi	r31, 0x19	; 25
     d98:	df 2e       	mov	r13, r31
     d9a:	f0 2d       	mov	r31, r0
     d9c:	16 c0       	rjmp	.+44     	; 0xdca <usart_init_spi+0x2a2>
		sck_pin = IOPORT_CREATE_PIN(PORTD, 1);
#  endif
	}
#endif
#ifdef USARTD1
	if ((uint16_t)usart == (uint16_t)&USARTD1) {
     d9e:	80 3b       	cpi	r24, 0xB0	; 176
     da0:	f9 e0       	ldi	r31, 0x09	; 9
     da2:	9f 07       	cpc	r25, r31
     da4:	f1 f0       	breq	.+60     	; 0xde2 <usart_init_spi+0x2ba>
     da6:	04 c0       	rjmp	.+8      	; 0xdb0 <usart_init_spi+0x288>
#  endif
	}
#endif
#ifdef USARTC1
	if ((uint16_t)usart == (uint16_t)&USARTC1) {
		sck_pin = IOPORT_CREATE_PIN(PORTC, 5);
     da8:	0f 2e       	mov	r0, r31
     daa:	f5 e1       	ldi	r31, 0x15	; 21
     dac:	df 2e       	mov	r13, r31
     dae:	f0 2d       	mov	r31, r0
	if ((uint16_t)usart == (uint16_t)&USARTD1) {
		sck_pin = IOPORT_CREATE_PIN(PORTD, 5);
	}
#endif
#ifdef USARTE0
	if ((uint16_t)usart == (uint16_t)&USARTE0) {
     db0:	80 3a       	cpi	r24, 0xA0	; 160
     db2:	3a e0       	ldi	r19, 0x0A	; 10
     db4:	93 07       	cpc	r25, r19
     db6:	49 f4       	brne	.+18     	; 0xdca <usart_init_spi+0x2a2>
#  ifdef PORT_USART0_bm
		if(PORTE.REMAP & PORT_USART0_bm) {
     db8:	80 91 8e 06 	lds	r24, 0x068E	; 0x80068e <__TEXT_REGION_LENGTH__+0x7be68e>
     dbc:	84 fd       	sbrc	r24, 4
     dbe:	8a c0       	rjmp	.+276    	; 0xed4 <usart_init_spi+0x3ac>
			sck_pin = IOPORT_CREATE_PIN(PORTE, 5);
		} else {
			sck_pin = IOPORT_CREATE_PIN(PORTE, 1);
     dc0:	0f 2e       	mov	r0, r31
     dc2:	f1 e2       	ldi	r31, 0x21	; 33
     dc4:	df 2e       	mov	r13, r31
     dc6:	f0 2d       	mov	r31, r0
     dc8:	15 c0       	rjmp	.+42     	; 0xdf4 <usart_init_spi+0x2cc>
	if ((uint16_t)usart == (uint16_t)&USARTE1) {
		sck_pin = IOPORT_CREATE_PIN(PORTE, 5);
	}
#endif
#ifdef USARTF0
	if ((uint16_t)usart == (uint16_t)&USARTF0) {
     dca:	80 3a       	cpi	r24, 0xA0	; 160
     dcc:	9b 40       	sbci	r25, 0x0B	; 11
     dce:	91 f4       	brne	.+36     	; 0xdf4 <usart_init_spi+0x2cc>
#  ifdef PORT_USART0_bm
		if(PORTF.REMAP & PORT_USART0_bm) {
     dd0:	80 91 ae 06 	lds	r24, 0x06AE	; 0x8006ae <__TEXT_REGION_LENGTH__+0x7be6ae>
     dd4:	84 fd       	sbrc	r24, 4
     dd6:	0a c0       	rjmp	.+20     	; 0xdec <usart_init_spi+0x2c4>
			sck_pin = IOPORT_CREATE_PIN(PORTF, 5);
		} else {
			sck_pin = IOPORT_CREATE_PIN(PORTF, 1);
     dd8:	0f 2e       	mov	r0, r31
     dda:	f9 e2       	ldi	r31, 0x29	; 41
     ddc:	df 2e       	mov	r13, r31
     dde:	f0 2d       	mov	r31, r0
     de0:	09 c0       	rjmp	.+18     	; 0xdf4 <usart_init_spi+0x2cc>
#  endif
	}
#endif
#ifdef USARTD1
	if ((uint16_t)usart == (uint16_t)&USARTD1) {
		sck_pin = IOPORT_CREATE_PIN(PORTD, 5);
     de2:	0f 2e       	mov	r0, r31
     de4:	fd e1       	ldi	r31, 0x1D	; 29
     de6:	df 2e       	mov	r13, r31
     de8:	f0 2d       	mov	r31, r0
     dea:	04 c0       	rjmp	.+8      	; 0xdf4 <usart_init_spi+0x2cc>
#endif
#ifdef USARTF0
	if ((uint16_t)usart == (uint16_t)&USARTF0) {
#  ifdef PORT_USART0_bm
		if(PORTF.REMAP & PORT_USART0_bm) {
			sck_pin = IOPORT_CREATE_PIN(PORTF, 5);
     dec:	0f 2e       	mov	r0, r31
     dee:	fd e2       	ldi	r31, 0x2D	; 45
     df0:	df 2e       	mov	r13, r31
     df2:	f0 2d       	mov	r31, r0
	return pin >> 3;
}

__always_inline static PORT_t *arch_ioport_port_to_base(ioport_port_t port)
{
	return (PORT_t *)((uintptr_t)IOPORT_BASE_ADDRESS +
     df4:	ed 2d       	mov	r30, r13
     df6:	e6 95       	lsr	r30
     df8:	e6 95       	lsr	r30
     dfa:	e6 95       	lsr	r30
     dfc:	30 e2       	ldi	r19, 0x20	; 32
     dfe:	e3 9f       	mul	r30, r19
     e00:	f0 01       	movw	r30, r0
     e02:	11 24       	eor	r1, r1
     e04:	fa 5f       	subi	r31, 0xFA	; 250
     e06:	3d 2d       	mov	r19, r13
     e08:	37 70       	andi	r19, 0x07	; 7
}

__always_inline static ioport_port_mask_t arch_ioport_pin_to_mask(
		ioport_pin_t pin)
{
	return 1U << (pin & 0x07);
     e0a:	81 e0       	ldi	r24, 0x01	; 1
     e0c:	90 e0       	ldi	r25, 0x00	; 0
     e0e:	03 2e       	mov	r0, r19
     e10:	02 c0       	rjmp	.+4      	; 0xe16 <usart_init_spi+0x2ee>
     e12:	88 0f       	add	r24, r24
     e14:	99 1f       	adc	r25, r25
     e16:	0a 94       	dec	r0
     e18:	e2 f7       	brpl	.-8      	; 0xe12 <usart_init_spi+0x2ea>
		enum ioport_direction dir)
{
	PORT_t *base = arch_ioport_pin_to_base(pin);

	if (dir == IOPORT_DIR_OUTPUT) {
		base->DIRSET = arch_ioport_pin_to_mask(pin);
     e1a:	81 83       	std	Z+1, r24	; 0x01
	}
#endif

	/* Configure the USART output pin */
	ioport_set_pin_dir(sck_pin, IOPORT_DIR_OUTPUT);
	ioport_set_pin_mode(sck_pin,
     e1c:	22 30       	cpi	r18, 0x02	; 2
     e1e:	10 f0       	brcs	.+4      	; 0xe24 <usart_init_spi+0x2fc>
     e20:	40 e0       	ldi	r20, 0x00	; 0
     e22:	01 c0       	rjmp	.+2      	; 0xe26 <usart_init_spi+0x2fe>
     e24:	40 e4       	ldi	r20, 0x40	; 64
__always_inline static void arch_ioport_set_pin_mode(ioport_pin_t pin,
		ioport_mode_t mode)
{
	PORT_t *base = arch_ioport_pin_to_base(pin);
	volatile uint8_t *pin_ctrl
		= (&base->PIN0CTRL + arch_ioport_pin_to_index(pin));
     e26:	df 01       	movw	r26, r30
     e28:	50 96       	adiw	r26, 0x10	; 16

__always_inline static void arch_ioport_set_pin_mode(ioport_pin_t pin,
		ioport_mode_t mode)
{
	PORT_t *base = arch_ioport_pin_to_base(pin);
	volatile uint8_t *pin_ctrl
     e2a:	a3 0f       	add	r26, r19
     e2c:	b1 1d       	adc	r27, r1

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags = SREG;
     e2e:	9f b7       	in	r25, 0x3f	; 63
     e30:	99 83       	std	Y+1, r25	; 0x01
	cpu_irq_disable();
     e32:	f8 94       	cli
	return flags;
     e34:	39 81       	ldd	r19, Y+1	; 0x01
		= (&base->PIN0CTRL + arch_ioport_pin_to_index(pin));

	uint8_t flags = cpu_irq_save();

	*pin_ctrl &= PORT_ISC_gm;
     e36:	2c 91       	ld	r18, X
     e38:	27 70       	andi	r18, 0x07	; 7
     e3a:	2c 93       	st	X, r18
	*pin_ctrl |= mode;
     e3c:	9c 91       	ld	r25, X
     e3e:	94 2b       	or	r25, r20
     e40:	9c 93       	st	X, r25
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
     e42:	3f bf       	out	0x3f, r19	; 63
		bool level)
{
	PORT_t *base = arch_ioport_pin_to_base(pin);

	if (level) {
		base->OUTSET = arch_ioport_pin_to_mask(pin);
     e44:	85 83       	std	Z+5, r24	; 0x05
 * - 0x2        : IrDA mode.
 * - 0x3        : Master SPI mode.
 */
static inline void usart_set_mode(USART_t *usart, USART_CMODE_t usartmode)
{
	(usart)->CTRLC = ((usart)->CTRLC & (~USART_CMODE_gm)) | usartmode;
     e46:	f7 01       	movw	r30, r14
     e48:	85 81       	ldd	r24, Z+5	; 0x05
     e4a:	80 6c       	ori	r24, 0xC0	; 192
     e4c:	85 83       	std	Z+5, r24	; 0x05
			IOPORT_MODE_TOTEM | (invert_sck? IOPORT_MODE_INVERT_PIN : 0));
	ioport_set_pin_level(sck_pin, IOPORT_PIN_LEVEL_HIGH);

	usart_set_mode(usart, USART_CMODE_MSPI_gc);

	if (opt->spimode == 1 || opt->spimode == 3) {
     e4e:	f8 01       	movw	r30, r16
     e50:	84 81       	ldd	r24, Z+4	; 0x04
     e52:	8d 7f       	andi	r24, 0xFD	; 253
     e54:	81 30       	cpi	r24, 0x01	; 1
     e56:	29 f4       	brne	.+10     	; 0xe62 <usart_init_spi+0x33a>
		usart->CTRLC |= USART_UCPHA_bm;
     e58:	f7 01       	movw	r30, r14
     e5a:	85 81       	ldd	r24, Z+5	; 0x05
     e5c:	82 60       	ori	r24, 0x02	; 2
     e5e:	85 83       	std	Z+5, r24	; 0x05
	} else {
		usart->CTRLC &= ~USART_UCPHA_bm;
     e60:	04 c0       	rjmp	.+8      	; 0xe6a <usart_init_spi+0x342>
     e62:	f7 01       	movw	r30, r14
     e64:	85 81       	ldd	r24, Z+5	; 0x05
     e66:	8d 7f       	andi	r24, 0xFD	; 253
	}
	if (opt->data_order) {
     e68:	85 83       	std	Z+5, r24	; 0x05
     e6a:	f8 01       	movw	r30, r16
     e6c:	85 81       	ldd	r24, Z+5	; 0x05
     e6e:	88 23       	and	r24, r24
		(usart)->CTRLC |= USART_DORD_bm;
     e70:	29 f0       	breq	.+10     	; 0xe7c <usart_init_spi+0x354>
     e72:	f7 01       	movw	r30, r14
     e74:	85 81       	ldd	r24, Z+5	; 0x05
     e76:	84 60       	ori	r24, 0x04	; 4
     e78:	85 83       	std	Z+5, r24	; 0x05
	} else {
		(usart)->CTRLC &= ~USART_DORD_bm;
     e7a:	04 c0       	rjmp	.+8      	; 0xe84 <usart_init_spi+0x35c>
     e7c:	f7 01       	movw	r30, r14
     e7e:	85 81       	ldd	r24, Z+5	; 0x05
     e80:	8b 7f       	andi	r24, 0xFB	; 251
	}

	usart_spi_set_baudrate(usart, opt->baudrate, sysclk_get_per_hz());
     e82:	85 83       	std	Z+5, r24	; 0x05
     e84:	f8 01       	movw	r30, r16
     e86:	40 81       	ld	r20, Z
     e88:	51 81       	ldd	r21, Z+1	; 0x01
     e8a:	62 81       	ldd	r22, Z+2	; 0x02
     e8c:	73 81       	ldd	r23, Z+3	; 0x03
     e8e:	00 e8       	ldi	r16, 0x80	; 128
     e90:	14 e8       	ldi	r17, 0x84	; 132
     e92:	2e e1       	ldi	r18, 0x1E	; 30
     e94:	30 e0       	ldi	r19, 0x00	; 0
     e96:	c7 01       	movw	r24, r14
     e98:	15 de       	rcall	.-982    	; 0xac4 <usart_spi_set_baudrate>
 *
 * \param usart Pointer to the USART module.
 */
static inline void usart_tx_enable(USART_t *usart)
{
	(usart)->CTRLB |= USART_TXEN_bm;
     e9a:	f7 01       	movw	r30, r14
     e9c:	84 81       	ldd	r24, Z+4	; 0x04
     e9e:	88 60       	ori	r24, 0x08	; 8
     ea0:	84 83       	std	Z+4, r24	; 0x04
 *
 * \param usart Pointer to the USART module
 */
static inline void usart_rx_enable(USART_t *usart)
{
	(usart)->CTRLB |= USART_RXEN_bm;
     ea2:	84 81       	ldd	r24, Z+4	; 0x04
     ea4:	80 61       	ori	r24, 0x10	; 16
     ea6:	84 83       	std	Z+4, r24	; 0x04
	usart_tx_enable(usart);
	usart_rx_enable(usart);
}
     ea8:	1a c0       	rjmp	.+52     	; 0xede <usart_init_spi+0x3b6>
 *
 * \param usart Pointer to the USART module.
 */
static inline void usart_rx_disable(USART_t *usart)
{
	(usart)->CTRLB &= ~USART_RXEN_bm;
     eaa:	f7 01       	movw	r30, r14
     eac:	84 81       	ldd	r24, Z+4	; 0x04
     eae:	8f 7e       	andi	r24, 0xEF	; 239
     eb0:	84 83       	std	Z+4, r24	; 0x04
	sysclk_enable_peripheral_clock(usart);

	usart_rx_disable(usart);

	/* configure Clock polarity using INVEN bit of the correct SCK I/O port **/
	invert_sck = (opt->spimode == 2) || (opt->spimode == 3);
     eb2:	f8 01       	movw	r30, r16
     eb4:	24 81       	ldd	r18, Z+4	; 0x04
     eb6:	22 50       	subi	r18, 0x02	; 2
	UNUSED(invert_sck);

#ifdef USARTC0
	if ((uint16_t)usart == (uint16_t)&USARTC0) {
     eb8:	c7 01       	movw	r24, r14
     eba:	60 cf       	rjmp	.-320    	; 0xd7c <usart_init_spi+0x254>
#  ifdef PORT_USART0_bm
		if (PORTC.REMAP & PORT_USART0_bm) {
			sck_pin = IOPORT_CREATE_PIN(PORTC, 5);
     ebc:	0f 2e       	mov	r0, r31
     ebe:	f5 e1       	ldi	r31, 0x15	; 21
     ec0:	df 2e       	mov	r13, r31
     ec2:	f0 2d       	mov	r31, r0
 *
 * \param usart The USART module.
 * \param opt The RS232 configuration option.
 */
void usart_init_spi(USART_t *usart, const usart_spi_options_t *opt)
{
     ec4:	80 ea       	ldi	r24, 0xA0	; 160
     ec6:	98 e0       	ldi	r25, 0x08	; 8
     ec8:	6a cf       	rjmp	.-300    	; 0xd9e <usart_init_spi+0x276>
#endif
#ifdef USARTD0
	if ((uint16_t)usart == (uint16_t)&USARTD0) {
#  ifdef PORT_USART0_bm
		if (PORTD.REMAP & PORT_USART0_bm) {
			sck_pin = IOPORT_CREATE_PIN(PORTD, 5);
     eca:	0f 2e       	mov	r0, r31
     ecc:	fd e1       	ldi	r31, 0x1D	; 29
     ece:	df 2e       	mov	r13, r31
     ed0:	f0 2d       	mov	r31, r0
     ed2:	7b cf       	rjmp	.-266    	; 0xdca <usart_init_spi+0x2a2>
#endif
#ifdef USARTE0
	if ((uint16_t)usart == (uint16_t)&USARTE0) {
#  ifdef PORT_USART0_bm
		if(PORTE.REMAP & PORT_USART0_bm) {
			sck_pin = IOPORT_CREATE_PIN(PORTE, 5);
     ed4:	0f 2e       	mov	r0, r31
     ed6:	f5 e2       	ldi	r31, 0x25	; 37
     ed8:	df 2e       	mov	r13, r31
     eda:	f0 2d       	mov	r31, r0
     edc:	8b cf       	rjmp	.-234    	; 0xdf4 <usart_init_spi+0x2cc>
	}

	usart_spi_set_baudrate(usart, opt->baudrate, sysclk_get_per_hz());
	usart_tx_enable(usart);
	usart_rx_enable(usart);
}
     ede:	0f 90       	pop	r0
     ee0:	df 91       	pop	r29
     ee2:	cf 91       	pop	r28
     ee4:	1f 91       	pop	r17
     ee6:	0f 91       	pop	r16
     ee8:	ff 90       	pop	r15
     eea:	ef 90       	pop	r14
     eec:	df 90       	pop	r13
     eee:	08 95       	ret

00000ef0 <usart_spi_init>:
		*data = usart_spi_transmit(usart, CONFIG_USART_SPI_DUMMY);
		len--;
		data++;
 	}
	return STATUS_OK;
}
     ef0:	80 3a       	cpi	r24, 0xA0	; 160
     ef2:	28 e0       	ldi	r18, 0x08	; 8
     ef4:	92 07       	cpc	r25, r18
     ef6:	21 f4       	brne	.+8      	; 0xf00 <usart_spi_init+0x10>
     ef8:	60 e1       	ldi	r22, 0x10	; 16
     efa:	83 e0       	ldi	r24, 0x03	; 3
     efc:	0b c1       	rjmp	.+534    	; 0x1114 <sysclk_enable_module>
     efe:	08 95       	ret
     f00:	80 3b       	cpi	r24, 0xB0	; 176
     f02:	28 e0       	ldi	r18, 0x08	; 8
     f04:	92 07       	cpc	r25, r18
     f06:	21 f4       	brne	.+8      	; 0xf10 <usart_spi_init+0x20>
     f08:	60 e2       	ldi	r22, 0x20	; 32
     f0a:	83 e0       	ldi	r24, 0x03	; 3
     f0c:	03 c1       	rjmp	.+518    	; 0x1114 <sysclk_enable_module>
     f0e:	08 95       	ret
     f10:	80 3a       	cpi	r24, 0xA0	; 160
     f12:	29 e0       	ldi	r18, 0x09	; 9
     f14:	92 07       	cpc	r25, r18
     f16:	21 f4       	brne	.+8      	; 0xf20 <usart_spi_init+0x30>
     f18:	60 e1       	ldi	r22, 0x10	; 16
     f1a:	84 e0       	ldi	r24, 0x04	; 4
     f1c:	fb c0       	rjmp	.+502    	; 0x1114 <sysclk_enable_module>
     f1e:	08 95       	ret
     f20:	80 3b       	cpi	r24, 0xB0	; 176
     f22:	29 e0       	ldi	r18, 0x09	; 9
     f24:	92 07       	cpc	r25, r18
     f26:	21 f4       	brne	.+8      	; 0xf30 <usart_spi_init+0x40>
     f28:	60 e2       	ldi	r22, 0x20	; 32
     f2a:	84 e0       	ldi	r24, 0x04	; 4
     f2c:	f3 c0       	rjmp	.+486    	; 0x1114 <sysclk_enable_module>
     f2e:	08 95       	ret
     f30:	80 3a       	cpi	r24, 0xA0	; 160
     f32:	2a e0       	ldi	r18, 0x0A	; 10
     f34:	92 07       	cpc	r25, r18
     f36:	21 f4       	brne	.+8      	; 0xf40 <usart_spi_init+0x50>
     f38:	60 e1       	ldi	r22, 0x10	; 16
     f3a:	85 e0       	ldi	r24, 0x05	; 5
     f3c:	eb c0       	rjmp	.+470    	; 0x1114 <sysclk_enable_module>
     f3e:	08 95       	ret
     f40:	80 3a       	cpi	r24, 0xA0	; 160
     f42:	9b 40       	sbci	r25, 0x0B	; 11
     f44:	19 f4       	brne	.+6      	; 0xf4c <usart_spi_init+0x5c>
     f46:	60 e1       	ldi	r22, 0x10	; 16
     f48:	86 e0       	ldi	r24, 0x06	; 6
     f4a:	e4 c0       	rjmp	.+456    	; 0x1114 <sysclk_enable_module>
     f4c:	08 95       	ret

00000f4e <usart_spi_setup_device>:
     f4e:	0f 93       	push	r16
     f50:	1f 93       	push	r17
     f52:	cf 93       	push	r28
     f54:	df 93       	push	r29
     f56:	00 d0       	rcall	.+0      	; 0xf58 <usart_spi_setup_device+0xa>
     f58:	00 d0       	rcall	.+0      	; 0xf5a <usart_spi_setup_device+0xc>
     f5a:	cd b7       	in	r28, 0x3d	; 61
     f5c:	de b7       	in	r29, 0x3e	; 62
     f5e:	09 83       	std	Y+1, r16	; 0x01
     f60:	1a 83       	std	Y+2, r17	; 0x02
     f62:	2b 83       	std	Y+3, r18	; 0x03
     f64:	3c 83       	std	Y+4, r19	; 0x04
     f66:	4d 83       	std	Y+5, r20	; 0x05
     f68:	1e 82       	std	Y+6, r1	; 0x06
     f6a:	be 01       	movw	r22, r28
     f6c:	6f 5f       	subi	r22, 0xFF	; 255
     f6e:	7f 4f       	sbci	r23, 0xFF	; 255
     f70:	db dd       	rcall	.-1098   	; 0xb28 <usart_init_spi>
     f72:	26 96       	adiw	r28, 0x06	; 6
     f74:	cd bf       	out	0x3d, r28	; 61
     f76:	de bf       	out	0x3e, r29	; 62
     f78:	df 91       	pop	r29
     f7a:	cf 91       	pop	r28
     f7c:	1f 91       	pop	r17
     f7e:	0f 91       	pop	r16
     f80:	08 95       	ret

00000f82 <usart_spi_select_device>:

void usart_spi_select_device(USART_t *usart, struct usart_spi_device *device)
{
	ioport_set_pin_low(device->id);
     f82:	fb 01       	movw	r30, r22
     f84:	80 81       	ld	r24, Z
	return pin >> 3;
}

__always_inline static PORT_t *arch_ioport_port_to_base(ioport_port_t port)
{
	return (PORT_t *)((uintptr_t)IOPORT_BASE_ADDRESS +
     f86:	e8 2f       	mov	r30, r24
     f88:	e6 95       	lsr	r30
     f8a:	e6 95       	lsr	r30
     f8c:	e6 95       	lsr	r30
     f8e:	40 e2       	ldi	r20, 0x20	; 32
     f90:	e4 9f       	mul	r30, r20
     f92:	f0 01       	movw	r30, r0
     f94:	11 24       	eor	r1, r1
     f96:	fa 5f       	subi	r31, 0xFA	; 250
}

__always_inline static ioport_port_mask_t arch_ioport_pin_to_mask(
		ioport_pin_t pin)
{
	return 1U << (pin & 0x07);
     f98:	87 70       	andi	r24, 0x07	; 7
     f9a:	21 e0       	ldi	r18, 0x01	; 1
     f9c:	30 e0       	ldi	r19, 0x00	; 0
     f9e:	a9 01       	movw	r20, r18
     fa0:	02 c0       	rjmp	.+4      	; 0xfa6 <usart_spi_select_device+0x24>
     fa2:	44 0f       	add	r20, r20
     fa4:	55 1f       	adc	r21, r21
     fa6:	8a 95       	dec	r24
     fa8:	e2 f7       	brpl	.-8      	; 0xfa2 <usart_spi_select_device+0x20>
	PORT_t *base = arch_ioport_pin_to_base(pin);

	if (level) {
		base->OUTSET = arch_ioport_pin_to_mask(pin);
	} else {
		base->OUTCLR = arch_ioport_pin_to_mask(pin);
     faa:	46 83       	std	Z+6, r20	; 0x06
     fac:	08 95       	ret

00000fae <usart_spi_deselect_device>:
}

void usart_spi_deselect_device(USART_t *usart, struct usart_spi_device *device)
{
	ioport_set_pin_high(device->id);
     fae:	fb 01       	movw	r30, r22
     fb0:	80 81       	ld	r24, Z
	return pin >> 3;
}

__always_inline static PORT_t *arch_ioport_port_to_base(ioport_port_t port)
{
	return (PORT_t *)((uintptr_t)IOPORT_BASE_ADDRESS +
     fb2:	e8 2f       	mov	r30, r24
     fb4:	e6 95       	lsr	r30
     fb6:	e6 95       	lsr	r30
     fb8:	e6 95       	lsr	r30
     fba:	40 e2       	ldi	r20, 0x20	; 32
     fbc:	e4 9f       	mul	r30, r20
     fbe:	f0 01       	movw	r30, r0
     fc0:	11 24       	eor	r1, r1
     fc2:	fa 5f       	subi	r31, 0xFA	; 250
}

__always_inline static ioport_port_mask_t arch_ioport_pin_to_mask(
		ioport_pin_t pin)
{
	return 1U << (pin & 0x07);
     fc4:	87 70       	andi	r24, 0x07	; 7
     fc6:	21 e0       	ldi	r18, 0x01	; 1
     fc8:	30 e0       	ldi	r19, 0x00	; 0
     fca:	a9 01       	movw	r20, r18
     fcc:	02 c0       	rjmp	.+4      	; 0xfd2 <usart_spi_deselect_device+0x24>
     fce:	44 0f       	add	r20, r20
     fd0:	55 1f       	adc	r21, r21
     fd2:	8a 95       	dec	r24
     fd4:	e2 f7       	brpl	.-8      	; 0xfce <usart_spi_deselect_device+0x20>
		bool level)
{
	PORT_t *base = arch_ioport_pin_to_base(pin);

	if (level) {
		base->OUTSET = arch_ioport_pin_to_mask(pin);
     fd6:	45 83       	std	Z+5, r20	; 0x05
     fd8:	08 95       	ret

00000fda <gfx_mono_set_framebuffer>:
	gfx_coord_t *framebuffer_pt = fbpointer +
			((page * GFX_MONO_LCD_WIDTH) + column);
	do {
		*data++ = *framebuffer_pt++;
	} while (--width > 0);
}
     fda:	80 93 4c 22 	sts	0x224C, r24	; 0x80224c <fbpointer>
     fde:	90 93 4d 22 	sts	0x224D, r25	; 0x80224d <fbpointer+0x1>
     fe2:	08 95       	ret

00000fe4 <gfx_mono_framebuffer_put_byte>:
\endcode
 */
void gfx_mono_framebuffer_put_byte(gfx_coord_t page, gfx_coord_t column,
		uint8_t data)
{
	*(fbpointer + (page * GFX_MONO_LCD_WIDTH) + column) = data;
     fe4:	20 91 4c 22 	lds	r18, 0x224C	; 0x80224c <fbpointer>
     fe8:	30 91 4d 22 	lds	r19, 0x224D	; 0x80224d <fbpointer+0x1>
     fec:	90 e8       	ldi	r25, 0x80	; 128
     fee:	89 9f       	mul	r24, r25
     ff0:	20 0d       	add	r18, r0
     ff2:	31 1d       	adc	r19, r1
     ff4:	11 24       	eor	r1, r1
     ff6:	f9 01       	movw	r30, r18
     ff8:	e6 0f       	add	r30, r22
     ffa:	f1 1d       	adc	r31, r1
     ffc:	40 83       	st	Z, r20
     ffe:	08 95       	ret

00001000 <gfx_mono_framebuffer_get_byte>:
	data = gfx_mono_framebuffer_get_byte(0, 0);
\endcode
 */
uint8_t gfx_mono_framebuffer_get_byte(gfx_coord_t page, gfx_coord_t column)
{
	return *(fbpointer + (page * GFX_MONO_LCD_WIDTH) + column);
    1000:	20 91 4c 22 	lds	r18, 0x224C	; 0x80224c <fbpointer>
    1004:	30 91 4d 22 	lds	r19, 0x224D	; 0x80224d <fbpointer+0x1>
    1008:	90 e8       	ldi	r25, 0x80	; 128
    100a:	89 9f       	mul	r24, r25
    100c:	20 0d       	add	r18, r0
    100e:	31 1d       	adc	r19, r1
    1010:	11 24       	eor	r1, r1
    1012:	f9 01       	movw	r30, r18
    1014:	e6 0f       	add	r30, r22
    1016:	f1 1d       	adc	r31, r1
}
    1018:	80 81       	ld	r24, Z
    101a:	08 95       	ret

0000101c <gfx_mono_generic_draw_horizontal_line>:
	gfx_mono_draw_horizontal_line(x, y, width, color);
	gfx_mono_draw_horizontal_line(x, y + height - 1, width, color);

	gfx_mono_draw_vertical_line(x, y, height, color);
	gfx_mono_draw_vertical_line(x + width - 1, y, height, color);
}
    101c:	ff 92       	push	r15
    101e:	0f 93       	push	r16
    1020:	1f 93       	push	r17
    1022:	cf 93       	push	r28
    1024:	df 93       	push	r29
    1026:	e4 2f       	mov	r30, r20
    1028:	f0 e0       	ldi	r31, 0x00	; 0
    102a:	e8 0f       	add	r30, r24
    102c:	f1 1d       	adc	r31, r1
    102e:	e1 38       	cpi	r30, 0x81	; 129
    1030:	f1 05       	cpc	r31, r1
    1032:	1c f0       	brlt	.+6      	; 0x103a <gfx_mono_generic_draw_horizontal_line+0x1e>
    1034:	c0 e8       	ldi	r28, 0x80	; 128
    1036:	4c 2f       	mov	r20, r28
    1038:	48 1b       	sub	r20, r24
    103a:	44 23       	and	r20, r20
    103c:	09 f4       	brne	.+2      	; 0x1040 <gfx_mono_generic_draw_horizontal_line+0x24>
    103e:	4a c0       	rjmp	.+148    	; 0x10d4 <gfx_mono_generic_draw_horizontal_line+0xb8>
    1040:	d6 2f       	mov	r29, r22
    1042:	d6 95       	lsr	r29
    1044:	d6 95       	lsr	r29
    1046:	d6 95       	lsr	r29
    1048:	70 e0       	ldi	r23, 0x00	; 0
    104a:	98 e0       	ldi	r25, 0x08	; 8
    104c:	d9 9f       	mul	r29, r25
    104e:	60 19       	sub	r22, r0
    1050:	71 09       	sbc	r23, r1
    1052:	11 24       	eor	r1, r1
    1054:	e1 e0       	ldi	r30, 0x01	; 1
    1056:	f0 e0       	ldi	r31, 0x00	; 0
    1058:	df 01       	movw	r26, r30
    105a:	02 c0       	rjmp	.+4      	; 0x1060 <gfx_mono_generic_draw_horizontal_line+0x44>
    105c:	aa 0f       	add	r26, r26
    105e:	bb 1f       	adc	r27, r27
    1060:	6a 95       	dec	r22
    1062:	e2 f7       	brpl	.-8      	; 0x105c <gfx_mono_generic_draw_horizontal_line+0x40>
    1064:	fa 2e       	mov	r15, r26
    1066:	21 30       	cpi	r18, 0x01	; 1
    1068:	21 f0       	breq	.+8      	; 0x1072 <gfx_mono_generic_draw_horizontal_line+0x56>
    106a:	98 f0       	brcs	.+38     	; 0x1092 <gfx_mono_generic_draw_horizontal_line+0x76>
    106c:	22 30       	cpi	r18, 0x02	; 2
    106e:	19 f1       	breq	.+70     	; 0x10b6 <gfx_mono_generic_draw_horizontal_line+0x9a>
    1070:	31 c0       	rjmp	.+98     	; 0x10d4 <gfx_mono_generic_draw_horizontal_line+0xb8>
    1072:	c4 2f       	mov	r28, r20
    1074:	1f ef       	ldi	r17, 0xFF	; 255
    1076:	18 0f       	add	r17, r24
    1078:	01 2f       	mov	r16, r17
    107a:	0c 0f       	add	r16, r28
    107c:	60 2f       	mov	r22, r16
    107e:	8d 2f       	mov	r24, r29
    1080:	1f dd       	rcall	.-1474   	; 0xac0 <gfx_mono_st7565r_get_byte>
    1082:	4f 2d       	mov	r20, r15
    1084:	48 2b       	or	r20, r24
    1086:	60 2f       	mov	r22, r16
    1088:	8d 2f       	mov	r24, r29
    108a:	fb db       	rcall	.-2058   	; 0x882 <gfx_mono_st7565r_put_byte>
    108c:	c1 50       	subi	r28, 0x01	; 1
    108e:	a1 f7       	brne	.-24     	; 0x1078 <gfx_mono_generic_draw_horizontal_line+0x5c>
    1090:	21 c0       	rjmp	.+66     	; 0x10d4 <gfx_mono_generic_draw_horizontal_line+0xb8>
    1092:	c4 2f       	mov	r28, r20
    1094:	1f ef       	ldi	r17, 0xFF	; 255
    1096:	18 0f       	add	r17, r24
    1098:	fa 2e       	mov	r15, r26
    109a:	f0 94       	com	r15
    109c:	01 2f       	mov	r16, r17
    109e:	0c 0f       	add	r16, r28
    10a0:	60 2f       	mov	r22, r16
    10a2:	8d 2f       	mov	r24, r29
    10a4:	0d dd       	rcall	.-1510   	; 0xac0 <gfx_mono_st7565r_get_byte>
    10a6:	4f 2d       	mov	r20, r15
    10a8:	48 23       	and	r20, r24
    10aa:	60 2f       	mov	r22, r16
    10ac:	8d 2f       	mov	r24, r29
    10ae:	e9 db       	rcall	.-2094   	; 0x882 <gfx_mono_st7565r_put_byte>
    10b0:	c1 50       	subi	r28, 0x01	; 1
    10b2:	a1 f7       	brne	.-24     	; 0x109c <gfx_mono_generic_draw_horizontal_line+0x80>
    10b4:	0f c0       	rjmp	.+30     	; 0x10d4 <gfx_mono_generic_draw_horizontal_line+0xb8>
    10b6:	c4 2f       	mov	r28, r20
    10b8:	1f ef       	ldi	r17, 0xFF	; 255
    10ba:	18 0f       	add	r17, r24
    10bc:	01 2f       	mov	r16, r17
    10be:	0c 0f       	add	r16, r28
    10c0:	60 2f       	mov	r22, r16
    10c2:	8d 2f       	mov	r24, r29
    10c4:	fd dc       	rcall	.-1542   	; 0xac0 <gfx_mono_st7565r_get_byte>
    10c6:	4f 2d       	mov	r20, r15
    10c8:	48 27       	eor	r20, r24
    10ca:	60 2f       	mov	r22, r16
    10cc:	8d 2f       	mov	r24, r29
    10ce:	d9 db       	rcall	.-2126   	; 0x882 <gfx_mono_st7565r_put_byte>
    10d0:	c1 50       	subi	r28, 0x01	; 1
    10d2:	a1 f7       	brne	.-24     	; 0x10bc <gfx_mono_generic_draw_horizontal_line+0xa0>
    10d4:	df 91       	pop	r29
    10d6:	cf 91       	pop	r28
    10d8:	1f 91       	pop	r17
    10da:	0f 91       	pop	r16
    10dc:	ff 90       	pop	r15
    10de:	08 95       	ret

000010e0 <gfx_mono_generic_draw_filled_rect>:
 * \param  color       Pixel operation of the line
 */
void gfx_mono_generic_draw_filled_rect(gfx_coord_t x, gfx_coord_t y,
		gfx_coord_t width, gfx_coord_t height,
		enum gfx_mono_color color)
{
    10e0:	ff 92       	push	r15
    10e2:	0f 93       	push	r16
    10e4:	1f 93       	push	r17
    10e6:	cf 93       	push	r28
    10e8:	df 93       	push	r29
	if (height == 0) {
    10ea:	22 23       	and	r18, r18
    10ec:	69 f0       	breq	.+26     	; 0x1108 <gfx_mono_generic_draw_filled_rect+0x28>
    10ee:	f4 2e       	mov	r15, r20
    10f0:	18 2f       	mov	r17, r24
    10f2:	c2 2f       	mov	r28, r18
		/* Nothing to do. Move along. */
		return;
	}

	while (height-- > 0) {
		gfx_mono_draw_horizontal_line(x, y + height, width, color);
    10f4:	df ef       	ldi	r29, 0xFF	; 255
    10f6:	d6 0f       	add	r29, r22
    10f8:	6d 2f       	mov	r22, r29
    10fa:	6c 0f       	add	r22, r28
    10fc:	20 2f       	mov	r18, r16
    10fe:	4f 2d       	mov	r20, r15
    1100:	81 2f       	mov	r24, r17
    1102:	8c df       	rcall	.-232    	; 0x101c <gfx_mono_generic_draw_horizontal_line>
    1104:	c1 50       	subi	r28, 0x01	; 1
	if (height == 0) {
		/* Nothing to do. Move along. */
		return;
	}

	while (height-- > 0) {
    1106:	c1 f7       	brne	.-16     	; 0x10f8 <gfx_mono_generic_draw_filled_rect+0x18>
		gfx_mono_draw_horizontal_line(x, y + height, width, color);
	}
}
    1108:	df 91       	pop	r29
    110a:	cf 91       	pop	r28
    110c:	1f 91       	pop	r17
    110e:	0f 91       	pop	r16
    1110:	ff 90       	pop	r15
    1112:	08 95       	ret

00001114 <sysclk_enable_module>:
	sysclk_rtcsrc_enable(CONFIG_RTC_SOURCE);
#endif
}

void sysclk_enable_module(enum sysclk_port_id port, uint8_t id)
{
    1114:	cf 93       	push	r28
    1116:	df 93       	push	r29
    1118:	1f 92       	push	r1
    111a:	cd b7       	in	r28, 0x3d	; 61
    111c:	de b7       	in	r29, 0x3e	; 62

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags = SREG;
    111e:	9f b7       	in	r25, 0x3f	; 63
    1120:	99 83       	std	Y+1, r25	; 0x01
	cpu_irq_disable();
    1122:	f8 94       	cli
	return flags;
    1124:	99 81       	ldd	r25, Y+1	; 0x01
	irqflags_t flags = cpu_irq_save();

	*((uint8_t *)&PR.PRGEN + port) &= ~id;
    1126:	e8 2f       	mov	r30, r24
    1128:	f0 e0       	ldi	r31, 0x00	; 0
    112a:	e0 59       	subi	r30, 0x90	; 144
    112c:	ff 4f       	sbci	r31, 0xFF	; 255
    112e:	60 95       	com	r22
    1130:	80 81       	ld	r24, Z
    1132:	68 23       	and	r22, r24
    1134:	60 83       	st	Z, r22
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
    1136:	9f bf       	out	0x3f, r25	; 63

	cpu_irq_restore(flags);
}
    1138:	0f 90       	pop	r0
    113a:	df 91       	pop	r29
    113c:	cf 91       	pop	r28
    113e:	08 95       	ret

00001140 <gfx_mono_draw_char>:
 * \param y        Y coordinate on screen.
 * \param font     Font to draw character in
 */
void gfx_mono_draw_char(const char c, const gfx_coord_t x, const gfx_coord_t y,
		const struct font *font)
{
    1140:	af 92       	push	r10
    1142:	bf 92       	push	r11
    1144:	cf 92       	push	r12
    1146:	df 92       	push	r13
    1148:	ef 92       	push	r14
    114a:	ff 92       	push	r15
    114c:	0f 93       	push	r16
    114e:	1f 93       	push	r17
    1150:	cf 93       	push	r28
    1152:	df 93       	push	r29
    1154:	c8 2f       	mov	r28, r24
    1156:	e6 2e       	mov	r14, r22
    1158:	b4 2e       	mov	r11, r20
    115a:	69 01       	movw	r12, r18
	gfx_mono_draw_filled_rect(x, y, font->width, font->height,
    115c:	00 e0       	ldi	r16, 0x00	; 0
    115e:	f9 01       	movw	r30, r18
    1160:	24 81       	ldd	r18, Z+4	; 0x04
    1162:	43 81       	ldd	r20, Z+3	; 0x03
    1164:	6b 2d       	mov	r22, r11
    1166:	8e 2d       	mov	r24, r14
    1168:	bb df       	rcall	.-138    	; 0x10e0 <gfx_mono_generic_draw_filled_rect>
			GFX_PIXEL_CLR);

	switch (font->type) {
    116a:	f6 01       	movw	r30, r12
    116c:	80 81       	ld	r24, Z
    116e:	81 11       	cpse	r24, r1
    1170:	39 c0       	rjmp	.+114    	; 0x11e4 <gfx_mono_draw_char+0xa4>
	Assert(font != NULL);

	gfx_coord_t inc_x = x;
	gfx_coord_t inc_y = y;

	char_row_size = font->width / CONFIG_FONT_PIXELS_PER_BYTE;
    1172:	83 81       	ldd	r24, Z+3	; 0x03
    1174:	28 2f       	mov	r18, r24
    1176:	26 95       	lsr	r18
    1178:	26 95       	lsr	r18
    117a:	26 95       	lsr	r18
	if (font->width % CONFIG_FONT_PIXELS_PER_BYTE) {
    117c:	87 70       	andi	r24, 0x07	; 7
    117e:	09 f0       	breq	.+2      	; 0x1182 <gfx_mono_draw_char+0x42>
		char_row_size++;
    1180:	2f 5f       	subi	r18, 0xFF	; 255
	}

	glyph_data_offset = char_row_size * font->height *
    1182:	f6 01       	movw	r30, r12
    1184:	a4 80       	ldd	r10, Z+4	; 0x04
			((uint8_t)ch - font->first_char);
	glyph_data = font->data.progmem + glyph_data_offset;
    1186:	8c 2f       	mov	r24, r28
    1188:	90 e0       	ldi	r25, 0x00	; 0
    118a:	35 81       	ldd	r19, Z+5	; 0x05
    118c:	83 1b       	sub	r24, r19
    118e:	91 09       	sbc	r25, r1
    1190:	2a 9d       	mul	r18, r10
    1192:	90 01       	movw	r18, r0
    1194:	11 24       	eor	r1, r1
    1196:	82 9f       	mul	r24, r18
    1198:	a0 01       	movw	r20, r0
    119a:	83 9f       	mul	r24, r19
    119c:	50 0d       	add	r21, r0
    119e:	92 9f       	mul	r25, r18
    11a0:	50 0d       	add	r21, r0
    11a2:	11 24       	eor	r1, r1
    11a4:	01 81       	ldd	r16, Z+1	; 0x01
    11a6:	12 81       	ldd	r17, Z+2	; 0x02
    11a8:	04 0f       	add	r16, r20
    11aa:	15 1f       	adc	r17, r21
	rows_left = font->height;

	do {
		uint8_t glyph_byte = 0;
		uint8_t pixelsToDraw = font->width;
    11ac:	f6 01       	movw	r30, r12
    11ae:	f3 80       	ldd	r15, Z+3	; 0x03

		for (i = 0; i < pixelsToDraw; i++) {
    11b0:	ff 20       	and	r15, r15
    11b2:	a1 f0       	breq	.+40     	; 0x11dc <gfx_mono_draw_char+0x9c>
    11b4:	d0 e0       	ldi	r29, 0x00	; 0
    11b6:	c0 e0       	ldi	r28, 0x00	; 0
    11b8:	8e 2d       	mov	r24, r14
    11ba:	8c 0f       	add	r24, r28
			if (i % CONFIG_FONT_PIXELS_PER_BYTE == 0) {
    11bc:	9c 2f       	mov	r25, r28
    11be:	97 70       	andi	r25, 0x07	; 7
    11c0:	21 f4       	brne	.+8      	; 0x11ca <gfx_mono_draw_char+0x8a>
				glyph_byte = PROGMEM_READ_BYTE(glyph_data);
    11c2:	f8 01       	movw	r30, r16
    11c4:	d4 91       	lpm	r29, Z
				glyph_data++;
    11c6:	0f 5f       	subi	r16, 0xFF	; 255
    11c8:	1f 4f       	sbci	r17, 0xFF	; 255
			}

			if ((glyph_byte & 0x80)) {
    11ca:	dd 23       	and	r29, r29
    11cc:	1c f4       	brge	.+6      	; 0x11d4 <gfx_mono_draw_char+0x94>
				gfx_mono_draw_pixel(inc_x, inc_y,
    11ce:	41 e0       	ldi	r20, 0x01	; 1
    11d0:	6b 2d       	mov	r22, r11
    11d2:	40 dc       	rcall	.-1920   	; 0xa54 <gfx_mono_st7565r_draw_pixel>
						GFX_PIXEL_SET);
			}

			inc_x += 1;
			glyph_byte <<= 1;
    11d4:	dd 0f       	add	r29, r29

	do {
		uint8_t glyph_byte = 0;
		uint8_t pixelsToDraw = font->width;

		for (i = 0; i < pixelsToDraw; i++) {
    11d6:	cf 5f       	subi	r28, 0xFF	; 255
    11d8:	fc 12       	cpse	r15, r28
    11da:	ee cf       	rjmp	.-36     	; 0x11b8 <gfx_mono_draw_char+0x78>

			inc_x += 1;
			glyph_byte <<= 1;
		}

		inc_y += 1;
    11dc:	b3 94       	inc	r11
		inc_x = x;
		rows_left--;
    11de:	aa 94       	dec	r10
	} while (rows_left > 0);
    11e0:	a1 10       	cpse	r10, r1
    11e2:	e4 cf       	rjmp	.-56     	; 0x11ac <gfx_mono_draw_char+0x6c>
	default:
		/* Unsupported mode, call assert */
		Assert(false);
		break;
	}
}
    11e4:	df 91       	pop	r29
    11e6:	cf 91       	pop	r28
    11e8:	1f 91       	pop	r17
    11ea:	0f 91       	pop	r16
    11ec:	ff 90       	pop	r15
    11ee:	ef 90       	pop	r14
    11f0:	df 90       	pop	r13
    11f2:	cf 90       	pop	r12
    11f4:	bf 90       	pop	r11
    11f6:	af 90       	pop	r10
    11f8:	08 95       	ret

000011fa <gfx_mono_draw_string>:
 * \param y         Y coordinate on screen.
 * \param font      Font to draw string in
 */
void gfx_mono_draw_string(const char *str, gfx_coord_t x, gfx_coord_t y,
		const struct font *font)
{
    11fa:	df 92       	push	r13
    11fc:	ef 92       	push	r14
    11fe:	ff 92       	push	r15
    1200:	0f 93       	push	r16
    1202:	1f 93       	push	r17
    1204:	cf 93       	push	r28
    1206:	df 93       	push	r29
    1208:	d6 2e       	mov	r13, r22
    120a:	04 2f       	mov	r16, r20
    120c:	79 01       	movw	r14, r18
    120e:	ec 01       	movw	r28, r24
    1210:	16 2f       	mov	r17, r22
	Assert(font != NULL);

	/* Draw characters until trailing null byte */
	do {
		/* Handle '\n' as newline, draw normal characters. */
		if (*str == '\n') {
    1212:	89 91       	ld	r24, Y+
    1214:	8a 30       	cpi	r24, 0x0A	; 10
    1216:	31 f4       	brne	.+12     	; 0x1224 <gfx_mono_draw_string+0x2a>
			x = start_of_string_position_x;
			y += font->height + 1;
    1218:	f7 01       	movw	r30, r14
    121a:	84 81       	ldd	r24, Z+4	; 0x04
    121c:	8f 5f       	subi	r24, 0xFF	; 255
    121e:	08 0f       	add	r16, r24

	/* Draw characters until trailing null byte */
	do {
		/* Handle '\n' as newline, draw normal characters. */
		if (*str == '\n') {
			x = start_of_string_position_x;
    1220:	1d 2d       	mov	r17, r13
    1222:	09 c0       	rjmp	.+18     	; 0x1236 <gfx_mono_draw_string+0x3c>
			y += font->height + 1;
		} else if (*str == '\r') {
    1224:	8d 30       	cpi	r24, 0x0D	; 13
    1226:	39 f0       	breq	.+14     	; 0x1236 <gfx_mono_draw_string+0x3c>
			/* Skip '\r' characters. */
		} else {
			gfx_mono_draw_char(*str, x, y, font);
    1228:	97 01       	movw	r18, r14
    122a:	40 2f       	mov	r20, r16
    122c:	61 2f       	mov	r22, r17
    122e:	88 df       	rcall	.-240    	; 0x1140 <gfx_mono_draw_char>
			x += font->width;
    1230:	f7 01       	movw	r30, r14
    1232:	83 81       	ldd	r24, Z+3	; 0x03
    1234:	18 0f       	add	r17, r24
		}
	} while (*(++str));
    1236:	88 81       	ld	r24, Y
    1238:	81 11       	cpse	r24, r1
    123a:	eb cf       	rjmp	.-42     	; 0x1212 <gfx_mono_draw_string+0x18>
}
    123c:	df 91       	pop	r29
    123e:	cf 91       	pop	r28
    1240:	1f 91       	pop	r17
    1242:	0f 91       	pop	r16
    1244:	ff 90       	pop	r15
    1246:	ef 90       	pop	r14
    1248:	df 90       	pop	r13
    124a:	08 95       	ret

0000124c <vListInitialise>:

    /* Remember which list the item is in. */
    pxNewListItem->pxContainer = pxList;

    ( pxList->uxNumberOfItems )++;
}
    124c:	fc 01       	movw	r30, r24
    124e:	03 96       	adiw	r24, 0x03	; 3
    1250:	81 83       	std	Z+1, r24	; 0x01
    1252:	92 83       	std	Z+2, r25	; 0x02
    1254:	2f ef       	ldi	r18, 0xFF	; 255
    1256:	3f ef       	ldi	r19, 0xFF	; 255
    1258:	23 83       	std	Z+3, r18	; 0x03
    125a:	34 83       	std	Z+4, r19	; 0x04
    125c:	85 83       	std	Z+5, r24	; 0x05
    125e:	96 83       	std	Z+6, r25	; 0x06
    1260:	87 83       	std	Z+7, r24	; 0x07
    1262:	90 87       	std	Z+8, r25	; 0x08
    1264:	10 82       	st	Z, r1
    1266:	08 95       	ret

00001268 <vListInitialiseItem>:
    1268:	fc 01       	movw	r30, r24
    126a:	10 86       	std	Z+8, r1	; 0x08
    126c:	11 86       	std	Z+9, r1	; 0x09
    126e:	08 95       	ret

00001270 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList,
                  ListItem_t * const pxNewListItem )
{
    1270:	cf 93       	push	r28
    1272:	df 93       	push	r29
    1274:	eb 01       	movw	r28, r22
    ListItem_t * pxIterator;
    const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
    1276:	48 81       	ld	r20, Y
    1278:	59 81       	ldd	r21, Y+1	; 0x01
     * new list item should be placed after it.  This ensures that TCBs which are
     * stored in ready lists (all of which have the same xItemValue value) get a
     * share of the CPU.  However, if the xItemValue is the same as the back marker
     * the iteration loop below will not end.  Therefore the value is checked
     * first, and the algorithm slightly modified if necessary. */
    if( xValueOfInsertion == portMAX_DELAY )
    127a:	4f 3f       	cpi	r20, 0xFF	; 255
    127c:	2f ef       	ldi	r18, 0xFF	; 255
    127e:	52 07       	cpc	r21, r18
    1280:	21 f4       	brne	.+8      	; 0x128a <vListInsert+0x1a>
    {
        pxIterator = pxList->xListEnd.pxPrevious;
    1282:	fc 01       	movw	r30, r24
    1284:	a7 81       	ldd	r26, Z+7	; 0x07
    1286:	b0 85       	ldd	r27, Z+8	; 0x08
    1288:	0d c0       	rjmp	.+26     	; 0x12a4 <vListInsert+0x34>
        *   5) If the FreeRTOS port supports interrupt nesting then ensure that
        *      the priority of the tick interrupt is at or below
        *      configMAX_SYSCALL_INTERRUPT_PRIORITY.
        **********************************************************************/

        for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
    128a:	dc 01       	movw	r26, r24
    128c:	13 96       	adiw	r26, 0x03	; 3
    128e:	01 c0       	rjmp	.+2      	; 0x1292 <vListInsert+0x22>
    1290:	df 01       	movw	r26, r30
    1292:	12 96       	adiw	r26, 0x02	; 2
    1294:	ed 91       	ld	r30, X+
    1296:	fc 91       	ld	r31, X
    1298:	13 97       	sbiw	r26, 0x03	; 3
    129a:	20 81       	ld	r18, Z
    129c:	31 81       	ldd	r19, Z+1	; 0x01
    129e:	42 17       	cp	r20, r18
    12a0:	53 07       	cpc	r21, r19
    12a2:	b0 f7       	brcc	.-20     	; 0x1290 <vListInsert+0x20>
            /* There is nothing to do here, just iterating to the wanted
             * insertion position. */
        }
    }

    pxNewListItem->pxNext = pxIterator->pxNext;
    12a4:	12 96       	adiw	r26, 0x02	; 2
    12a6:	ed 91       	ld	r30, X+
    12a8:	fc 91       	ld	r31, X
    12aa:	13 97       	sbiw	r26, 0x03	; 3
    12ac:	ea 83       	std	Y+2, r30	; 0x02
    12ae:	fb 83       	std	Y+3, r31	; 0x03
    pxNewListItem->pxNext->pxPrevious = pxNewListItem;
    12b0:	c4 83       	std	Z+4, r28	; 0x04
    12b2:	d5 83       	std	Z+5, r29	; 0x05
    pxNewListItem->pxPrevious = pxIterator;
    12b4:	ac 83       	std	Y+4, r26	; 0x04
    12b6:	bd 83       	std	Y+5, r27	; 0x05
    pxIterator->pxNext = pxNewListItem;
    12b8:	12 96       	adiw	r26, 0x02	; 2
    12ba:	cd 93       	st	X+, r28
    12bc:	dc 93       	st	X, r29
    12be:	13 97       	sbiw	r26, 0x03	; 3

    /* Remember which list the item is in.  This allows fast removal of the
     * item later. */
    pxNewListItem->pxContainer = pxList;
    12c0:	88 87       	std	Y+8, r24	; 0x08
    12c2:	99 87       	std	Y+9, r25	; 0x09

    ( pxList->uxNumberOfItems )++;
    12c4:	fc 01       	movw	r30, r24
    12c6:	20 81       	ld	r18, Z
    12c8:	2f 5f       	subi	r18, 0xFF	; 255
    12ca:	20 83       	st	Z, r18
}
    12cc:	df 91       	pop	r29
    12ce:	cf 91       	pop	r28
    12d0:	08 95       	ret

000012d2 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
    12d2:	cf 93       	push	r28
    12d4:	df 93       	push	r29
    12d6:	fc 01       	movw	r30, r24
/* The list item knows which list it is in.  Obtain the list from the list
 * item. */
    List_t * const pxList = pxItemToRemove->pxContainer;
    12d8:	a0 85       	ldd	r26, Z+8	; 0x08
    12da:	b1 85       	ldd	r27, Z+9	; 0x09

    pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
    12dc:	c2 81       	ldd	r28, Z+2	; 0x02
    12de:	d3 81       	ldd	r29, Z+3	; 0x03
    12e0:	84 81       	ldd	r24, Z+4	; 0x04
    12e2:	95 81       	ldd	r25, Z+5	; 0x05
    12e4:	8c 83       	std	Y+4, r24	; 0x04
    12e6:	9d 83       	std	Y+5, r25	; 0x05
    pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
    12e8:	c4 81       	ldd	r28, Z+4	; 0x04
    12ea:	d5 81       	ldd	r29, Z+5	; 0x05
    12ec:	82 81       	ldd	r24, Z+2	; 0x02
    12ee:	93 81       	ldd	r25, Z+3	; 0x03
    12f0:	8a 83       	std	Y+2, r24	; 0x02
    12f2:	9b 83       	std	Y+3, r25	; 0x03

    /* Only used during decision coverage testing. */
    mtCOVERAGE_TEST_DELAY();

    /* Make sure the index is left pointing to a valid item. */
    if( pxList->pxIndex == pxItemToRemove )
    12f4:	11 96       	adiw	r26, 0x01	; 1
    12f6:	8d 91       	ld	r24, X+
    12f8:	9c 91       	ld	r25, X
    12fa:	12 97       	sbiw	r26, 0x02	; 2
    12fc:	e8 17       	cp	r30, r24
    12fe:	f9 07       	cpc	r31, r25
    1300:	31 f4       	brne	.+12     	; 0x130e <uxListRemove+0x3c>
    {
        pxList->pxIndex = pxItemToRemove->pxPrevious;
    1302:	84 81       	ldd	r24, Z+4	; 0x04
    1304:	95 81       	ldd	r25, Z+5	; 0x05
    1306:	11 96       	adiw	r26, 0x01	; 1
    1308:	8d 93       	st	X+, r24
    130a:	9c 93       	st	X, r25
    130c:	12 97       	sbiw	r26, 0x02	; 2
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxItemToRemove->pxContainer = NULL;
    130e:	10 86       	std	Z+8, r1	; 0x08
    1310:	11 86       	std	Z+9, r1	; 0x09
    ( pxList->uxNumberOfItems )--;
    1312:	8c 91       	ld	r24, X
    1314:	81 50       	subi	r24, 0x01	; 1
    1316:	8c 93       	st	X, r24

    return pxList->uxNumberOfItems;
    1318:	8c 91       	ld	r24, X
}
    131a:	df 91       	pop	r29
    131c:	cf 91       	pop	r28
    131e:	08 95       	ret

00001320 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
    1320:	0f 93       	push	r16
    1322:	1f 93       	push	r17
    1324:	8b 01       	movw	r16, r22
uint16_t usAddress;

    /* Place a few bytes of known values on the bottom of the stack.
    This is just useful for debugging. */

    *pxTopOfStack = 0x11;
    1326:	71 e1       	ldi	r23, 0x11	; 17
    1328:	fc 01       	movw	r30, r24
    132a:	70 83       	st	Z, r23
    pxTopOfStack--;
    *pxTopOfStack = 0x22;
    132c:	31 97       	sbiw	r30, 0x01	; 1
    132e:	62 e2       	ldi	r22, 0x22	; 34
    1330:	60 83       	st	Z, r22
    pxTopOfStack--;
    *pxTopOfStack = 0x33;
    1332:	31 97       	sbiw	r30, 0x01	; 1
    1334:	23 e3       	ldi	r18, 0x33	; 51
    1336:	20 83       	st	Z, r18

    /*lint -e950 -e611 -e923 Lint doesn't like this much - but nothing I can do about it. */

    /* The start of the task code will be popped off the stack last, so place
    it on first. */
    ulAddress = ( uint32_t ) pxCode;
    1338:	01 2e       	mov	r0, r17
    133a:	00 0c       	add	r0, r0
    133c:	22 0b       	sbc	r18, r18
    133e:	33 0b       	sbc	r19, r19
    *pxTopOfStack = ( StackType_t ) ( ulAddress & ( uint32_t ) 0x000000ff );
    1340:	31 97       	sbiw	r30, 0x01	; 1
    1342:	00 83       	st	Z, r16
    pxTopOfStack--;

    ulAddress >>= 8;
    *pxTopOfStack = ( StackType_t ) ( ulAddress & ( uint32_t ) 0x000000ff );
    1344:	31 97       	sbiw	r30, 0x01	; 1
    1346:	10 83       	st	Z, r17
    pxTopOfStack--;

#ifdef __AVR_3_BYTE_PC__
    ulAddress >>= 8;
    *pxTopOfStack = ( StackType_t ) ( ulAddress & ( uint32_t ) 0x000000ff );
    1348:	31 97       	sbiw	r30, 0x01	; 1
    134a:	20 83       	st	Z, r18

    /* Next simulate the stack as if after a call to portSAVE_CONTEXT().
    portSAVE_CONTEXT places the flags on the stack immediately after r0
    to ensure the interrupts get disabled as soon as possible, and so ensuring
    the stack use is minimal should a context switch interrupt occur. */
    *pxTopOfStack = ( StackType_t ) 0x00;   /* R0 */
    134c:	31 97       	sbiw	r30, 0x01	; 1
    134e:	10 82       	st	Z, r1
    pxTopOfStack--;
    *pxTopOfStack = portFLAGS_INT_ENABLED;
    1350:	31 97       	sbiw	r30, 0x01	; 1
    1352:	20 e8       	ldi	r18, 0x80	; 128
    1354:	20 83       	st	Z, r18
    pxTopOfStack--;

    /* Now the remaining registers.   The compiler expects R1 to be 0. */
    *pxTopOfStack = ( StackType_t ) 0x00;   /* R1 */
    1356:	31 97       	sbiw	r30, 0x01	; 1
    1358:	10 82       	st	Z, r1
    pxTopOfStack--;
    *pxTopOfStack = ( StackType_t ) 0x02;   /* R2 */
    135a:	31 97       	sbiw	r30, 0x01	; 1
    135c:	22 e0       	ldi	r18, 0x02	; 2
    135e:	20 83       	st	Z, r18
    pxTopOfStack--;
    *pxTopOfStack = ( StackType_t ) 0x03;   /* R3 */
    1360:	31 97       	sbiw	r30, 0x01	; 1
    1362:	23 e0       	ldi	r18, 0x03	; 3
    1364:	20 83       	st	Z, r18
    pxTopOfStack--;
    *pxTopOfStack = ( StackType_t ) 0x04;   /* R4 */
    1366:	31 97       	sbiw	r30, 0x01	; 1
    1368:	24 e0       	ldi	r18, 0x04	; 4
    136a:	20 83       	st	Z, r18
    pxTopOfStack--;
    *pxTopOfStack = ( StackType_t ) 0x05;   /* R5 */
    136c:	31 97       	sbiw	r30, 0x01	; 1
    136e:	25 e0       	ldi	r18, 0x05	; 5
    1370:	20 83       	st	Z, r18
    pxTopOfStack--;
    *pxTopOfStack = ( StackType_t ) 0x06;   /* R6 */
    1372:	31 97       	sbiw	r30, 0x01	; 1
    1374:	26 e0       	ldi	r18, 0x06	; 6
    1376:	20 83       	st	Z, r18
    pxTopOfStack--;
    *pxTopOfStack = ( StackType_t ) 0x07;   /* R7 */
    1378:	31 97       	sbiw	r30, 0x01	; 1
    137a:	27 e0       	ldi	r18, 0x07	; 7
    137c:	20 83       	st	Z, r18
    pxTopOfStack--;
    *pxTopOfStack = ( StackType_t ) 0x08;   /* R8 */
    137e:	31 97       	sbiw	r30, 0x01	; 1
    1380:	28 e0       	ldi	r18, 0x08	; 8
    1382:	20 83       	st	Z, r18
    pxTopOfStack--;
    *pxTopOfStack = ( StackType_t ) 0x09;   /* R9 */
    1384:	31 97       	sbiw	r30, 0x01	; 1
    1386:	29 e0       	ldi	r18, 0x09	; 9
    1388:	20 83       	st	Z, r18
    pxTopOfStack--;
    *pxTopOfStack = ( StackType_t ) 0x10;   /* R10 */
    138a:	31 97       	sbiw	r30, 0x01	; 1
    138c:	20 e1       	ldi	r18, 0x10	; 16
    138e:	20 83       	st	Z, r18
    pxTopOfStack--;
    *pxTopOfStack = ( StackType_t ) 0x11;   /* R11 */
    1390:	31 97       	sbiw	r30, 0x01	; 1
    1392:	70 83       	st	Z, r23
    pxTopOfStack--;
    *pxTopOfStack = ( StackType_t ) 0x12;   /* R12 */
    1394:	31 97       	sbiw	r30, 0x01	; 1
    1396:	22 e1       	ldi	r18, 0x12	; 18
    1398:	20 83       	st	Z, r18
    pxTopOfStack--;
    *pxTopOfStack = ( StackType_t ) 0x13;   /* R13 */
    139a:	31 97       	sbiw	r30, 0x01	; 1
    139c:	23 e1       	ldi	r18, 0x13	; 19
    139e:	20 83       	st	Z, r18
    pxTopOfStack--;
    *pxTopOfStack = ( StackType_t ) 0x14;   /* R14 */
    13a0:	31 97       	sbiw	r30, 0x01	; 1
    13a2:	24 e1       	ldi	r18, 0x14	; 20
    13a4:	20 83       	st	Z, r18
    pxTopOfStack--;
    *pxTopOfStack = ( StackType_t ) 0x15;   /* R15 */
    13a6:	31 97       	sbiw	r30, 0x01	; 1
    13a8:	25 e1       	ldi	r18, 0x15	; 21
    13aa:	20 83       	st	Z, r18
    pxTopOfStack--;
    *pxTopOfStack = ( StackType_t ) 0x16;   /* R16 */
    13ac:	31 97       	sbiw	r30, 0x01	; 1
    13ae:	26 e1       	ldi	r18, 0x16	; 22
    13b0:	20 83       	st	Z, r18
    pxTopOfStack--;
    *pxTopOfStack = ( StackType_t ) 0x17;   /* R17 */
    13b2:	31 97       	sbiw	r30, 0x01	; 1
    13b4:	27 e1       	ldi	r18, 0x17	; 23
    13b6:	20 83       	st	Z, r18
    pxTopOfStack--;
    *pxTopOfStack = ( StackType_t ) 0x18;   /* R18 */
    13b8:	31 97       	sbiw	r30, 0x01	; 1
    13ba:	28 e1       	ldi	r18, 0x18	; 24
    13bc:	20 83       	st	Z, r18
    pxTopOfStack--;
    *pxTopOfStack = ( StackType_t ) 0x19;   /* R19 */
    13be:	31 97       	sbiw	r30, 0x01	; 1
    13c0:	29 e1       	ldi	r18, 0x19	; 25
    13c2:	20 83       	st	Z, r18
    pxTopOfStack--;
    *pxTopOfStack = ( StackType_t ) 0x20;   /* R20 */
    13c4:	31 97       	sbiw	r30, 0x01	; 1
    13c6:	20 e2       	ldi	r18, 0x20	; 32
    13c8:	20 83       	st	Z, r18
    pxTopOfStack--;
    *pxTopOfStack = ( StackType_t ) 0x21;   /* R21 */
    13ca:	31 97       	sbiw	r30, 0x01	; 1
    13cc:	21 e2       	ldi	r18, 0x21	; 33
    13ce:	20 83       	st	Z, r18
    pxTopOfStack--;
    *pxTopOfStack = ( StackType_t ) 0x22;   /* R22 */
    13d0:	31 97       	sbiw	r30, 0x01	; 1
    13d2:	60 83       	st	Z, r22
    pxTopOfStack--;
    *pxTopOfStack = ( StackType_t ) 0x23;   /* R23 */
    13d4:	31 97       	sbiw	r30, 0x01	; 1
    13d6:	23 e2       	ldi	r18, 0x23	; 35
    13d8:	20 83       	st	Z, r18
    pxTopOfStack--;

    /* Place the parameter on the stack in the expected location. */
    usAddress = ( uint16_t ) pvParameters;
    *pxTopOfStack = ( StackType_t ) ( usAddress & ( uint32_t ) 0x000000ff );
    13da:	31 97       	sbiw	r30, 0x01	; 1
    13dc:	40 83       	st	Z, r20
    pxTopOfStack--;

    usAddress >>= 8;
    *pxTopOfStack = ( StackType_t ) ( usAddress & ( uint32_t ) 0x000000ff );
    13de:	31 97       	sbiw	r30, 0x01	; 1
    13e0:	50 83       	st	Z, r21
    pxTopOfStack--;

    *pxTopOfStack = ( StackType_t ) 0x26;   /* R26 X */
    13e2:	31 97       	sbiw	r30, 0x01	; 1
    13e4:	26 e2       	ldi	r18, 0x26	; 38
    13e6:	20 83       	st	Z, r18
    pxTopOfStack--;
    *pxTopOfStack = ( StackType_t ) 0x27;   /* R27 */
    13e8:	31 97       	sbiw	r30, 0x01	; 1
    13ea:	27 e2       	ldi	r18, 0x27	; 39
    13ec:	20 83       	st	Z, r18
    pxTopOfStack--;
    *pxTopOfStack = ( StackType_t ) 0x28;   /* R28 Y */
    13ee:	31 97       	sbiw	r30, 0x01	; 1
    13f0:	28 e2       	ldi	r18, 0x28	; 40
    13f2:	20 83       	st	Z, r18
    pxTopOfStack--;
    *pxTopOfStack = ( StackType_t ) 0x29;   /* R29 */
    13f4:	31 97       	sbiw	r30, 0x01	; 1
    13f6:	29 e2       	ldi	r18, 0x29	; 41
    13f8:	20 83       	st	Z, r18
    pxTopOfStack--;
    *pxTopOfStack = ( StackType_t ) 0x30;   /* R30 Z */
    13fa:	31 97       	sbiw	r30, 0x01	; 1
    13fc:	20 e3       	ldi	r18, 0x30	; 48
    13fe:	20 83       	st	Z, r18
    pxTopOfStack--;
    *pxTopOfStack = ( StackType_t ) 0x31;   /* R31 */
    1400:	31 97       	sbiw	r30, 0x01	; 1
    1402:	21 e3       	ldi	r18, 0x31	; 49
    1404:	20 83       	st	Z, r18
    pxTopOfStack--;

    /*lint +e950 +e611 +e923 */

    return pxTopOfStack;
}
    1406:	87 97       	sbiw	r24, 0x27	; 39
    1408:	1f 91       	pop	r17
    140a:	0f 91       	pop	r16
    140c:	08 95       	ret

0000140e <xPortStartScheduler>:
 * Setup timer generate a tick interrupt.
 */
static void prvSetupTimerInterrupt(void)
{
    // disable global interrupt for a moment
    cli();
    140e:	f8 94       	cli

    {
        //enable TC0 clock source, high resolution
        PR.PRPC &= ~(PR_TC0_bm | PR_HIRES_bm);
    1410:	e0 e7       	ldi	r30, 0x70	; 112
    1412:	f0 e0       	ldi	r31, 0x00	; 0
    1414:	83 81       	ldd	r24, Z+3	; 0x03
    1416:	8a 7f       	andi	r24, 0xFA	; 250
    1418:	83 83       	std	Z+3, r24	; 0x03

        //set period of counter
        TCC0.PER = configCPU_CLOCK_HZ / configTICK_RATE_HZ / 1;
    141a:	e0 e0       	ldi	r30, 0x00	; 0
    141c:	f8 e0       	ldi	r31, 0x08	; 8
    141e:	80 e0       	ldi	r24, 0x00	; 0
    1420:	9a ef       	ldi	r25, 0xFA	; 250
    1422:	86 a3       	std	Z+38, r24	; 0x26
    1424:	97 a3       	std	Z+39, r25	; 0x27

        //enable interrupt and set low level
        TCC0.INTCTRLA = TC_OVFINTLVL_LO_gc;
    1426:	91 e0       	ldi	r25, 0x01	; 1
    1428:	96 83       	std	Z+6, r25	; 0x06

        //enable low-level interrupt
        PMIC.CTRL |= PMIC_LOLVLEN_bm;
    142a:	a0 ea       	ldi	r26, 0xA0	; 160
    142c:	b0 e0       	ldi	r27, 0x00	; 0
    142e:	12 96       	adiw	r26, 0x02	; 2
    1430:	8c 91       	ld	r24, X
    1432:	12 97       	sbiw	r26, 0x02	; 2
    1434:	81 60       	ori	r24, 0x01	; 1
    1436:	12 96       	adiw	r26, 0x02	; 2
    1438:	8c 93       	st	X, r24

        //select (start) the clock source
        TCC0.CTRLA = TC_CLKSEL_DIV1_gc;
    143a:	90 83       	st	Z, r25

    }

    // enable global interrupt
    sei();
    143c:	78 94       	sei
{
    /* Setup the hardware to generate the tick. */
    prvSetupTimerInterrupt();

    /* Restore the context of the first task that is going to run. */
    portRESTORE_CONTEXT();
    143e:	a0 91 a9 22 	lds	r26, 0x22A9	; 0x8022a9 <pxCurrentTCB>
    1442:	b0 91 aa 22 	lds	r27, 0x22AA	; 0x8022aa <pxCurrentTCB+0x1>
    1446:	0d 90       	ld	r0, X+
    1448:	0d be       	out	0x3d, r0	; 61
    144a:	0d 90       	ld	r0, X+
    144c:	0e be       	out	0x3e, r0	; 62
    144e:	ff 91       	pop	r31
    1450:	ef 91       	pop	r30
    1452:	df 91       	pop	r29
    1454:	cf 91       	pop	r28
    1456:	bf 91       	pop	r27
    1458:	af 91       	pop	r26
    145a:	9f 91       	pop	r25
    145c:	8f 91       	pop	r24
    145e:	7f 91       	pop	r23
    1460:	6f 91       	pop	r22
    1462:	5f 91       	pop	r21
    1464:	4f 91       	pop	r20
    1466:	3f 91       	pop	r19
    1468:	2f 91       	pop	r18
    146a:	1f 91       	pop	r17
    146c:	0f 91       	pop	r16
    146e:	ff 90       	pop	r15
    1470:	ef 90       	pop	r14
    1472:	df 90       	pop	r13
    1474:	cf 90       	pop	r12
    1476:	bf 90       	pop	r11
    1478:	af 90       	pop	r10
    147a:	9f 90       	pop	r9
    147c:	8f 90       	pop	r8
    147e:	7f 90       	pop	r7
    1480:	6f 90       	pop	r6
    1482:	5f 90       	pop	r5
    1484:	4f 90       	pop	r4
    1486:	3f 90       	pop	r3
    1488:	2f 90       	pop	r2
    148a:	1f 90       	pop	r1
    148c:	0f 90       	pop	r0
    148e:	0f be       	out	0x3f, r0	; 63
    1490:	0f 90       	pop	r0

    /* Simulate a function call end as generated by the compiler.  We will now
    jump to the start of the task the context of which we have just restored. */
    asm volatile ( "ret" );
    1492:	08 95       	ret

    /* Should not get here. */
    return pdTRUE;
}
    1494:	81 e0       	ldi	r24, 0x01	; 1
    1496:	08 95       	ret

00001498 <vPortYield>:
 * can use a naked attribute.
 */
void vPortYield( void ) __attribute__ ( ( naked ) );
void vPortYield( void )
{
    portSAVE_CONTEXT();
    1498:	0f 92       	push	r0
    149a:	0f b6       	in	r0, 0x3f	; 63
    149c:	f8 94       	cli
    149e:	0f 92       	push	r0
    14a0:	1f 92       	push	r1
    14a2:	11 24       	eor	r1, r1
    14a4:	2f 92       	push	r2
    14a6:	3f 92       	push	r3
    14a8:	4f 92       	push	r4
    14aa:	5f 92       	push	r5
    14ac:	6f 92       	push	r6
    14ae:	7f 92       	push	r7
    14b0:	8f 92       	push	r8
    14b2:	9f 92       	push	r9
    14b4:	af 92       	push	r10
    14b6:	bf 92       	push	r11
    14b8:	cf 92       	push	r12
    14ba:	df 92       	push	r13
    14bc:	ef 92       	push	r14
    14be:	ff 92       	push	r15
    14c0:	0f 93       	push	r16
    14c2:	1f 93       	push	r17
    14c4:	2f 93       	push	r18
    14c6:	3f 93       	push	r19
    14c8:	4f 93       	push	r20
    14ca:	5f 93       	push	r21
    14cc:	6f 93       	push	r22
    14ce:	7f 93       	push	r23
    14d0:	8f 93       	push	r24
    14d2:	9f 93       	push	r25
    14d4:	af 93       	push	r26
    14d6:	bf 93       	push	r27
    14d8:	cf 93       	push	r28
    14da:	df 93       	push	r29
    14dc:	ef 93       	push	r30
    14de:	ff 93       	push	r31
    14e0:	a0 91 a9 22 	lds	r26, 0x22A9	; 0x8022a9 <pxCurrentTCB>
    14e4:	b0 91 aa 22 	lds	r27, 0x22AA	; 0x8022aa <pxCurrentTCB+0x1>
    14e8:	0d b6       	in	r0, 0x3d	; 61
    14ea:	0d 92       	st	X+, r0
    14ec:	0e b6       	in	r0, 0x3e	; 62
    14ee:	0d 92       	st	X+, r0
    vTaskSwitchContext();
    14f0:	62 d7       	rcall	.+3780   	; 0x23b6 <vTaskSwitchContext>
    portRESTORE_CONTEXT();
    14f2:	a0 91 a9 22 	lds	r26, 0x22A9	; 0x8022a9 <pxCurrentTCB>
    14f6:	b0 91 aa 22 	lds	r27, 0x22AA	; 0x8022aa <pxCurrentTCB+0x1>
    14fa:	0d 90       	ld	r0, X+
    14fc:	0d be       	out	0x3d, r0	; 61
    14fe:	0d 90       	ld	r0, X+
    1500:	0e be       	out	0x3e, r0	; 62
    1502:	ff 91       	pop	r31
    1504:	ef 91       	pop	r30
    1506:	df 91       	pop	r29
    1508:	cf 91       	pop	r28
    150a:	bf 91       	pop	r27
    150c:	af 91       	pop	r26
    150e:	9f 91       	pop	r25
    1510:	8f 91       	pop	r24
    1512:	7f 91       	pop	r23
    1514:	6f 91       	pop	r22
    1516:	5f 91       	pop	r21
    1518:	4f 91       	pop	r20
    151a:	3f 91       	pop	r19
    151c:	2f 91       	pop	r18
    151e:	1f 91       	pop	r17
    1520:	0f 91       	pop	r16
    1522:	ff 90       	pop	r15
    1524:	ef 90       	pop	r14
    1526:	df 90       	pop	r13
    1528:	cf 90       	pop	r12
    152a:	bf 90       	pop	r11
    152c:	af 90       	pop	r10
    152e:	9f 90       	pop	r9
    1530:	8f 90       	pop	r8
    1532:	7f 90       	pop	r7
    1534:	6f 90       	pop	r6
    1536:	5f 90       	pop	r5
    1538:	4f 90       	pop	r4
    153a:	3f 90       	pop	r3
    153c:	2f 90       	pop	r2
    153e:	1f 90       	pop	r1
    1540:	0f 90       	pop	r0
    1542:	0f be       	out	0x3f, r0	; 63
    1544:	0f 90       	pop	r0

    asm volatile ( "ret" );
    1546:	08 95       	ret

00001548 <__vector_14>:
         * Context switch function used by the tick.  This must be identical to
         * vPortYield() from the call to vTaskSwitchContext() onwards.  The only
         * difference from vPortYield() is the tick count is incremented as the
         * call comes from the tick ISR.
         */
        portSAVE_CONTEXT();
    1548:	0f 92       	push	r0
    154a:	0f b6       	in	r0, 0x3f	; 63
    154c:	f8 94       	cli
    154e:	0f 92       	push	r0
    1550:	1f 92       	push	r1
    1552:	11 24       	eor	r1, r1
    1554:	2f 92       	push	r2
    1556:	3f 92       	push	r3
    1558:	4f 92       	push	r4
    155a:	5f 92       	push	r5
    155c:	6f 92       	push	r6
    155e:	7f 92       	push	r7
    1560:	8f 92       	push	r8
    1562:	9f 92       	push	r9
    1564:	af 92       	push	r10
    1566:	bf 92       	push	r11
    1568:	cf 92       	push	r12
    156a:	df 92       	push	r13
    156c:	ef 92       	push	r14
    156e:	ff 92       	push	r15
    1570:	0f 93       	push	r16
    1572:	1f 93       	push	r17
    1574:	2f 93       	push	r18
    1576:	3f 93       	push	r19
    1578:	4f 93       	push	r20
    157a:	5f 93       	push	r21
    157c:	6f 93       	push	r22
    157e:	7f 93       	push	r23
    1580:	8f 93       	push	r24
    1582:	9f 93       	push	r25
    1584:	af 93       	push	r26
    1586:	bf 93       	push	r27
    1588:	cf 93       	push	r28
    158a:	df 93       	push	r29
    158c:	ef 93       	push	r30
    158e:	ff 93       	push	r31
    1590:	a0 91 a9 22 	lds	r26, 0x22A9	; 0x8022a9 <pxCurrentTCB>
    1594:	b0 91 aa 22 	lds	r27, 0x22AA	; 0x8022aa <pxCurrentTCB+0x1>
    1598:	0d b6       	in	r0, 0x3d	; 61
    159a:	0d 92       	st	X+, r0
    159c:	0e b6       	in	r0, 0x3e	; 62
    159e:	0d 92       	st	X+, r0
        if( xTaskIncrementTick() != pdFALSE )
    15a0:	07 d5       	rcall	.+2574   	; 0x1fb0 <xTaskIncrementTick>
    15a2:	81 11       	cpse	r24, r1
        {
            vTaskSwitchContext();
    15a4:	08 d7       	rcall	.+3600   	; 0x23b6 <vTaskSwitchContext>
    15a6:	a0 91 a9 22 	lds	r26, 0x22A9	; 0x8022a9 <pxCurrentTCB>
        }
        portRESTORE_CONTEXT();
    15aa:	b0 91 aa 22 	lds	r27, 0x22AA	; 0x8022aa <pxCurrentTCB+0x1>
    15ae:	0d 90       	ld	r0, X+
    15b0:	0d be       	out	0x3d, r0	; 61
    15b2:	0d 90       	ld	r0, X+
    15b4:	0e be       	out	0x3e, r0	; 62
    15b6:	ff 91       	pop	r31
    15b8:	ef 91       	pop	r30
    15ba:	df 91       	pop	r29
    15bc:	cf 91       	pop	r28
    15be:	bf 91       	pop	r27
    15c0:	af 91       	pop	r26
    15c2:	9f 91       	pop	r25
    15c4:	8f 91       	pop	r24
    15c6:	7f 91       	pop	r23
    15c8:	6f 91       	pop	r22
    15ca:	5f 91       	pop	r21
    15cc:	4f 91       	pop	r20
    15ce:	3f 91       	pop	r19
    15d0:	2f 91       	pop	r18
    15d2:	1f 91       	pop	r17
    15d4:	0f 91       	pop	r16
    15d6:	ff 90       	pop	r15
    15d8:	ef 90       	pop	r14
    15da:	df 90       	pop	r13
    15dc:	cf 90       	pop	r12
    15de:	bf 90       	pop	r11
    15e0:	af 90       	pop	r10
    15e2:	9f 90       	pop	r9
    15e4:	8f 90       	pop	r8
    15e6:	7f 90       	pop	r7
    15e8:	6f 90       	pop	r6
    15ea:	5f 90       	pop	r5
    15ec:	4f 90       	pop	r4
    15ee:	3f 90       	pop	r3
    15f0:	2f 90       	pop	r2
    15f2:	1f 90       	pop	r1
    15f4:	0f 90       	pop	r0
    15f6:	0f be       	out	0x3f, r0	; 63
    15f8:	0f 90       	pop	r0
    15fa:	18 95       	reti

000015fc <pvPortMalloc>:
#endif

/*-----------------------------------------------------------*/

void * pvPortMalloc( size_t xWantedSize )
{
    15fc:	cf 93       	push	r28
    15fe:	df 93       	push	r29
    1600:	ec 01       	movw	r28, r24
    void * pvReturn;

    vTaskSuspendAll();
    1602:	c6 d4       	rcall	.+2444   	; 0x1f90 <vTaskSuspendAll>
    {
        pvReturn = malloc( xWantedSize );
    1604:	ce 01       	movw	r24, r28
    1606:	0e 94 eb 17 	call	0x2fd6	; 0x2fd6 <malloc>
        traceMALLOC( pvReturn, xWantedSize );
    }
    ( void ) xTaskResumeAll();
    160a:	ec 01       	movw	r28, r24
    160c:	e9 d5       	rcall	.+3026   	; 0x21e0 <xTaskResumeAll>
            }
        }
    #endif

    return pvReturn;
}
    160e:	ce 01       	movw	r24, r28
    1610:	df 91       	pop	r29
    1612:	cf 91       	pop	r28
    1614:	08 95       	ret

00001616 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void * pv )
{
    1616:	cf 93       	push	r28
    1618:	df 93       	push	r29
    if( pv )
    161a:	00 97       	sbiw	r24, 0x00	; 0
    161c:	31 f0       	breq	.+12     	; 0x162a <vPortFree+0x14>
    161e:	ec 01       	movw	r28, r24
    {
        vTaskSuspendAll();
    1620:	b7 d4       	rcall	.+2414   	; 0x1f90 <vTaskSuspendAll>
        {
            free( pv );
    1622:	ce 01       	movw	r24, r28
    1624:	0e 94 83 18 	call	0x3106	; 0x3106 <free>
            traceFREE( pv, 0 );
        }
        ( void ) xTaskResumeAll();
    1628:	db d5       	rcall	.+2998   	; 0x21e0 <xTaskResumeAll>
    }
}
    162a:	df 91       	pop	r29
    162c:	cf 91       	pop	r28
    162e:	08 95       	ret

00001630 <prvIsQueueEmpty>:
    {
        xReturn = pdFALSE;
    }

    return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
    1630:	0f b6       	in	r0, 0x3f	; 63
    1632:	f8 94       	cli
    1634:	0f 92       	push	r0
    1636:	fc 01       	movw	r30, r24
    1638:	92 8d       	ldd	r25, Z+26	; 0x1a
    163a:	0f 90       	pop	r0
    163c:	0f be       	out	0x3f, r0	; 63
    163e:	81 e0       	ldi	r24, 0x01	; 1
    1640:	91 11       	cpse	r25, r1
    1642:	80 e0       	ldi	r24, 0x00	; 0
    1644:	08 95       	ret

00001646 <prvCopyDataToQueue>:
    1646:	0f 93       	push	r16
    1648:	1f 93       	push	r17
    164a:	cf 93       	push	r28
    164c:	df 93       	push	r29
    164e:	ec 01       	movw	r28, r24
    1650:	04 2f       	mov	r16, r20
    1652:	1a 8d       	ldd	r17, Y+26	; 0x1a
    1654:	4c 8d       	ldd	r20, Y+28	; 0x1c
    1656:	44 23       	and	r20, r20
    1658:	b9 f1       	breq	.+110    	; 0x16c8 <prvCopyDataToQueue+0x82>
    165a:	01 11       	cpse	r16, r1
    165c:	16 c0       	rjmp	.+44     	; 0x168a <prvCopyDataToQueue+0x44>
    165e:	50 e0       	ldi	r21, 0x00	; 0
    1660:	8a 81       	ldd	r24, Y+2	; 0x02
    1662:	9b 81       	ldd	r25, Y+3	; 0x03
    1664:	0e 94 0c 19 	call	0x3218	; 0x3218 <memcpy>
    1668:	2c 8d       	ldd	r18, Y+28	; 0x1c
    166a:	8a 81       	ldd	r24, Y+2	; 0x02
    166c:	9b 81       	ldd	r25, Y+3	; 0x03
    166e:	82 0f       	add	r24, r18
    1670:	91 1d       	adc	r25, r1
    1672:	8a 83       	std	Y+2, r24	; 0x02
    1674:	9b 83       	std	Y+3, r25	; 0x03
    1676:	2c 81       	ldd	r18, Y+4	; 0x04
    1678:	3d 81       	ldd	r19, Y+5	; 0x05
    167a:	82 17       	cp	r24, r18
    167c:	93 07       	cpc	r25, r19
    167e:	20 f1       	brcs	.+72     	; 0x16c8 <prvCopyDataToQueue+0x82>
    1680:	88 81       	ld	r24, Y
    1682:	99 81       	ldd	r25, Y+1	; 0x01
    1684:	8a 83       	std	Y+2, r24	; 0x02
    1686:	9b 83       	std	Y+3, r25	; 0x03
    1688:	1f c0       	rjmp	.+62     	; 0x16c8 <prvCopyDataToQueue+0x82>
    168a:	50 e0       	ldi	r21, 0x00	; 0
    168c:	8e 81       	ldd	r24, Y+6	; 0x06
    168e:	9f 81       	ldd	r25, Y+7	; 0x07
    1690:	0e 94 0c 19 	call	0x3218	; 0x3218 <memcpy>
    1694:	8c 8d       	ldd	r24, Y+28	; 0x1c
    1696:	90 e0       	ldi	r25, 0x00	; 0
    1698:	91 95       	neg	r25
    169a:	81 95       	neg	r24
    169c:	91 09       	sbc	r25, r1
    169e:	2e 81       	ldd	r18, Y+6	; 0x06
    16a0:	3f 81       	ldd	r19, Y+7	; 0x07
    16a2:	28 0f       	add	r18, r24
    16a4:	39 1f       	adc	r19, r25
    16a6:	2e 83       	std	Y+6, r18	; 0x06
    16a8:	3f 83       	std	Y+7, r19	; 0x07
    16aa:	48 81       	ld	r20, Y
    16ac:	59 81       	ldd	r21, Y+1	; 0x01
    16ae:	24 17       	cp	r18, r20
    16b0:	35 07       	cpc	r19, r21
    16b2:	30 f4       	brcc	.+12     	; 0x16c0 <prvCopyDataToQueue+0x7a>
    16b4:	2c 81       	ldd	r18, Y+4	; 0x04
    16b6:	3d 81       	ldd	r19, Y+5	; 0x05
    16b8:	82 0f       	add	r24, r18
    16ba:	93 1f       	adc	r25, r19
    16bc:	8e 83       	std	Y+6, r24	; 0x06
    16be:	9f 83       	std	Y+7, r25	; 0x07
    16c0:	02 30       	cpi	r16, 0x02	; 2
    16c2:	11 f4       	brne	.+4      	; 0x16c8 <prvCopyDataToQueue+0x82>
    16c4:	11 11       	cpse	r17, r1
    16c6:	11 50       	subi	r17, 0x01	; 1
    16c8:	1f 5f       	subi	r17, 0xFF	; 255
    16ca:	1a 8f       	std	Y+26, r17	; 0x1a
    16cc:	80 e0       	ldi	r24, 0x00	; 0
    16ce:	df 91       	pop	r29
    16d0:	cf 91       	pop	r28
    16d2:	1f 91       	pop	r17
    16d4:	0f 91       	pop	r16
    16d6:	08 95       	ret

000016d8 <prvCopyDataFromQueue>:
    16d8:	fc 01       	movw	r30, r24
    16da:	44 8d       	ldd	r20, Z+28	; 0x1c
    16dc:	44 23       	and	r20, r20
    16de:	a9 f0       	breq	.+42     	; 0x170a <prvCopyDataFromQueue+0x32>
    16e0:	50 e0       	ldi	r21, 0x00	; 0
    16e2:	26 81       	ldd	r18, Z+6	; 0x06
    16e4:	37 81       	ldd	r19, Z+7	; 0x07
    16e6:	24 0f       	add	r18, r20
    16e8:	35 1f       	adc	r19, r21
    16ea:	26 83       	std	Z+6, r18	; 0x06
    16ec:	37 83       	std	Z+7, r19	; 0x07
    16ee:	84 81       	ldd	r24, Z+4	; 0x04
    16f0:	95 81       	ldd	r25, Z+5	; 0x05
    16f2:	28 17       	cp	r18, r24
    16f4:	39 07       	cpc	r19, r25
    16f6:	20 f0       	brcs	.+8      	; 0x1700 <prvCopyDataFromQueue+0x28>
    16f8:	80 81       	ld	r24, Z
    16fa:	91 81       	ldd	r25, Z+1	; 0x01
    16fc:	86 83       	std	Z+6, r24	; 0x06
    16fe:	97 83       	std	Z+7, r25	; 0x07
    1700:	cb 01       	movw	r24, r22
    1702:	66 81       	ldd	r22, Z+6	; 0x06
    1704:	77 81       	ldd	r23, Z+7	; 0x07
    1706:	0c 94 0c 19 	jmp	0x3218	; 0x3218 <memcpy>
    170a:	08 95       	ret

0000170c <prvUnlockQueue>:
    170c:	ef 92       	push	r14
    170e:	ff 92       	push	r15
    1710:	0f 93       	push	r16
    1712:	1f 93       	push	r17
    1714:	cf 93       	push	r28
    1716:	8c 01       	movw	r16, r24
    1718:	0f b6       	in	r0, 0x3f	; 63
    171a:	f8 94       	cli
    171c:	0f 92       	push	r0
    171e:	fc 01       	movw	r30, r24
    1720:	c6 8d       	ldd	r28, Z+30	; 0x1e
    1722:	1c 16       	cp	r1, r28
    1724:	9c f4       	brge	.+38     	; 0x174c <prvUnlockQueue+0x40>
    1726:	81 89       	ldd	r24, Z+17	; 0x11
    1728:	81 11       	cpse	r24, r1
    172a:	06 c0       	rjmp	.+12     	; 0x1738 <prvUnlockQueue+0x2c>
    172c:	0f c0       	rjmp	.+30     	; 0x174c <prvUnlockQueue+0x40>
    172e:	f8 01       	movw	r30, r16
    1730:	81 89       	ldd	r24, Z+17	; 0x11
    1732:	81 11       	cpse	r24, r1
    1734:	05 c0       	rjmp	.+10     	; 0x1740 <prvUnlockQueue+0x34>
    1736:	0a c0       	rjmp	.+20     	; 0x174c <prvUnlockQueue+0x40>
    1738:	78 01       	movw	r14, r16
    173a:	f1 e1       	ldi	r31, 0x11	; 17
    173c:	ef 0e       	add	r14, r31
    173e:	f1 1c       	adc	r15, r1
    1740:	c7 01       	movw	r24, r14
    1742:	f8 d6       	rcall	.+3568   	; 0x2534 <xTaskRemoveFromEventList>
    1744:	81 11       	cpse	r24, r1
    1746:	ef d7       	rcall	.+4062   	; 0x2726 <vTaskMissedYield>
    1748:	c1 50       	subi	r28, 0x01	; 1
    174a:	89 f7       	brne	.-30     	; 0x172e <prvUnlockQueue+0x22>
    174c:	8f ef       	ldi	r24, 0xFF	; 255
    174e:	f8 01       	movw	r30, r16
    1750:	86 8f       	std	Z+30, r24	; 0x1e
    1752:	0f 90       	pop	r0
    1754:	0f be       	out	0x3f, r0	; 63
    1756:	0f b6       	in	r0, 0x3f	; 63
    1758:	f8 94       	cli
    175a:	0f 92       	push	r0
    175c:	c5 8d       	ldd	r28, Z+29	; 0x1d
    175e:	1c 16       	cp	r1, r28
    1760:	9c f4       	brge	.+38     	; 0x1788 <prvUnlockQueue+0x7c>
    1762:	80 85       	ldd	r24, Z+8	; 0x08
    1764:	81 11       	cpse	r24, r1
    1766:	06 c0       	rjmp	.+12     	; 0x1774 <prvUnlockQueue+0x68>
    1768:	0f c0       	rjmp	.+30     	; 0x1788 <prvUnlockQueue+0x7c>
    176a:	f8 01       	movw	r30, r16
    176c:	80 85       	ldd	r24, Z+8	; 0x08
    176e:	81 11       	cpse	r24, r1
    1770:	05 c0       	rjmp	.+10     	; 0x177c <prvUnlockQueue+0x70>
    1772:	0a c0       	rjmp	.+20     	; 0x1788 <prvUnlockQueue+0x7c>
    1774:	78 01       	movw	r14, r16
    1776:	f8 e0       	ldi	r31, 0x08	; 8
    1778:	ef 0e       	add	r14, r31
    177a:	f1 1c       	adc	r15, r1
    177c:	c7 01       	movw	r24, r14
    177e:	da d6       	rcall	.+3508   	; 0x2534 <xTaskRemoveFromEventList>
    1780:	81 11       	cpse	r24, r1
    1782:	d1 d7       	rcall	.+4002   	; 0x2726 <vTaskMissedYield>
    1784:	c1 50       	subi	r28, 0x01	; 1
    1786:	89 f7       	brne	.-30     	; 0x176a <prvUnlockQueue+0x5e>
    1788:	8f ef       	ldi	r24, 0xFF	; 255
    178a:	f8 01       	movw	r30, r16
    178c:	85 8f       	std	Z+29, r24	; 0x1d
    178e:	0f 90       	pop	r0
    1790:	0f be       	out	0x3f, r0	; 63
    1792:	cf 91       	pop	r28
    1794:	1f 91       	pop	r17
    1796:	0f 91       	pop	r16
    1798:	ff 90       	pop	r15
    179a:	ef 90       	pop	r14
    179c:	08 95       	ret

0000179e <xQueueGenericReset>:
    179e:	ef 92       	push	r14
    17a0:	ff 92       	push	r15
    17a2:	0f 93       	push	r16
    17a4:	1f 93       	push	r17
    17a6:	cf 93       	push	r28
    17a8:	df 93       	push	r29
    17aa:	fc 01       	movw	r30, r24
    17ac:	36 2f       	mov	r19, r22
    17ae:	89 2b       	or	r24, r25
    17b0:	09 f4       	brne	.+2      	; 0x17b4 <xQueueGenericReset+0x16>
    17b2:	48 c0       	rjmp	.+144    	; 0x1844 <xQueueGenericReset+0xa6>
    17b4:	23 8d       	ldd	r18, Z+27	; 0x1b
    17b6:	22 23       	and	r18, r18
    17b8:	09 f4       	brne	.+2      	; 0x17bc <xQueueGenericReset+0x1e>
    17ba:	46 c0       	rjmp	.+140    	; 0x1848 <xQueueGenericReset+0xaa>
    17bc:	02 2f       	mov	r16, r18
    17be:	10 e0       	ldi	r17, 0x00	; 0
    17c0:	44 8d       	ldd	r20, Z+28	; 0x1c
    17c2:	e4 2e       	mov	r14, r20
    17c4:	f1 2c       	mov	r15, r1
    17c6:	8f ef       	ldi	r24, 0xFF	; 255
    17c8:	9f ef       	ldi	r25, 0xFF	; 255
    17ca:	b8 01       	movw	r22, r16
    17cc:	0e 94 ad 17 	call	0x2f5a	; 0x2f5a <__udivmodhi4>
    17d0:	6e 15       	cp	r22, r14
    17d2:	7f 05       	cpc	r23, r15
    17d4:	08 f4       	brcc	.+2      	; 0x17d8 <xQueueGenericReset+0x3a>
    17d6:	3a c0       	rjmp	.+116    	; 0x184c <xQueueGenericReset+0xae>
    17d8:	ef 01       	movw	r28, r30
    17da:	0f b6       	in	r0, 0x3f	; 63
    17dc:	f8 94       	cli
    17de:	0f 92       	push	r0
    17e0:	60 81       	ld	r22, Z
    17e2:	71 81       	ldd	r23, Z+1	; 0x01
    17e4:	cb 01       	movw	r24, r22
    17e6:	24 9f       	mul	r18, r20
    17e8:	80 0d       	add	r24, r0
    17ea:	91 1d       	adc	r25, r1
    17ec:	11 24       	eor	r1, r1
    17ee:	84 83       	std	Z+4, r24	; 0x04
    17f0:	95 83       	std	Z+5, r25	; 0x05
    17f2:	12 8e       	std	Z+26, r1	; 0x1a
    17f4:	62 83       	std	Z+2, r22	; 0x02
    17f6:	73 83       	std	Z+3, r23	; 0x03
    17f8:	01 50       	subi	r16, 0x01	; 1
    17fa:	11 09       	sbc	r17, r1
    17fc:	0e 9d       	mul	r16, r14
    17fe:	c0 01       	movw	r24, r0
    1800:	0f 9d       	mul	r16, r15
    1802:	90 0d       	add	r25, r0
    1804:	1e 9d       	mul	r17, r14
    1806:	90 0d       	add	r25, r0
    1808:	11 24       	eor	r1, r1
    180a:	86 0f       	add	r24, r22
    180c:	97 1f       	adc	r25, r23
    180e:	86 83       	std	Z+6, r24	; 0x06
    1810:	97 83       	std	Z+7, r25	; 0x07
    1812:	8f ef       	ldi	r24, 0xFF	; 255
    1814:	85 8f       	std	Z+29, r24	; 0x1d
    1816:	86 8f       	std	Z+30, r24	; 0x1e
    1818:	31 11       	cpse	r19, r1
    181a:	0a c0       	rjmp	.+20     	; 0x1830 <xQueueGenericReset+0x92>
    181c:	80 85       	ldd	r24, Z+8	; 0x08
    181e:	88 23       	and	r24, r24
    1820:	69 f0       	breq	.+26     	; 0x183c <xQueueGenericReset+0x9e>
    1822:	cf 01       	movw	r24, r30
    1824:	08 96       	adiw	r24, 0x08	; 8
    1826:	86 d6       	rcall	.+3340   	; 0x2534 <xTaskRemoveFromEventList>
    1828:	88 23       	and	r24, r24
    182a:	41 f0       	breq	.+16     	; 0x183c <xQueueGenericReset+0x9e>
    182c:	35 de       	rcall	.-918    	; 0x1498 <vPortYield>
    182e:	06 c0       	rjmp	.+12     	; 0x183c <xQueueGenericReset+0x9e>
    1830:	cf 01       	movw	r24, r30
    1832:	08 96       	adiw	r24, 0x08	; 8
    1834:	0b dd       	rcall	.-1514   	; 0x124c <vListInitialise>
    1836:	ce 01       	movw	r24, r28
    1838:	41 96       	adiw	r24, 0x11	; 17
    183a:	08 dd       	rcall	.-1520   	; 0x124c <vListInitialise>
    183c:	0f 90       	pop	r0
    183e:	0f be       	out	0x3f, r0	; 63
    1840:	81 e0       	ldi	r24, 0x01	; 1
    1842:	05 c0       	rjmp	.+10     	; 0x184e <xQueueGenericReset+0xb0>
    1844:	80 e0       	ldi	r24, 0x00	; 0
    1846:	03 c0       	rjmp	.+6      	; 0x184e <xQueueGenericReset+0xb0>
    1848:	80 e0       	ldi	r24, 0x00	; 0
    184a:	01 c0       	rjmp	.+2      	; 0x184e <xQueueGenericReset+0xb0>
    184c:	80 e0       	ldi	r24, 0x00	; 0
    184e:	df 91       	pop	r29
    1850:	cf 91       	pop	r28
    1852:	1f 91       	pop	r17
    1854:	0f 91       	pop	r16
    1856:	ff 90       	pop	r15
    1858:	ef 90       	pop	r14
    185a:	08 95       	ret

0000185c <xQueueGenericCreate>:
    185c:	0f 93       	push	r16
    185e:	1f 93       	push	r17
    1860:	cf 93       	push	r28
    1862:	df 93       	push	r29
    1864:	28 2f       	mov	r18, r24
    1866:	36 2f       	mov	r19, r22
    1868:	88 23       	and	r24, r24
    186a:	51 f1       	breq	.+84     	; 0x18c0 <xQueueGenericCreate+0x64>
    186c:	68 2f       	mov	r22, r24
    186e:	70 e0       	ldi	r23, 0x00	; 0
    1870:	8f ef       	ldi	r24, 0xFF	; 255
    1872:	9f ef       	ldi	r25, 0xFF	; 255
    1874:	0e 94 ad 17 	call	0x2f5a	; 0x2f5a <__udivmodhi4>
    1878:	83 2f       	mov	r24, r19
    187a:	90 e0       	ldi	r25, 0x00	; 0
    187c:	68 17       	cp	r22, r24
    187e:	79 07       	cpc	r23, r25
    1880:	10 f1       	brcs	.+68     	; 0x18c6 <xQueueGenericCreate+0x6a>
    1882:	23 9f       	mul	r18, r19
    1884:	c0 01       	movw	r24, r0
    1886:	11 24       	eor	r1, r1
    1888:	81 3e       	cpi	r24, 0xE1	; 225
    188a:	4f ef       	ldi	r20, 0xFF	; 255
    188c:	94 07       	cpc	r25, r20
    188e:	f0 f4       	brcc	.+60     	; 0x18cc <xQueueGenericCreate+0x70>
    1890:	d3 2f       	mov	r29, r19
    1892:	c2 2f       	mov	r28, r18
    1894:	4f 96       	adiw	r24, 0x1f	; 31
    1896:	b2 de       	rcall	.-668    	; 0x15fc <pvPortMalloc>
    1898:	8c 01       	movw	r16, r24
    189a:	00 97       	sbiw	r24, 0x00	; 0
    189c:	c9 f0       	breq	.+50     	; 0x18d0 <xQueueGenericCreate+0x74>
    189e:	d1 11       	cpse	r29, r1
    18a0:	04 c0       	rjmp	.+8      	; 0x18aa <xQueueGenericCreate+0x4e>
    18a2:	fc 01       	movw	r30, r24
    18a4:	80 83       	st	Z, r24
    18a6:	91 83       	std	Z+1, r25	; 0x01
    18a8:	04 c0       	rjmp	.+8      	; 0x18b2 <xQueueGenericCreate+0x56>
    18aa:	4f 96       	adiw	r24, 0x1f	; 31
    18ac:	f8 01       	movw	r30, r16
    18ae:	80 83       	st	Z, r24
    18b0:	91 83       	std	Z+1, r25	; 0x01
    18b2:	f8 01       	movw	r30, r16
    18b4:	c3 8f       	std	Z+27, r28	; 0x1b
    18b6:	d4 8f       	std	Z+28, r29	; 0x1c
    18b8:	61 e0       	ldi	r22, 0x01	; 1
    18ba:	c8 01       	movw	r24, r16
    18bc:	70 df       	rcall	.-288    	; 0x179e <xQueueGenericReset>
    18be:	08 c0       	rjmp	.+16     	; 0x18d0 <xQueueGenericCreate+0x74>
    18c0:	00 e0       	ldi	r16, 0x00	; 0
    18c2:	10 e0       	ldi	r17, 0x00	; 0
    18c4:	05 c0       	rjmp	.+10     	; 0x18d0 <xQueueGenericCreate+0x74>
    18c6:	00 e0       	ldi	r16, 0x00	; 0
    18c8:	10 e0       	ldi	r17, 0x00	; 0
    18ca:	02 c0       	rjmp	.+4      	; 0x18d0 <xQueueGenericCreate+0x74>
    18cc:	00 e0       	ldi	r16, 0x00	; 0
    18ce:	10 e0       	ldi	r17, 0x00	; 0
    18d0:	c8 01       	movw	r24, r16
    18d2:	df 91       	pop	r29
    18d4:	cf 91       	pop	r28
    18d6:	1f 91       	pop	r17
    18d8:	0f 91       	pop	r16
    18da:	08 95       	ret

000018dc <xQueueGenericSend>:
    18dc:	af 92       	push	r10
    18de:	bf 92       	push	r11
    18e0:	cf 92       	push	r12
    18e2:	df 92       	push	r13
    18e4:	ef 92       	push	r14
    18e6:	ff 92       	push	r15
    18e8:	0f 93       	push	r16
    18ea:	1f 93       	push	r17
    18ec:	cf 93       	push	r28
    18ee:	df 93       	push	r29
    18f0:	cd b7       	in	r28, 0x3d	; 61
    18f2:	de b7       	in	r29, 0x3e	; 62
    18f4:	25 97       	sbiw	r28, 0x05	; 5
    18f6:	cd bf       	out	0x3d, r28	; 61
    18f8:	de bf       	out	0x3e, r29	; 62
    18fa:	8c 01       	movw	r16, r24
    18fc:	6b 01       	movw	r12, r22
    18fe:	4c 83       	std	Y+4, r20	; 0x04
    1900:	5d 83       	std	Y+5, r21	; 0x05
    1902:	a2 2e       	mov	r10, r18
    1904:	b1 2c       	mov	r11, r1
    1906:	7c 01       	movw	r14, r24
    1908:	88 e0       	ldi	r24, 0x08	; 8
    190a:	e8 0e       	add	r14, r24
    190c:	f1 1c       	adc	r15, r1
    190e:	0f b6       	in	r0, 0x3f	; 63
    1910:	f8 94       	cli
    1912:	0f 92       	push	r0
    1914:	f8 01       	movw	r30, r16
    1916:	92 8d       	ldd	r25, Z+26	; 0x1a
    1918:	83 8d       	ldd	r24, Z+27	; 0x1b
    191a:	98 17       	cp	r25, r24
    191c:	18 f0       	brcs	.+6      	; 0x1924 <xQueueGenericSend+0x48>
    191e:	f2 e0       	ldi	r31, 0x02	; 2
    1920:	af 12       	cpse	r10, r31
    1922:	15 c0       	rjmp	.+42     	; 0x194e <xQueueGenericSend+0x72>
    1924:	4a 2d       	mov	r20, r10
    1926:	b6 01       	movw	r22, r12
    1928:	c8 01       	movw	r24, r16
    192a:	8d de       	rcall	.-742    	; 0x1646 <prvCopyDataToQueue>
    192c:	f8 01       	movw	r30, r16
    192e:	91 89       	ldd	r25, Z+17	; 0x11
    1930:	99 23       	and	r25, r25
    1932:	39 f0       	breq	.+14     	; 0x1942 <xQueueGenericSend+0x66>
    1934:	c8 01       	movw	r24, r16
    1936:	41 96       	adiw	r24, 0x11	; 17
    1938:	fd d5       	rcall	.+3066   	; 0x2534 <xTaskRemoveFromEventList>
    193a:	88 23       	and	r24, r24
    193c:	21 f0       	breq	.+8      	; 0x1946 <xQueueGenericSend+0x6a>
    193e:	ac dd       	rcall	.-1192   	; 0x1498 <vPortYield>
    1940:	02 c0       	rjmp	.+4      	; 0x1946 <xQueueGenericSend+0x6a>
    1942:	81 11       	cpse	r24, r1
    1944:	a9 dd       	rcall	.-1198   	; 0x1498 <vPortYield>
    1946:	0f 90       	pop	r0
    1948:	0f be       	out	0x3f, r0	; 63
    194a:	81 e0       	ldi	r24, 0x01	; 1
    194c:	46 c0       	rjmp	.+140    	; 0x19da <xQueueGenericSend+0xfe>
    194e:	8c 81       	ldd	r24, Y+4	; 0x04
    1950:	9d 81       	ldd	r25, Y+5	; 0x05
    1952:	89 2b       	or	r24, r25
    1954:	21 f4       	brne	.+8      	; 0x195e <xQueueGenericSend+0x82>
    1956:	0f 90       	pop	r0
    1958:	0f be       	out	0x3f, r0	; 63
    195a:	80 e0       	ldi	r24, 0x00	; 0
    195c:	3e c0       	rjmp	.+124    	; 0x19da <xQueueGenericSend+0xfe>
    195e:	b1 10       	cpse	r11, r1
    1960:	05 c0       	rjmp	.+10     	; 0x196c <xQueueGenericSend+0x90>
    1962:	ce 01       	movw	r24, r28
    1964:	01 96       	adiw	r24, 0x01	; 1
    1966:	a4 d6       	rcall	.+3400   	; 0x26b0 <vTaskInternalSetTimeOutState>
    1968:	bb 24       	eor	r11, r11
    196a:	b3 94       	inc	r11
    196c:	0f 90       	pop	r0
    196e:	0f be       	out	0x3f, r0	; 63
    1970:	0f d3       	rcall	.+1566   	; 0x1f90 <vTaskSuspendAll>
    1972:	0f b6       	in	r0, 0x3f	; 63
    1974:	f8 94       	cli
    1976:	0f 92       	push	r0
    1978:	f8 01       	movw	r30, r16
    197a:	85 8d       	ldd	r24, Z+29	; 0x1d
    197c:	8f 3f       	cpi	r24, 0xFF	; 255
    197e:	09 f4       	brne	.+2      	; 0x1982 <xQueueGenericSend+0xa6>
    1980:	15 8e       	std	Z+29, r1	; 0x1d
    1982:	f8 01       	movw	r30, r16
    1984:	86 8d       	ldd	r24, Z+30	; 0x1e
    1986:	8f 3f       	cpi	r24, 0xFF	; 255
    1988:	09 f4       	brne	.+2      	; 0x198c <xQueueGenericSend+0xb0>
    198a:	16 8e       	std	Z+30, r1	; 0x1e
    198c:	0f 90       	pop	r0
    198e:	0f be       	out	0x3f, r0	; 63
    1990:	be 01       	movw	r22, r28
    1992:	6c 5f       	subi	r22, 0xFC	; 252
    1994:	7f 4f       	sbci	r23, 0xFF	; 255
    1996:	ce 01       	movw	r24, r28
    1998:	01 96       	adiw	r24, 0x01	; 1
    199a:	95 d6       	rcall	.+3370   	; 0x26c6 <xTaskCheckForTimeOut>
    199c:	81 11       	cpse	r24, r1
    199e:	19 c0       	rjmp	.+50     	; 0x19d2 <xQueueGenericSend+0xf6>
    19a0:	0f b6       	in	r0, 0x3f	; 63
    19a2:	f8 94       	cli
    19a4:	0f 92       	push	r0
    19a6:	f8 01       	movw	r30, r16
    19a8:	92 8d       	ldd	r25, Z+26	; 0x1a
    19aa:	0f 90       	pop	r0
    19ac:	0f be       	out	0x3f, r0	; 63
    19ae:	83 8d       	ldd	r24, Z+27	; 0x1b
    19b0:	98 13       	cpse	r25, r24
    19b2:	0b c0       	rjmp	.+22     	; 0x19ca <xQueueGenericSend+0xee>
    19b4:	6c 81       	ldd	r22, Y+4	; 0x04
    19b6:	7d 81       	ldd	r23, Y+5	; 0x05
    19b8:	c7 01       	movw	r24, r14
    19ba:	63 d5       	rcall	.+2758   	; 0x2482 <vTaskPlaceOnEventList>
    19bc:	c8 01       	movw	r24, r16
    19be:	a6 de       	rcall	.-692    	; 0x170c <prvUnlockQueue>
    19c0:	0f d4       	rcall	.+2078   	; 0x21e0 <xTaskResumeAll>
    19c2:	81 11       	cpse	r24, r1
    19c4:	a4 cf       	rjmp	.-184    	; 0x190e <xQueueGenericSend+0x32>
    19c6:	68 dd       	rcall	.-1328   	; 0x1498 <vPortYield>
    19c8:	a2 cf       	rjmp	.-188    	; 0x190e <xQueueGenericSend+0x32>
    19ca:	c8 01       	movw	r24, r16
    19cc:	9f de       	rcall	.-706    	; 0x170c <prvUnlockQueue>
    19ce:	08 d4       	rcall	.+2064   	; 0x21e0 <xTaskResumeAll>
    19d0:	9e cf       	rjmp	.-196    	; 0x190e <xQueueGenericSend+0x32>
    19d2:	c8 01       	movw	r24, r16
    19d4:	9b de       	rcall	.-714    	; 0x170c <prvUnlockQueue>
    19d6:	04 d4       	rcall	.+2056   	; 0x21e0 <xTaskResumeAll>
    19d8:	80 e0       	ldi	r24, 0x00	; 0
    19da:	25 96       	adiw	r28, 0x05	; 5
    19dc:	cd bf       	out	0x3d, r28	; 61
    19de:	de bf       	out	0x3e, r29	; 62
    19e0:	df 91       	pop	r29
    19e2:	cf 91       	pop	r28
    19e4:	1f 91       	pop	r17
    19e6:	0f 91       	pop	r16
    19e8:	ff 90       	pop	r15
    19ea:	ef 90       	pop	r14
    19ec:	df 90       	pop	r13
    19ee:	cf 90       	pop	r12
    19f0:	bf 90       	pop	r11
    19f2:	af 90       	pop	r10
    19f4:	08 95       	ret

000019f6 <xQueueReceive>:
    19f6:	af 92       	push	r10
    19f8:	bf 92       	push	r11
    19fa:	cf 92       	push	r12
    19fc:	df 92       	push	r13
    19fe:	ef 92       	push	r14
    1a00:	ff 92       	push	r15
    1a02:	0f 93       	push	r16
    1a04:	1f 93       	push	r17
    1a06:	cf 93       	push	r28
    1a08:	df 93       	push	r29
    1a0a:	cd b7       	in	r28, 0x3d	; 61
    1a0c:	de b7       	in	r29, 0x3e	; 62
    1a0e:	25 97       	sbiw	r28, 0x05	; 5
    1a10:	cd bf       	out	0x3d, r28	; 61
    1a12:	de bf       	out	0x3e, r29	; 62
    1a14:	8c 01       	movw	r16, r24
    1a16:	5b 01       	movw	r10, r22
    1a18:	4c 83       	std	Y+4, r20	; 0x04
    1a1a:	5d 83       	std	Y+5, r21	; 0x05
    1a1c:	e1 2c       	mov	r14, r1
    1a1e:	6c 01       	movw	r12, r24
    1a20:	81 e1       	ldi	r24, 0x11	; 17
    1a22:	c8 0e       	add	r12, r24
    1a24:	d1 1c       	adc	r13, r1
    1a26:	0f b6       	in	r0, 0x3f	; 63
    1a28:	f8 94       	cli
    1a2a:	0f 92       	push	r0
    1a2c:	f8 01       	movw	r30, r16
    1a2e:	f2 8c       	ldd	r15, Z+26	; 0x1a
    1a30:	ff 20       	and	r15, r15
    1a32:	91 f0       	breq	.+36     	; 0x1a58 <xQueueReceive+0x62>
    1a34:	b5 01       	movw	r22, r10
    1a36:	c8 01       	movw	r24, r16
    1a38:	4f de       	rcall	.-866    	; 0x16d8 <prvCopyDataFromQueue>
    1a3a:	fa 94       	dec	r15
    1a3c:	f8 01       	movw	r30, r16
    1a3e:	f2 8e       	std	Z+26, r15	; 0x1a
    1a40:	80 85       	ldd	r24, Z+8	; 0x08
    1a42:	88 23       	and	r24, r24
    1a44:	29 f0       	breq	.+10     	; 0x1a50 <xQueueReceive+0x5a>
    1a46:	c8 01       	movw	r24, r16
    1a48:	08 96       	adiw	r24, 0x08	; 8
    1a4a:	74 d5       	rcall	.+2792   	; 0x2534 <xTaskRemoveFromEventList>
    1a4c:	81 11       	cpse	r24, r1
    1a4e:	24 dd       	rcall	.-1464   	; 0x1498 <vPortYield>
    1a50:	0f 90       	pop	r0
    1a52:	0f be       	out	0x3f, r0	; 63
    1a54:	81 e0       	ldi	r24, 0x01	; 1
    1a56:	45 c0       	rjmp	.+138    	; 0x1ae2 <xQueueReceive+0xec>
    1a58:	8c 81       	ldd	r24, Y+4	; 0x04
    1a5a:	9d 81       	ldd	r25, Y+5	; 0x05
    1a5c:	89 2b       	or	r24, r25
    1a5e:	21 f4       	brne	.+8      	; 0x1a68 <xQueueReceive+0x72>
    1a60:	0f 90       	pop	r0
    1a62:	0f be       	out	0x3f, r0	; 63
    1a64:	80 e0       	ldi	r24, 0x00	; 0
    1a66:	3d c0       	rjmp	.+122    	; 0x1ae2 <xQueueReceive+0xec>
    1a68:	e1 10       	cpse	r14, r1
    1a6a:	05 c0       	rjmp	.+10     	; 0x1a76 <xQueueReceive+0x80>
    1a6c:	ce 01       	movw	r24, r28
    1a6e:	01 96       	adiw	r24, 0x01	; 1
    1a70:	1f d6       	rcall	.+3134   	; 0x26b0 <vTaskInternalSetTimeOutState>
    1a72:	ee 24       	eor	r14, r14
    1a74:	e3 94       	inc	r14
    1a76:	0f 90       	pop	r0
    1a78:	0f be       	out	0x3f, r0	; 63
    1a7a:	8a d2       	rcall	.+1300   	; 0x1f90 <vTaskSuspendAll>
    1a7c:	0f b6       	in	r0, 0x3f	; 63
    1a7e:	f8 94       	cli
    1a80:	0f 92       	push	r0
    1a82:	f8 01       	movw	r30, r16
    1a84:	85 8d       	ldd	r24, Z+29	; 0x1d
    1a86:	8f 3f       	cpi	r24, 0xFF	; 255
    1a88:	09 f4       	brne	.+2      	; 0x1a8c <xQueueReceive+0x96>
    1a8a:	15 8e       	std	Z+29, r1	; 0x1d
    1a8c:	f8 01       	movw	r30, r16
    1a8e:	86 8d       	ldd	r24, Z+30	; 0x1e
    1a90:	8f 3f       	cpi	r24, 0xFF	; 255
    1a92:	09 f4       	brne	.+2      	; 0x1a96 <xQueueReceive+0xa0>
    1a94:	16 8e       	std	Z+30, r1	; 0x1e
    1a96:	0f 90       	pop	r0
    1a98:	0f be       	out	0x3f, r0	; 63
    1a9a:	be 01       	movw	r22, r28
    1a9c:	6c 5f       	subi	r22, 0xFC	; 252
    1a9e:	7f 4f       	sbci	r23, 0xFF	; 255
    1aa0:	ce 01       	movw	r24, r28
    1aa2:	01 96       	adiw	r24, 0x01	; 1
    1aa4:	10 d6       	rcall	.+3104   	; 0x26c6 <xTaskCheckForTimeOut>
    1aa6:	81 11       	cpse	r24, r1
    1aa8:	13 c0       	rjmp	.+38     	; 0x1ad0 <xQueueReceive+0xda>
    1aaa:	c8 01       	movw	r24, r16
    1aac:	c1 dd       	rcall	.-1150   	; 0x1630 <prvIsQueueEmpty>
    1aae:	88 23       	and	r24, r24
    1ab0:	59 f0       	breq	.+22     	; 0x1ac8 <xQueueReceive+0xd2>
    1ab2:	6c 81       	ldd	r22, Y+4	; 0x04
    1ab4:	7d 81       	ldd	r23, Y+5	; 0x05
    1ab6:	c6 01       	movw	r24, r12
    1ab8:	e4 d4       	rcall	.+2504   	; 0x2482 <vTaskPlaceOnEventList>
    1aba:	c8 01       	movw	r24, r16
    1abc:	27 de       	rcall	.-946    	; 0x170c <prvUnlockQueue>
    1abe:	90 d3       	rcall	.+1824   	; 0x21e0 <xTaskResumeAll>
    1ac0:	81 11       	cpse	r24, r1
    1ac2:	b1 cf       	rjmp	.-158    	; 0x1a26 <xQueueReceive+0x30>
    1ac4:	e9 dc       	rcall	.-1582   	; 0x1498 <vPortYield>
    1ac6:	af cf       	rjmp	.-162    	; 0x1a26 <xQueueReceive+0x30>
    1ac8:	c8 01       	movw	r24, r16
    1aca:	20 de       	rcall	.-960    	; 0x170c <prvUnlockQueue>
    1acc:	89 d3       	rcall	.+1810   	; 0x21e0 <xTaskResumeAll>
    1ace:	ab cf       	rjmp	.-170    	; 0x1a26 <xQueueReceive+0x30>
    1ad0:	c8 01       	movw	r24, r16
    1ad2:	1c de       	rcall	.-968    	; 0x170c <prvUnlockQueue>
    1ad4:	85 d3       	rcall	.+1802   	; 0x21e0 <xTaskResumeAll>
    1ad6:	c8 01       	movw	r24, r16
    1ad8:	ab dd       	rcall	.-1194   	; 0x1630 <prvIsQueueEmpty>
    1ada:	88 23       	and	r24, r24
    1adc:	09 f4       	brne	.+2      	; 0x1ae0 <xQueueReceive+0xea>
    1ade:	a3 cf       	rjmp	.-186    	; 0x1a26 <xQueueReceive+0x30>
    1ae0:	80 e0       	ldi	r24, 0x00	; 0
    1ae2:	25 96       	adiw	r28, 0x05	; 5
    1ae4:	cd bf       	out	0x3d, r28	; 61
    1ae6:	de bf       	out	0x3e, r29	; 62
    1ae8:	df 91       	pop	r29
    1aea:	cf 91       	pop	r28
    1aec:	1f 91       	pop	r17
    1aee:	0f 91       	pop	r16
    1af0:	ff 90       	pop	r15
    1af2:	ef 90       	pop	r14
    1af4:	df 90       	pop	r13
    1af6:	cf 90       	pop	r12
    1af8:	bf 90       	pop	r11
    1afa:	af 90       	pop	r10
    1afc:	08 95       	ret

00001afe <xQueueSemaphoreTake>:
    1afe:	df 92       	push	r13
    1b00:	ef 92       	push	r14
    1b02:	ff 92       	push	r15
    1b04:	0f 93       	push	r16
    1b06:	1f 93       	push	r17
    1b08:	cf 93       	push	r28
    1b0a:	df 93       	push	r29
    1b0c:	cd b7       	in	r28, 0x3d	; 61
    1b0e:	de b7       	in	r29, 0x3e	; 62
    1b10:	25 97       	sbiw	r28, 0x05	; 5
    1b12:	cd bf       	out	0x3d, r28	; 61
    1b14:	de bf       	out	0x3e, r29	; 62
    1b16:	8c 01       	movw	r16, r24
    1b18:	6c 83       	std	Y+4, r22	; 0x04
    1b1a:	7d 83       	std	Y+5, r23	; 0x05
    1b1c:	d1 2c       	mov	r13, r1
    1b1e:	7c 01       	movw	r14, r24
    1b20:	81 e1       	ldi	r24, 0x11	; 17
    1b22:	e8 0e       	add	r14, r24
    1b24:	f1 1c       	adc	r15, r1
    1b26:	0f b6       	in	r0, 0x3f	; 63
    1b28:	f8 94       	cli
    1b2a:	0f 92       	push	r0
    1b2c:	f8 01       	movw	r30, r16
    1b2e:	82 8d       	ldd	r24, Z+26	; 0x1a
    1b30:	88 23       	and	r24, r24
    1b32:	71 f0       	breq	.+28     	; 0x1b50 <xQueueSemaphoreTake+0x52>
    1b34:	81 50       	subi	r24, 0x01	; 1
    1b36:	82 8f       	std	Z+26, r24	; 0x1a
    1b38:	80 85       	ldd	r24, Z+8	; 0x08
    1b3a:	88 23       	and	r24, r24
    1b3c:	29 f0       	breq	.+10     	; 0x1b48 <xQueueSemaphoreTake+0x4a>
    1b3e:	c8 01       	movw	r24, r16
    1b40:	08 96       	adiw	r24, 0x08	; 8
    1b42:	f8 d4       	rcall	.+2544   	; 0x2534 <xTaskRemoveFromEventList>
    1b44:	81 11       	cpse	r24, r1
    1b46:	a8 dc       	rcall	.-1712   	; 0x1498 <vPortYield>
    1b48:	0f 90       	pop	r0
    1b4a:	0f be       	out	0x3f, r0	; 63
    1b4c:	81 e0       	ldi	r24, 0x01	; 1
    1b4e:	45 c0       	rjmp	.+138    	; 0x1bda <xQueueSemaphoreTake+0xdc>
    1b50:	8c 81       	ldd	r24, Y+4	; 0x04
    1b52:	9d 81       	ldd	r25, Y+5	; 0x05
    1b54:	89 2b       	or	r24, r25
    1b56:	21 f4       	brne	.+8      	; 0x1b60 <xQueueSemaphoreTake+0x62>
    1b58:	0f 90       	pop	r0
    1b5a:	0f be       	out	0x3f, r0	; 63
    1b5c:	80 e0       	ldi	r24, 0x00	; 0
    1b5e:	3d c0       	rjmp	.+122    	; 0x1bda <xQueueSemaphoreTake+0xdc>
    1b60:	d1 10       	cpse	r13, r1
    1b62:	05 c0       	rjmp	.+10     	; 0x1b6e <xQueueSemaphoreTake+0x70>
    1b64:	ce 01       	movw	r24, r28
    1b66:	01 96       	adiw	r24, 0x01	; 1
    1b68:	a3 d5       	rcall	.+2886   	; 0x26b0 <vTaskInternalSetTimeOutState>
    1b6a:	dd 24       	eor	r13, r13
    1b6c:	d3 94       	inc	r13
    1b6e:	0f 90       	pop	r0
    1b70:	0f be       	out	0x3f, r0	; 63
    1b72:	0e d2       	rcall	.+1052   	; 0x1f90 <vTaskSuspendAll>
    1b74:	0f b6       	in	r0, 0x3f	; 63
    1b76:	f8 94       	cli
    1b78:	0f 92       	push	r0
    1b7a:	f8 01       	movw	r30, r16
    1b7c:	85 8d       	ldd	r24, Z+29	; 0x1d
    1b7e:	8f 3f       	cpi	r24, 0xFF	; 255
    1b80:	09 f4       	brne	.+2      	; 0x1b84 <xQueueSemaphoreTake+0x86>
    1b82:	15 8e       	std	Z+29, r1	; 0x1d
    1b84:	f8 01       	movw	r30, r16
    1b86:	86 8d       	ldd	r24, Z+30	; 0x1e
    1b88:	8f 3f       	cpi	r24, 0xFF	; 255
    1b8a:	09 f4       	brne	.+2      	; 0x1b8e <xQueueSemaphoreTake+0x90>
    1b8c:	16 8e       	std	Z+30, r1	; 0x1e
    1b8e:	0f 90       	pop	r0
    1b90:	0f be       	out	0x3f, r0	; 63
    1b92:	be 01       	movw	r22, r28
    1b94:	6c 5f       	subi	r22, 0xFC	; 252
    1b96:	7f 4f       	sbci	r23, 0xFF	; 255
    1b98:	ce 01       	movw	r24, r28
    1b9a:	01 96       	adiw	r24, 0x01	; 1
    1b9c:	94 d5       	rcall	.+2856   	; 0x26c6 <xTaskCheckForTimeOut>
    1b9e:	81 11       	cpse	r24, r1
    1ba0:	13 c0       	rjmp	.+38     	; 0x1bc8 <xQueueSemaphoreTake+0xca>
    1ba2:	c8 01       	movw	r24, r16
    1ba4:	45 dd       	rcall	.-1398   	; 0x1630 <prvIsQueueEmpty>
    1ba6:	88 23       	and	r24, r24
    1ba8:	59 f0       	breq	.+22     	; 0x1bc0 <xQueueSemaphoreTake+0xc2>
    1baa:	6c 81       	ldd	r22, Y+4	; 0x04
    1bac:	7d 81       	ldd	r23, Y+5	; 0x05
    1bae:	c7 01       	movw	r24, r14
    1bb0:	68 d4       	rcall	.+2256   	; 0x2482 <vTaskPlaceOnEventList>
    1bb2:	c8 01       	movw	r24, r16
    1bb4:	ab dd       	rcall	.-1194   	; 0x170c <prvUnlockQueue>
    1bb6:	14 d3       	rcall	.+1576   	; 0x21e0 <xTaskResumeAll>
    1bb8:	81 11       	cpse	r24, r1
    1bba:	b5 cf       	rjmp	.-150    	; 0x1b26 <xQueueSemaphoreTake+0x28>
    1bbc:	6d dc       	rcall	.-1830   	; 0x1498 <vPortYield>
    1bbe:	b3 cf       	rjmp	.-154    	; 0x1b26 <xQueueSemaphoreTake+0x28>
    1bc0:	c8 01       	movw	r24, r16
    1bc2:	a4 dd       	rcall	.-1208   	; 0x170c <prvUnlockQueue>
    1bc4:	0d d3       	rcall	.+1562   	; 0x21e0 <xTaskResumeAll>
    1bc6:	af cf       	rjmp	.-162    	; 0x1b26 <xQueueSemaphoreTake+0x28>
    1bc8:	c8 01       	movw	r24, r16
    1bca:	a0 dd       	rcall	.-1216   	; 0x170c <prvUnlockQueue>
    1bcc:	09 d3       	rcall	.+1554   	; 0x21e0 <xTaskResumeAll>
    1bce:	c8 01       	movw	r24, r16
    1bd0:	2f dd       	rcall	.-1442   	; 0x1630 <prvIsQueueEmpty>
    1bd2:	88 23       	and	r24, r24
    1bd4:	09 f4       	brne	.+2      	; 0x1bd8 <xQueueSemaphoreTake+0xda>
    1bd6:	a7 cf       	rjmp	.-178    	; 0x1b26 <xQueueSemaphoreTake+0x28>
    1bd8:	80 e0       	ldi	r24, 0x00	; 0
    1bda:	25 96       	adiw	r28, 0x05	; 5
    1bdc:	cd bf       	out	0x3d, r28	; 61
    1bde:	de bf       	out	0x3e, r29	; 62
    1be0:	df 91       	pop	r29
    1be2:	cf 91       	pop	r28
    1be4:	1f 91       	pop	r17
    1be6:	0f 91       	pop	r16
    1be8:	ff 90       	pop	r15
    1bea:	ef 90       	pop	r14
    1bec:	df 90       	pop	r13
    1bee:	08 95       	ret

00001bf0 <vQueueWaitForMessageRestricted>:
#if ( configUSE_TIMERS == 1 )

    void vQueueWaitForMessageRestricted( QueueHandle_t xQueue,
                                         TickType_t xTicksToWait,
                                         const BaseType_t xWaitIndefinitely )
    {
    1bf0:	cf 93       	push	r28
    1bf2:	df 93       	push	r29
    1bf4:	ec 01       	movw	r28, r24
         *  will not actually cause the task to block, just place it on a blocked
         *  list.  It will not block until the scheduler is unlocked - at which
         *  time a yield will be performed.  If an item is added to the queue while
         *  the queue is locked, and the calling task blocks on the queue, then the
         *  calling task will be immediately unblocked when the queue is unlocked. */
        prvLockQueue( pxQueue );
    1bf6:	0f b6       	in	r0, 0x3f	; 63
    1bf8:	f8 94       	cli
    1bfa:	0f 92       	push	r0
    1bfc:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1bfe:	8f 3f       	cpi	r24, 0xFF	; 255
    1c00:	09 f4       	brne	.+2      	; 0x1c04 <vQueueWaitForMessageRestricted+0x14>
    1c02:	1d 8e       	std	Y+29, r1	; 0x1d
    1c04:	8e 8d       	ldd	r24, Y+30	; 0x1e
    1c06:	8f 3f       	cpi	r24, 0xFF	; 255
    1c08:	09 f4       	brne	.+2      	; 0x1c0c <vQueueWaitForMessageRestricted+0x1c>
    1c0a:	1e 8e       	std	Y+30, r1	; 0x1e
    1c0c:	0f 90       	pop	r0
    1c0e:	0f be       	out	0x3f, r0	; 63

        if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
    1c10:	8a 8d       	ldd	r24, Y+26	; 0x1a
    1c12:	81 11       	cpse	r24, r1
    1c14:	03 c0       	rjmp	.+6      	; 0x1c1c <vQueueWaitForMessageRestricted+0x2c>
        {
            /* There is nothing in the queue, block for the specified period. */
            vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
    1c16:	ce 01       	movw	r24, r28
    1c18:	41 96       	adiw	r24, 0x11	; 17
    1c1a:	44 d4       	rcall	.+2184   	; 0x24a4 <vTaskPlaceOnEventListRestricted>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        prvUnlockQueue( pxQueue );
    1c1c:	ce 01       	movw	r24, r28
    1c1e:	76 dd       	rcall	.-1300   	; 0x170c <prvUnlockQueue>
    }
    1c20:	df 91       	pop	r29
    1c22:	cf 91       	pop	r28
    1c24:	08 95       	ret

00001c26 <prvResetNextTaskUnblockTime>:
    taskENTER_CRITICAL();
    {
        pxTimeOut->xOverflowCount = xNumOfOverflows;
        pxTimeOut->xTimeOnEntering = xTickCount;
    }
    taskEXIT_CRITICAL();
    1c26:	e0 91 68 22 	lds	r30, 0x2268	; 0x802268 <pxDelayedTaskList>
    1c2a:	f0 91 69 22 	lds	r31, 0x2269	; 0x802269 <pxDelayedTaskList+0x1>
    1c2e:	80 81       	ld	r24, Z
    1c30:	81 11       	cpse	r24, r1
    1c32:	07 c0       	rjmp	.+14     	; 0x1c42 <prvResetNextTaskUnblockTime+0x1c>
    1c34:	8f ef       	ldi	r24, 0xFF	; 255
    1c36:	9f ef       	ldi	r25, 0xFF	; 255
    1c38:	80 93 51 22 	sts	0x2251, r24	; 0x802251 <xNextTaskUnblockTime>
    1c3c:	90 93 52 22 	sts	0x2252, r25	; 0x802252 <xNextTaskUnblockTime+0x1>
    1c40:	08 95       	ret
    1c42:	e0 91 68 22 	lds	r30, 0x2268	; 0x802268 <pxDelayedTaskList>
    1c46:	f0 91 69 22 	lds	r31, 0x2269	; 0x802269 <pxDelayedTaskList+0x1>
    1c4a:	05 80       	ldd	r0, Z+5	; 0x05
    1c4c:	f6 81       	ldd	r31, Z+6	; 0x06
    1c4e:	e0 2d       	mov	r30, r0
    1c50:	80 81       	ld	r24, Z
    1c52:	91 81       	ldd	r25, Z+1	; 0x01
    1c54:	80 93 51 22 	sts	0x2251, r24	; 0x802251 <xNextTaskUnblockTime>
    1c58:	90 93 52 22 	sts	0x2252, r25	; 0x802252 <xNextTaskUnblockTime+0x1>
    1c5c:	08 95       	ret

00001c5e <prvIdleTask>:
    1c5e:	cc e7       	ldi	r28, 0x7C	; 124
    1c60:	d2 e2       	ldi	r29, 0x22	; 34
    1c62:	88 81       	ld	r24, Y
    1c64:	82 30       	cpi	r24, 0x02	; 2
    1c66:	e8 f3       	brcs	.-6      	; 0x1c62 <prvIdleTask+0x4>
    1c68:	17 dc       	rcall	.-2002   	; 0x1498 <vPortYield>
    1c6a:	fb cf       	rjmp	.-10     	; 0x1c62 <prvIdleTask+0x4>

00001c6c <prvAddCurrentTaskToDelayedList>:
    1c6c:	0f 93       	push	r16
    1c6e:	1f 93       	push	r17
    1c70:	cf 93       	push	r28
    1c72:	df 93       	push	r29
    1c74:	ec 01       	movw	r28, r24
    1c76:	00 91 5a 22 	lds	r16, 0x225A	; 0x80225a <xTickCount>
    1c7a:	10 91 5b 22 	lds	r17, 0x225B	; 0x80225b <xTickCount+0x1>
    1c7e:	80 91 a9 22 	lds	r24, 0x22A9	; 0x8022a9 <pxCurrentTCB>
    1c82:	90 91 aa 22 	lds	r25, 0x22AA	; 0x8022aa <pxCurrentTCB+0x1>
    1c86:	02 96       	adiw	r24, 0x02	; 2
    1c88:	24 db       	rcall	.-2488   	; 0x12d2 <uxListRemove>
    1c8a:	c0 0f       	add	r28, r16
    1c8c:	d1 1f       	adc	r29, r17
    1c8e:	e0 91 a9 22 	lds	r30, 0x22A9	; 0x8022a9 <pxCurrentTCB>
    1c92:	f0 91 aa 22 	lds	r31, 0x22AA	; 0x8022aa <pxCurrentTCB+0x1>
    1c96:	c2 83       	std	Z+2, r28	; 0x02
    1c98:	d3 83       	std	Z+3, r29	; 0x03
    1c9a:	c0 17       	cp	r28, r16
    1c9c:	d1 07       	cpc	r29, r17
    1c9e:	60 f4       	brcc	.+24     	; 0x1cb8 <prvAddCurrentTaskToDelayedList+0x4c>
    1ca0:	60 91 a9 22 	lds	r22, 0x22A9	; 0x8022a9 <pxCurrentTCB>
    1ca4:	70 91 aa 22 	lds	r23, 0x22AA	; 0x8022aa <pxCurrentTCB+0x1>
    1ca8:	80 91 66 22 	lds	r24, 0x2266	; 0x802266 <pxOverflowDelayedTaskList>
    1cac:	90 91 67 22 	lds	r25, 0x2267	; 0x802267 <pxOverflowDelayedTaskList+0x1>
    1cb0:	6e 5f       	subi	r22, 0xFE	; 254
    1cb2:	7f 4f       	sbci	r23, 0xFF	; 255
    1cb4:	dd da       	rcall	.-2630   	; 0x1270 <vListInsert>
    1cb6:	16 c0       	rjmp	.+44     	; 0x1ce4 <prvAddCurrentTaskToDelayedList+0x78>
    1cb8:	60 91 a9 22 	lds	r22, 0x22A9	; 0x8022a9 <pxCurrentTCB>
    1cbc:	70 91 aa 22 	lds	r23, 0x22AA	; 0x8022aa <pxCurrentTCB+0x1>
    1cc0:	80 91 68 22 	lds	r24, 0x2268	; 0x802268 <pxDelayedTaskList>
    1cc4:	90 91 69 22 	lds	r25, 0x2269	; 0x802269 <pxDelayedTaskList+0x1>
    1cc8:	6e 5f       	subi	r22, 0xFE	; 254
    1cca:	7f 4f       	sbci	r23, 0xFF	; 255
    1ccc:	d1 da       	rcall	.-2654   	; 0x1270 <vListInsert>
    1cce:	80 91 51 22 	lds	r24, 0x2251	; 0x802251 <xNextTaskUnblockTime>
    1cd2:	90 91 52 22 	lds	r25, 0x2252	; 0x802252 <xNextTaskUnblockTime+0x1>
    1cd6:	c8 17       	cp	r28, r24
    1cd8:	d9 07       	cpc	r29, r25
    1cda:	20 f4       	brcc	.+8      	; 0x1ce4 <prvAddCurrentTaskToDelayedList+0x78>
    1cdc:	c0 93 51 22 	sts	0x2251, r28	; 0x802251 <xNextTaskUnblockTime>
    1ce0:	d0 93 52 22 	sts	0x2252, r29	; 0x802252 <xNextTaskUnblockTime+0x1>
    1ce4:	df 91       	pop	r29
    1ce6:	cf 91       	pop	r28
    1ce8:	1f 91       	pop	r17
    1cea:	0f 91       	pop	r16
    1cec:	08 95       	ret

00001cee <xTaskCreate>:
    1cee:	4f 92       	push	r4
    1cf0:	5f 92       	push	r5
    1cf2:	6f 92       	push	r6
    1cf4:	7f 92       	push	r7
    1cf6:	8f 92       	push	r8
    1cf8:	9f 92       	push	r9
    1cfa:	af 92       	push	r10
    1cfc:	bf 92       	push	r11
    1cfe:	cf 92       	push	r12
    1d00:	df 92       	push	r13
    1d02:	ef 92       	push	r14
    1d04:	ff 92       	push	r15
    1d06:	0f 93       	push	r16
    1d08:	1f 93       	push	r17
    1d0a:	cf 93       	push	r28
    1d0c:	df 93       	push	r29
    1d0e:	4c 01       	movw	r8, r24
    1d10:	6b 01       	movw	r12, r22
    1d12:	5a 01       	movw	r10, r20
    1d14:	29 01       	movw	r4, r18
    1d16:	ca 01       	movw	r24, r20
    1d18:	71 dc       	rcall	.-1822   	; 0x15fc <pvPortMalloc>
    1d1a:	3c 01       	movw	r6, r24
    1d1c:	89 2b       	or	r24, r25
    1d1e:	09 f4       	brne	.+2      	; 0x1d22 <xTaskCreate+0x34>
    1d20:	f8 c0       	rjmp	.+496    	; 0x1f12 <xTaskCreate+0x224>
    1d22:	86 e2       	ldi	r24, 0x26	; 38
    1d24:	90 e0       	ldi	r25, 0x00	; 0
    1d26:	6a dc       	rcall	.-1836   	; 0x15fc <pvPortMalloc>
    1d28:	ec 01       	movw	r28, r24
    1d2a:	89 2b       	or	r24, r25
    1d2c:	59 f0       	breq	.+22     	; 0x1d44 <xTaskCreate+0x56>
    1d2e:	6f 8a       	std	Y+23, r6	; 0x17
    1d30:	78 8e       	std	Y+24, r7	; 0x18
    1d32:	81 e0       	ldi	r24, 0x01	; 1
    1d34:	a8 1a       	sub	r10, r24
    1d36:	b1 08       	sbc	r11, r1
    1d38:	a6 0c       	add	r10, r6
    1d3a:	b7 1c       	adc	r11, r7
    1d3c:	c1 14       	cp	r12, r1
    1d3e:	d1 04       	cpc	r13, r1
    1d40:	21 f4       	brne	.+8      	; 0x1d4a <xTaskCreate+0x5c>
    1d42:	1f c0       	rjmp	.+62     	; 0x1d82 <xTaskCreate+0x94>
    1d44:	c3 01       	movw	r24, r6
    1d46:	67 dc       	rcall	.-1842   	; 0x1616 <vPortFree>
    1d48:	e4 c0       	rjmp	.+456    	; 0x1f12 <xTaskCreate+0x224>
    1d4a:	d6 01       	movw	r26, r12
    1d4c:	8c 91       	ld	r24, X
    1d4e:	89 8f       	std	Y+25, r24	; 0x19
    1d50:	8c 91       	ld	r24, X
    1d52:	88 23       	and	r24, r24
    1d54:	a1 f0       	breq	.+40     	; 0x1d7e <xTaskCreate+0x90>
    1d56:	ae 01       	movw	r20, r28
    1d58:	46 5e       	subi	r20, 0xE6	; 230
    1d5a:	5f 4f       	sbci	r21, 0xFF	; 255
    1d5c:	f6 01       	movw	r30, r12
    1d5e:	31 96       	adiw	r30, 0x01	; 1
    1d60:	b8 e0       	ldi	r27, 0x08	; 8
    1d62:	cb 0e       	add	r12, r27
    1d64:	d1 1c       	adc	r13, r1
    1d66:	cf 01       	movw	r24, r30
    1d68:	21 91       	ld	r18, Z+
    1d6a:	da 01       	movw	r26, r20
    1d6c:	2d 93       	st	X+, r18
    1d6e:	ad 01       	movw	r20, r26
    1d70:	dc 01       	movw	r26, r24
    1d72:	8c 91       	ld	r24, X
    1d74:	88 23       	and	r24, r24
    1d76:	19 f0       	breq	.+6      	; 0x1d7e <xTaskCreate+0x90>
    1d78:	ce 16       	cp	r12, r30
    1d7a:	df 06       	cpc	r13, r31
    1d7c:	a1 f7       	brne	.-24     	; 0x1d66 <xTaskCreate+0x78>
    1d7e:	18 a2       	std	Y+32, r1	; 0x20
    1d80:	01 c0       	rjmp	.+2      	; 0x1d84 <xTaskCreate+0x96>
    1d82:	19 8e       	std	Y+25, r1	; 0x19
    1d84:	05 30       	cpi	r16, 0x05	; 5
    1d86:	08 f0       	brcs	.+2      	; 0x1d8a <xTaskCreate+0x9c>
    1d88:	04 e0       	ldi	r16, 0x04	; 4
    1d8a:	0e 8b       	std	Y+22, r16	; 0x16
    1d8c:	6e 01       	movw	r12, r28
    1d8e:	b2 e0       	ldi	r27, 0x02	; 2
    1d90:	cb 0e       	add	r12, r27
    1d92:	d1 1c       	adc	r13, r1
    1d94:	c6 01       	movw	r24, r12
    1d96:	68 da       	rcall	.-2864   	; 0x1268 <vListInitialiseItem>
    1d98:	ce 01       	movw	r24, r28
    1d9a:	0c 96       	adiw	r24, 0x0c	; 12
    1d9c:	65 da       	rcall	.-2870   	; 0x1268 <vListInitialiseItem>
    1d9e:	c8 87       	std	Y+8, r28	; 0x08
    1da0:	d9 87       	std	Y+9, r29	; 0x09
    1da2:	85 e0       	ldi	r24, 0x05	; 5
    1da4:	90 e0       	ldi	r25, 0x00	; 0
    1da6:	80 1b       	sub	r24, r16
    1da8:	91 09       	sbc	r25, r1
    1daa:	8c 87       	std	Y+12, r24	; 0x0c
    1dac:	9d 87       	std	Y+13, r25	; 0x0d
    1dae:	ca 8b       	std	Y+18, r28	; 0x12
    1db0:	db 8b       	std	Y+19, r29	; 0x13
    1db2:	84 e0       	ldi	r24, 0x04	; 4
    1db4:	fe 01       	movw	r30, r28
    1db6:	b1 96       	adiw	r30, 0x21	; 33
    1db8:	df 01       	movw	r26, r30
    1dba:	1d 92       	st	X+, r1
    1dbc:	8a 95       	dec	r24
    1dbe:	e9 f7       	brne	.-6      	; 0x1dba <xTaskCreate+0xcc>
    1dc0:	1d a2       	std	Y+37, r1	; 0x25
    1dc2:	a2 01       	movw	r20, r4
    1dc4:	b4 01       	movw	r22, r8
    1dc6:	c5 01       	movw	r24, r10
    1dc8:	ab da       	rcall	.-2730   	; 0x1320 <pxPortInitialiseStack>
    1dca:	88 83       	st	Y, r24
    1dcc:	99 83       	std	Y+1, r25	; 0x01
    1dce:	e1 14       	cp	r14, r1
    1dd0:	f1 04       	cpc	r15, r1
    1dd2:	19 f0       	breq	.+6      	; 0x1dda <xTaskCreate+0xec>
    1dd4:	f7 01       	movw	r30, r14
    1dd6:	c0 83       	st	Z, r28
    1dd8:	d1 83       	std	Z+1, r29	; 0x01
    1dda:	0f b6       	in	r0, 0x3f	; 63
    1ddc:	f8 94       	cli
    1dde:	0f 92       	push	r0
    1de0:	80 91 5c 22 	lds	r24, 0x225C	; 0x80225c <uxCurrentNumberOfTasks>
    1de4:	8f 5f       	subi	r24, 0xFF	; 255
    1de6:	80 93 5c 22 	sts	0x225C, r24	; 0x80225c <uxCurrentNumberOfTasks>
    1dea:	80 91 a9 22 	lds	r24, 0x22A9	; 0x8022a9 <pxCurrentTCB>
    1dee:	90 91 aa 22 	lds	r25, 0x22AA	; 0x8022aa <pxCurrentTCB+0x1>
    1df2:	89 2b       	or	r24, r25
    1df4:	69 f5       	brne	.+90     	; 0x1e50 <xTaskCreate+0x162>
    1df6:	c0 93 a9 22 	sts	0x22A9, r28	; 0x8022a9 <pxCurrentTCB>
    1dfa:	d0 93 aa 22 	sts	0x22AA, r29	; 0x8022aa <pxCurrentTCB+0x1>
    1dfe:	80 91 5c 22 	lds	r24, 0x225C	; 0x80225c <uxCurrentNumberOfTasks>
    1e02:	81 30       	cpi	r24, 0x01	; 1
    1e04:	a9 f5       	brne	.+106    	; 0x1e70 <xTaskCreate+0x182>
    1e06:	0c e7       	ldi	r16, 0x7C	; 124
    1e08:	12 e2       	ldi	r17, 0x22	; 34
    1e0a:	0f 2e       	mov	r0, r31
    1e0c:	f9 ea       	ldi	r31, 0xA9	; 169
    1e0e:	ef 2e       	mov	r14, r31
    1e10:	f2 e2       	ldi	r31, 0x22	; 34
    1e12:	ff 2e       	mov	r15, r31
    1e14:	f0 2d       	mov	r31, r0
    1e16:	c8 01       	movw	r24, r16
    1e18:	19 da       	rcall	.-3022   	; 0x124c <vListInitialise>
    1e1a:	07 5f       	subi	r16, 0xF7	; 247
    1e1c:	1f 4f       	sbci	r17, 0xFF	; 255
    1e1e:	0e 15       	cp	r16, r14
    1e20:	1f 05       	cpc	r17, r15
    1e22:	c9 f7       	brne	.-14     	; 0x1e16 <xTaskCreate+0x128>
    1e24:	83 e7       	ldi	r24, 0x73	; 115
    1e26:	92 e2       	ldi	r25, 0x22	; 34
    1e28:	11 da       	rcall	.-3038   	; 0x124c <vListInitialise>
    1e2a:	8a e6       	ldi	r24, 0x6A	; 106
    1e2c:	92 e2       	ldi	r25, 0x22	; 34
    1e2e:	0e da       	rcall	.-3044   	; 0x124c <vListInitialise>
    1e30:	8d e5       	ldi	r24, 0x5D	; 93
    1e32:	92 e2       	ldi	r25, 0x22	; 34
    1e34:	0b da       	rcall	.-3050   	; 0x124c <vListInitialise>
    1e36:	83 e7       	ldi	r24, 0x73	; 115
    1e38:	92 e2       	ldi	r25, 0x22	; 34
    1e3a:	80 93 68 22 	sts	0x2268, r24	; 0x802268 <pxDelayedTaskList>
    1e3e:	90 93 69 22 	sts	0x2269, r25	; 0x802269 <pxDelayedTaskList+0x1>
    1e42:	8a e6       	ldi	r24, 0x6A	; 106
    1e44:	92 e2       	ldi	r25, 0x22	; 34
    1e46:	80 93 66 22 	sts	0x2266, r24	; 0x802266 <pxOverflowDelayedTaskList>
    1e4a:	90 93 67 22 	sts	0x2267, r25	; 0x802267 <pxOverflowDelayedTaskList+0x1>
    1e4e:	10 c0       	rjmp	.+32     	; 0x1e70 <xTaskCreate+0x182>
    1e50:	80 91 58 22 	lds	r24, 0x2258	; 0x802258 <xSchedulerRunning>
    1e54:	81 11       	cpse	r24, r1
    1e56:	0c c0       	rjmp	.+24     	; 0x1e70 <xTaskCreate+0x182>
    1e58:	e0 91 a9 22 	lds	r30, 0x22A9	; 0x8022a9 <pxCurrentTCB>
    1e5c:	f0 91 aa 22 	lds	r31, 0x22AA	; 0x8022aa <pxCurrentTCB+0x1>
    1e60:	96 89       	ldd	r25, Z+22	; 0x16
    1e62:	8e 89       	ldd	r24, Y+22	; 0x16
    1e64:	89 17       	cp	r24, r25
    1e66:	20 f0       	brcs	.+8      	; 0x1e70 <xTaskCreate+0x182>
    1e68:	c0 93 a9 22 	sts	0x22A9, r28	; 0x8022a9 <pxCurrentTCB>
    1e6c:	d0 93 aa 22 	sts	0x22AA, r29	; 0x8022aa <pxCurrentTCB+0x1>
    1e70:	80 91 53 22 	lds	r24, 0x2253	; 0x802253 <uxTaskNumber>
    1e74:	8f 5f       	subi	r24, 0xFF	; 255
    1e76:	80 93 53 22 	sts	0x2253, r24	; 0x802253 <uxTaskNumber>
    1e7a:	8e 89       	ldd	r24, Y+22	; 0x16
    1e7c:	90 91 59 22 	lds	r25, 0x2259	; 0x802259 <uxTopReadyPriority>
    1e80:	98 17       	cp	r25, r24
    1e82:	10 f4       	brcc	.+4      	; 0x1e88 <xTaskCreate+0x19a>
    1e84:	80 93 59 22 	sts	0x2259, r24	; 0x802259 <uxTopReadyPriority>
    1e88:	90 e0       	ldi	r25, 0x00	; 0
    1e8a:	fc 01       	movw	r30, r24
    1e8c:	ee 0f       	add	r30, r30
    1e8e:	ff 1f       	adc	r31, r31
    1e90:	ee 0f       	add	r30, r30
    1e92:	ff 1f       	adc	r31, r31
    1e94:	ee 0f       	add	r30, r30
    1e96:	ff 1f       	adc	r31, r31
    1e98:	8e 0f       	add	r24, r30
    1e9a:	9f 1f       	adc	r25, r31
    1e9c:	fc 01       	movw	r30, r24
    1e9e:	e4 58       	subi	r30, 0x84	; 132
    1ea0:	fd 4d       	sbci	r31, 0xDD	; 221
    1ea2:	01 80       	ldd	r0, Z+1	; 0x01
    1ea4:	f2 81       	ldd	r31, Z+2	; 0x02
    1ea6:	e0 2d       	mov	r30, r0
    1ea8:	ec 83       	std	Y+4, r30	; 0x04
    1eaa:	fd 83       	std	Y+5, r31	; 0x05
    1eac:	84 81       	ldd	r24, Z+4	; 0x04
    1eae:	95 81       	ldd	r25, Z+5	; 0x05
    1eb0:	8e 83       	std	Y+6, r24	; 0x06
    1eb2:	9f 83       	std	Y+7, r25	; 0x07
    1eb4:	a4 81       	ldd	r26, Z+4	; 0x04
    1eb6:	b5 81       	ldd	r27, Z+5	; 0x05
    1eb8:	12 96       	adiw	r26, 0x02	; 2
    1eba:	cd 92       	st	X+, r12
    1ebc:	dc 92       	st	X, r13
    1ebe:	13 97       	sbiw	r26, 0x03	; 3
    1ec0:	c4 82       	std	Z+4, r12	; 0x04
    1ec2:	d5 82       	std	Z+5, r13	; 0x05
    1ec4:	ee 89       	ldd	r30, Y+22	; 0x16
    1ec6:	f0 e0       	ldi	r31, 0x00	; 0
    1ec8:	cf 01       	movw	r24, r30
    1eca:	88 0f       	add	r24, r24
    1ecc:	99 1f       	adc	r25, r25
    1ece:	88 0f       	add	r24, r24
    1ed0:	99 1f       	adc	r25, r25
    1ed2:	88 0f       	add	r24, r24
    1ed4:	99 1f       	adc	r25, r25
    1ed6:	e8 0f       	add	r30, r24
    1ed8:	f9 1f       	adc	r31, r25
    1eda:	e4 58       	subi	r30, 0x84	; 132
    1edc:	fd 4d       	sbci	r31, 0xDD	; 221
    1ede:	ea 87       	std	Y+10, r30	; 0x0a
    1ee0:	fb 87       	std	Y+11, r31	; 0x0b
    1ee2:	80 81       	ld	r24, Z
    1ee4:	8f 5f       	subi	r24, 0xFF	; 255
    1ee6:	80 83       	st	Z, r24
    1ee8:	0f 90       	pop	r0
    1eea:	0f be       	out	0x3f, r0	; 63
    1eec:	80 91 58 22 	lds	r24, 0x2258	; 0x802258 <xSchedulerRunning>
    1ef0:	88 23       	and	r24, r24
    1ef2:	59 f0       	breq	.+22     	; 0x1f0a <xTaskCreate+0x21c>
    1ef4:	e0 91 a9 22 	lds	r30, 0x22A9	; 0x8022a9 <pxCurrentTCB>
    1ef8:	f0 91 aa 22 	lds	r31, 0x22AA	; 0x8022aa <pxCurrentTCB+0x1>
    1efc:	96 89       	ldd	r25, Z+22	; 0x16
    1efe:	8e 89       	ldd	r24, Y+22	; 0x16
    1f00:	98 17       	cp	r25, r24
    1f02:	28 f4       	brcc	.+10     	; 0x1f0e <xTaskCreate+0x220>
    1f04:	c9 da       	rcall	.-2670   	; 0x1498 <vPortYield>
    1f06:	81 e0       	ldi	r24, 0x01	; 1
    1f08:	05 c0       	rjmp	.+10     	; 0x1f14 <xTaskCreate+0x226>
    1f0a:	81 e0       	ldi	r24, 0x01	; 1
    1f0c:	03 c0       	rjmp	.+6      	; 0x1f14 <xTaskCreate+0x226>
    1f0e:	81 e0       	ldi	r24, 0x01	; 1
    1f10:	01 c0       	rjmp	.+2      	; 0x1f14 <xTaskCreate+0x226>
    1f12:	8f ef       	ldi	r24, 0xFF	; 255
    1f14:	df 91       	pop	r29
    1f16:	cf 91       	pop	r28
    1f18:	1f 91       	pop	r17
    1f1a:	0f 91       	pop	r16
    1f1c:	ff 90       	pop	r15
    1f1e:	ef 90       	pop	r14
    1f20:	df 90       	pop	r13
    1f22:	cf 90       	pop	r12
    1f24:	bf 90       	pop	r11
    1f26:	af 90       	pop	r10
    1f28:	9f 90       	pop	r9
    1f2a:	8f 90       	pop	r8
    1f2c:	7f 90       	pop	r7
    1f2e:	6f 90       	pop	r6
    1f30:	5f 90       	pop	r5
    1f32:	4f 90       	pop	r4
    1f34:	08 95       	ret

00001f36 <vTaskStartScheduler>:
    1f36:	ef 92       	push	r14
    1f38:	ff 92       	push	r15
    1f3a:	0f 93       	push	r16
    1f3c:	0f 2e       	mov	r0, r31
    1f3e:	ff e4       	ldi	r31, 0x4F	; 79
    1f40:	ef 2e       	mov	r14, r31
    1f42:	f2 e2       	ldi	r31, 0x22	; 34
    1f44:	ff 2e       	mov	r15, r31
    1f46:	f0 2d       	mov	r31, r0
    1f48:	00 e0       	ldi	r16, 0x00	; 0
    1f4a:	20 e0       	ldi	r18, 0x00	; 0
    1f4c:	30 e0       	ldi	r19, 0x00	; 0
    1f4e:	45 e5       	ldi	r20, 0x55	; 85
    1f50:	50 e0       	ldi	r21, 0x00	; 0
    1f52:	6e e0       	ldi	r22, 0x0E	; 14
    1f54:	70 e2       	ldi	r23, 0x20	; 32
    1f56:	8f e2       	ldi	r24, 0x2F	; 47
    1f58:	9e e0       	ldi	r25, 0x0E	; 14
    1f5a:	c9 de       	rcall	.-622    	; 0x1cee <xTaskCreate>
    1f5c:	81 30       	cpi	r24, 0x01	; 1
    1f5e:	91 f4       	brne	.+36     	; 0x1f84 <vTaskStartScheduler+0x4e>
    1f60:	99 d5       	rcall	.+2866   	; 0x2a94 <xTimerCreateTimerTask>
    1f62:	81 30       	cpi	r24, 0x01	; 1
    1f64:	79 f4       	brne	.+30     	; 0x1f84 <vTaskStartScheduler+0x4e>
    1f66:	f8 94       	cli
    1f68:	8f ef       	ldi	r24, 0xFF	; 255
    1f6a:	9f ef       	ldi	r25, 0xFF	; 255
    1f6c:	80 93 51 22 	sts	0x2251, r24	; 0x802251 <xNextTaskUnblockTime>
    1f70:	90 93 52 22 	sts	0x2252, r25	; 0x802252 <xNextTaskUnblockTime+0x1>
    1f74:	81 e0       	ldi	r24, 0x01	; 1
    1f76:	80 93 58 22 	sts	0x2258, r24	; 0x802258 <xSchedulerRunning>
    1f7a:	10 92 5a 22 	sts	0x225A, r1	; 0x80225a <xTickCount>
    1f7e:	10 92 5b 22 	sts	0x225B, r1	; 0x80225b <xTickCount+0x1>
    1f82:	45 da       	rcall	.-2934   	; 0x140e <xPortStartScheduler>
    1f84:	80 91 0d 20 	lds	r24, 0x200D	; 0x80200d <uxTopUsedPriority>
    1f88:	0f 91       	pop	r16
    1f8a:	ff 90       	pop	r15
    1f8c:	ef 90       	pop	r14
    1f8e:	08 95       	ret

00001f90 <vTaskSuspendAll>:
    1f90:	80 91 4e 22 	lds	r24, 0x224E	; 0x80224e <uxSchedulerSuspended>
    1f94:	8f 5f       	subi	r24, 0xFF	; 255
    1f96:	80 93 4e 22 	sts	0x224E, r24	; 0x80224e <uxSchedulerSuspended>
    1f9a:	08 95       	ret

00001f9c <xTaskGetTickCount>:
    1f9c:	0f b6       	in	r0, 0x3f	; 63
    1f9e:	f8 94       	cli
    1fa0:	0f 92       	push	r0
    1fa2:	80 91 5a 22 	lds	r24, 0x225A	; 0x80225a <xTickCount>
    1fa6:	90 91 5b 22 	lds	r25, 0x225B	; 0x80225b <xTickCount+0x1>
    1faa:	0f 90       	pop	r0
    1fac:	0f be       	out	0x3f, r0	; 63
    1fae:	08 95       	ret

00001fb0 <xTaskIncrementTick>:
    1fb0:	0f 93       	push	r16
    1fb2:	1f 93       	push	r17
    1fb4:	cf 93       	push	r28
    1fb6:	df 93       	push	r29
    1fb8:	80 91 4e 22 	lds	r24, 0x224E	; 0x80224e <uxSchedulerSuspended>
    1fbc:	81 11       	cpse	r24, r1
    1fbe:	01 c1       	rjmp	.+514    	; 0x21c2 <xTaskIncrementTick+0x212>
    1fc0:	c0 91 5a 22 	lds	r28, 0x225A	; 0x80225a <xTickCount>
    1fc4:	d0 91 5b 22 	lds	r29, 0x225B	; 0x80225b <xTickCount+0x1>
    1fc8:	8e 01       	movw	r16, r28
    1fca:	0f 5f       	subi	r16, 0xFF	; 255
    1fcc:	1f 4f       	sbci	r17, 0xFF	; 255
    1fce:	00 93 5a 22 	sts	0x225A, r16	; 0x80225a <xTickCount>
    1fd2:	10 93 5b 22 	sts	0x225B, r17	; 0x80225b <xTickCount+0x1>
    1fd6:	01 15       	cp	r16, r1
    1fd8:	11 05       	cpc	r17, r1
    1fda:	b1 f4       	brne	.+44     	; 0x2008 <xTaskIncrementTick+0x58>
    1fdc:	80 91 68 22 	lds	r24, 0x2268	; 0x802268 <pxDelayedTaskList>
    1fe0:	90 91 69 22 	lds	r25, 0x2269	; 0x802269 <pxDelayedTaskList+0x1>
    1fe4:	20 91 66 22 	lds	r18, 0x2266	; 0x802266 <pxOverflowDelayedTaskList>
    1fe8:	30 91 67 22 	lds	r19, 0x2267	; 0x802267 <pxOverflowDelayedTaskList+0x1>
    1fec:	20 93 68 22 	sts	0x2268, r18	; 0x802268 <pxDelayedTaskList>
    1ff0:	30 93 69 22 	sts	0x2269, r19	; 0x802269 <pxDelayedTaskList+0x1>
    1ff4:	80 93 66 22 	sts	0x2266, r24	; 0x802266 <pxOverflowDelayedTaskList>
    1ff8:	90 93 67 22 	sts	0x2267, r25	; 0x802267 <pxOverflowDelayedTaskList+0x1>
    1ffc:	80 91 54 22 	lds	r24, 0x2254	; 0x802254 <xNumOfOverflows>
    2000:	8f 5f       	subi	r24, 0xFF	; 255
    2002:	80 93 54 22 	sts	0x2254, r24	; 0x802254 <xNumOfOverflows>
    2006:	0f de       	rcall	.-994    	; 0x1c26 <prvResetNextTaskUnblockTime>
    2008:	80 91 51 22 	lds	r24, 0x2251	; 0x802251 <xNextTaskUnblockTime>
    200c:	90 91 52 22 	lds	r25, 0x2252	; 0x802252 <xNextTaskUnblockTime+0x1>
    2010:	08 17       	cp	r16, r24
    2012:	19 07       	cpc	r17, r25
    2014:	10 f4       	brcc	.+4      	; 0x201a <xTaskIncrementTick+0x6a>
    2016:	80 e0       	ldi	r24, 0x00	; 0
    2018:	b8 c0       	rjmp	.+368    	; 0x218a <xTaskIncrementTick+0x1da>
    201a:	80 e0       	ldi	r24, 0x00	; 0
    201c:	e0 91 68 22 	lds	r30, 0x2268	; 0x802268 <pxDelayedTaskList>
    2020:	f0 91 69 22 	lds	r31, 0x2269	; 0x802269 <pxDelayedTaskList+0x1>
    2024:	90 81       	ld	r25, Z
    2026:	91 11       	cpse	r25, r1
    2028:	07 c0       	rjmp	.+14     	; 0x2038 <xTaskIncrementTick+0x88>
    202a:	2f ef       	ldi	r18, 0xFF	; 255
    202c:	3f ef       	ldi	r19, 0xFF	; 255
    202e:	20 93 51 22 	sts	0x2251, r18	; 0x802251 <xNextTaskUnblockTime>
    2032:	30 93 52 22 	sts	0x2252, r19	; 0x802252 <xNextTaskUnblockTime+0x1>
    2036:	a9 c0       	rjmp	.+338    	; 0x218a <xTaskIncrementTick+0x1da>
    2038:	e0 91 68 22 	lds	r30, 0x2268	; 0x802268 <pxDelayedTaskList>
    203c:	f0 91 69 22 	lds	r31, 0x2269	; 0x802269 <pxDelayedTaskList+0x1>
    2040:	05 80       	ldd	r0, Z+5	; 0x05
    2042:	f6 81       	ldd	r31, Z+6	; 0x06
    2044:	e0 2d       	mov	r30, r0
    2046:	06 80       	ldd	r0, Z+6	; 0x06
    2048:	f7 81       	ldd	r31, Z+7	; 0x07
    204a:	e0 2d       	mov	r30, r0
    204c:	22 81       	ldd	r18, Z+2	; 0x02
    204e:	33 81       	ldd	r19, Z+3	; 0x03
    2050:	02 17       	cp	r16, r18
    2052:	13 07       	cpc	r17, r19
    2054:	28 f4       	brcc	.+10     	; 0x2060 <xTaskIncrementTick+0xb0>
    2056:	20 93 51 22 	sts	0x2251, r18	; 0x802251 <xNextTaskUnblockTime>
    205a:	30 93 52 22 	sts	0x2252, r19	; 0x802252 <xNextTaskUnblockTime+0x1>
    205e:	95 c0       	rjmp	.+298    	; 0x218a <xTaskIncrementTick+0x1da>
    2060:	a2 85       	ldd	r26, Z+10	; 0x0a
    2062:	b3 85       	ldd	r27, Z+11	; 0x0b
    2064:	24 81       	ldd	r18, Z+4	; 0x04
    2066:	35 81       	ldd	r19, Z+5	; 0x05
    2068:	46 81       	ldd	r20, Z+6	; 0x06
    206a:	57 81       	ldd	r21, Z+7	; 0x07
    206c:	e9 01       	movw	r28, r18
    206e:	4c 83       	std	Y+4, r20	; 0x04
    2070:	5d 83       	std	Y+5, r21	; 0x05
    2072:	26 81       	ldd	r18, Z+6	; 0x06
    2074:	37 81       	ldd	r19, Z+7	; 0x07
    2076:	44 81       	ldd	r20, Z+4	; 0x04
    2078:	55 81       	ldd	r21, Z+5	; 0x05
    207a:	e9 01       	movw	r28, r18
    207c:	4a 83       	std	Y+2, r20	; 0x02
    207e:	5b 83       	std	Y+3, r21	; 0x03
    2080:	af 01       	movw	r20, r30
    2082:	4e 5f       	subi	r20, 0xFE	; 254
    2084:	5f 4f       	sbci	r21, 0xFF	; 255
    2086:	11 96       	adiw	r26, 0x01	; 1
    2088:	2d 91       	ld	r18, X+
    208a:	3c 91       	ld	r19, X
    208c:	12 97       	sbiw	r26, 0x02	; 2
    208e:	24 17       	cp	r18, r20
    2090:	35 07       	cpc	r19, r21
    2092:	31 f4       	brne	.+12     	; 0x20a0 <xTaskIncrementTick+0xf0>
    2094:	26 81       	ldd	r18, Z+6	; 0x06
    2096:	37 81       	ldd	r19, Z+7	; 0x07
    2098:	11 96       	adiw	r26, 0x01	; 1
    209a:	2d 93       	st	X+, r18
    209c:	3c 93       	st	X, r19
    209e:	12 97       	sbiw	r26, 0x02	; 2
    20a0:	12 86       	std	Z+10, r1	; 0x0a
    20a2:	13 86       	std	Z+11, r1	; 0x0b
    20a4:	9c 91       	ld	r25, X
    20a6:	91 50       	subi	r25, 0x01	; 1
    20a8:	9c 93       	st	X, r25
    20aa:	a4 89       	ldd	r26, Z+20	; 0x14
    20ac:	b5 89       	ldd	r27, Z+21	; 0x15
    20ae:	10 97       	sbiw	r26, 0x00	; 0
    20b0:	19 f1       	breq	.+70     	; 0x20f8 <xTaskIncrementTick+0x148>
    20b2:	26 85       	ldd	r18, Z+14	; 0x0e
    20b4:	37 85       	ldd	r19, Z+15	; 0x0f
    20b6:	60 89       	ldd	r22, Z+16	; 0x10
    20b8:	71 89       	ldd	r23, Z+17	; 0x11
    20ba:	e9 01       	movw	r28, r18
    20bc:	6c 83       	std	Y+4, r22	; 0x04
    20be:	7d 83       	std	Y+5, r23	; 0x05
    20c0:	20 89       	ldd	r18, Z+16	; 0x10
    20c2:	31 89       	ldd	r19, Z+17	; 0x11
    20c4:	66 85       	ldd	r22, Z+14	; 0x0e
    20c6:	77 85       	ldd	r23, Z+15	; 0x0f
    20c8:	e9 01       	movw	r28, r18
    20ca:	6a 83       	std	Y+2, r22	; 0x02
    20cc:	7b 83       	std	Y+3, r23	; 0x03
    20ce:	11 96       	adiw	r26, 0x01	; 1
    20d0:	6d 91       	ld	r22, X+
    20d2:	7c 91       	ld	r23, X
    20d4:	12 97       	sbiw	r26, 0x02	; 2
    20d6:	9f 01       	movw	r18, r30
    20d8:	24 5f       	subi	r18, 0xF4	; 244
    20da:	3f 4f       	sbci	r19, 0xFF	; 255
    20dc:	62 17       	cp	r22, r18
    20de:	73 07       	cpc	r23, r19
    20e0:	31 f4       	brne	.+12     	; 0x20ee <xTaskIncrementTick+0x13e>
    20e2:	20 89       	ldd	r18, Z+16	; 0x10
    20e4:	31 89       	ldd	r19, Z+17	; 0x11
    20e6:	11 96       	adiw	r26, 0x01	; 1
    20e8:	2d 93       	st	X+, r18
    20ea:	3c 93       	st	X, r19
    20ec:	12 97       	sbiw	r26, 0x02	; 2
    20ee:	14 8a       	std	Z+20, r1	; 0x14
    20f0:	15 8a       	std	Z+21, r1	; 0x15
    20f2:	9c 91       	ld	r25, X
    20f4:	91 50       	subi	r25, 0x01	; 1
    20f6:	9c 93       	st	X, r25
    20f8:	26 89       	ldd	r18, Z+22	; 0x16
    20fa:	90 91 59 22 	lds	r25, 0x2259	; 0x802259 <uxTopReadyPriority>
    20fe:	92 17       	cp	r25, r18
    2100:	10 f4       	brcc	.+4      	; 0x2106 <xTaskIncrementTick+0x156>
    2102:	20 93 59 22 	sts	0x2259, r18	; 0x802259 <uxTopReadyPriority>
    2106:	30 e0       	ldi	r19, 0x00	; 0
    2108:	d9 01       	movw	r26, r18
    210a:	aa 0f       	add	r26, r26
    210c:	bb 1f       	adc	r27, r27
    210e:	aa 0f       	add	r26, r26
    2110:	bb 1f       	adc	r27, r27
    2112:	aa 0f       	add	r26, r26
    2114:	bb 1f       	adc	r27, r27
    2116:	2a 0f       	add	r18, r26
    2118:	3b 1f       	adc	r19, r27
    211a:	d9 01       	movw	r26, r18
    211c:	a4 58       	subi	r26, 0x84	; 132
    211e:	bd 4d       	sbci	r27, 0xDD	; 221
    2120:	11 96       	adiw	r26, 0x01	; 1
    2122:	0d 90       	ld	r0, X+
    2124:	bc 91       	ld	r27, X
    2126:	a0 2d       	mov	r26, r0
    2128:	a4 83       	std	Z+4, r26	; 0x04
    212a:	b5 83       	std	Z+5, r27	; 0x05
    212c:	14 96       	adiw	r26, 0x04	; 4
    212e:	2d 91       	ld	r18, X+
    2130:	3c 91       	ld	r19, X
    2132:	15 97       	sbiw	r26, 0x05	; 5
    2134:	26 83       	std	Z+6, r18	; 0x06
    2136:	37 83       	std	Z+7, r19	; 0x07
    2138:	14 96       	adiw	r26, 0x04	; 4
    213a:	2d 91       	ld	r18, X+
    213c:	3c 91       	ld	r19, X
    213e:	15 97       	sbiw	r26, 0x05	; 5
    2140:	e9 01       	movw	r28, r18
    2142:	4a 83       	std	Y+2, r20	; 0x02
    2144:	5b 83       	std	Y+3, r21	; 0x03
    2146:	14 96       	adiw	r26, 0x04	; 4
    2148:	4d 93       	st	X+, r20
    214a:	5c 93       	st	X, r21
    214c:	15 97       	sbiw	r26, 0x05	; 5
    214e:	a6 89       	ldd	r26, Z+22	; 0x16
    2150:	b0 e0       	ldi	r27, 0x00	; 0
    2152:	9d 01       	movw	r18, r26
    2154:	22 0f       	add	r18, r18
    2156:	33 1f       	adc	r19, r19
    2158:	22 0f       	add	r18, r18
    215a:	33 1f       	adc	r19, r19
    215c:	22 0f       	add	r18, r18
    215e:	33 1f       	adc	r19, r19
    2160:	a2 0f       	add	r26, r18
    2162:	b3 1f       	adc	r27, r19
    2164:	a4 58       	subi	r26, 0x84	; 132
    2166:	bd 4d       	sbci	r27, 0xDD	; 221
    2168:	a2 87       	std	Z+10, r26	; 0x0a
    216a:	b3 87       	std	Z+11, r27	; 0x0b
    216c:	9c 91       	ld	r25, X
    216e:	9f 5f       	subi	r25, 0xFF	; 255
    2170:	9c 93       	st	X, r25
    2172:	a0 91 a9 22 	lds	r26, 0x22A9	; 0x8022a9 <pxCurrentTCB>
    2176:	b0 91 aa 22 	lds	r27, 0x22AA	; 0x8022aa <pxCurrentTCB+0x1>
    217a:	26 89       	ldd	r18, Z+22	; 0x16
    217c:	56 96       	adiw	r26, 0x16	; 22
    217e:	9c 91       	ld	r25, X
    2180:	29 17       	cp	r18, r25
    2182:	08 f4       	brcc	.+2      	; 0x2186 <xTaskIncrementTick+0x1d6>
    2184:	4b cf       	rjmp	.-362    	; 0x201c <xTaskIncrementTick+0x6c>
    2186:	81 e0       	ldi	r24, 0x01	; 1
    2188:	49 cf       	rjmp	.-366    	; 0x201c <xTaskIncrementTick+0x6c>
    218a:	e0 91 a9 22 	lds	r30, 0x22A9	; 0x8022a9 <pxCurrentTCB>
    218e:	f0 91 aa 22 	lds	r31, 0x22AA	; 0x8022aa <pxCurrentTCB+0x1>
    2192:	26 89       	ldd	r18, Z+22	; 0x16
    2194:	30 e0       	ldi	r19, 0x00	; 0
    2196:	f9 01       	movw	r30, r18
    2198:	ee 0f       	add	r30, r30
    219a:	ff 1f       	adc	r31, r31
    219c:	ee 0f       	add	r30, r30
    219e:	ff 1f       	adc	r31, r31
    21a0:	ee 0f       	add	r30, r30
    21a2:	ff 1f       	adc	r31, r31
    21a4:	2e 0f       	add	r18, r30
    21a6:	3f 1f       	adc	r19, r31
    21a8:	f9 01       	movw	r30, r18
    21aa:	e4 58       	subi	r30, 0x84	; 132
    21ac:	fd 4d       	sbci	r31, 0xDD	; 221
    21ae:	90 81       	ld	r25, Z
    21b0:	92 30       	cpi	r25, 0x02	; 2
    21b2:	08 f0       	brcs	.+2      	; 0x21b6 <xTaskIncrementTick+0x206>
    21b4:	81 e0       	ldi	r24, 0x01	; 1
    21b6:	90 91 55 22 	lds	r25, 0x2255	; 0x802255 <xYieldPending>
    21ba:	99 23       	and	r25, r25
    21bc:	61 f0       	breq	.+24     	; 0x21d6 <xTaskIncrementTick+0x226>
    21be:	81 e0       	ldi	r24, 0x01	; 1
    21c0:	0a c0       	rjmp	.+20     	; 0x21d6 <xTaskIncrementTick+0x226>
    21c2:	80 91 56 22 	lds	r24, 0x2256	; 0x802256 <xPendedTicks>
    21c6:	90 91 57 22 	lds	r25, 0x2257	; 0x802257 <xPendedTicks+0x1>
    21ca:	01 96       	adiw	r24, 0x01	; 1
    21cc:	80 93 56 22 	sts	0x2256, r24	; 0x802256 <xPendedTicks>
    21d0:	90 93 57 22 	sts	0x2257, r25	; 0x802257 <xPendedTicks+0x1>
    21d4:	80 e0       	ldi	r24, 0x00	; 0
    21d6:	df 91       	pop	r29
    21d8:	cf 91       	pop	r28
    21da:	1f 91       	pop	r17
    21dc:	0f 91       	pop	r16
    21de:	08 95       	ret

000021e0 <xTaskResumeAll>:
    21e0:	1f 93       	push	r17
    21e2:	cf 93       	push	r28
    21e4:	df 93       	push	r29
    21e6:	0f b6       	in	r0, 0x3f	; 63
    21e8:	f8 94       	cli
    21ea:	0f 92       	push	r0
    21ec:	80 91 4e 22 	lds	r24, 0x224E	; 0x80224e <uxSchedulerSuspended>
    21f0:	81 50       	subi	r24, 0x01	; 1
    21f2:	80 93 4e 22 	sts	0x224E, r24	; 0x80224e <uxSchedulerSuspended>
    21f6:	80 91 4e 22 	lds	r24, 0x224E	; 0x80224e <uxSchedulerSuspended>
    21fa:	81 11       	cpse	r24, r1
    21fc:	c3 c0       	rjmp	.+390    	; 0x2384 <xTaskResumeAll+0x1a4>
    21fe:	80 91 5c 22 	lds	r24, 0x225C	; 0x80225c <uxCurrentNumberOfTasks>
    2202:	81 11       	cpse	r24, r1
    2204:	9b c0       	rjmp	.+310    	; 0x233c <xTaskResumeAll+0x15c>
    2206:	c1 c0       	rjmp	.+386    	; 0x238a <xTaskResumeAll+0x1aa>
    2208:	db 01       	movw	r26, r22
    220a:	15 96       	adiw	r26, 0x05	; 5
    220c:	ed 91       	ld	r30, X+
    220e:	fc 91       	ld	r31, X
    2210:	16 97       	sbiw	r26, 0x06	; 6
    2212:	06 80       	ldd	r0, Z+6	; 0x06
    2214:	f7 81       	ldd	r31, Z+7	; 0x07
    2216:	e0 2d       	mov	r30, r0
    2218:	a4 89       	ldd	r26, Z+20	; 0x14
    221a:	b5 89       	ldd	r27, Z+21	; 0x15
    221c:	86 85       	ldd	r24, Z+14	; 0x0e
    221e:	97 85       	ldd	r25, Z+15	; 0x0f
    2220:	20 89       	ldd	r18, Z+16	; 0x10
    2222:	31 89       	ldd	r19, Z+17	; 0x11
    2224:	ec 01       	movw	r28, r24
    2226:	2c 83       	std	Y+4, r18	; 0x04
    2228:	3d 83       	std	Y+5, r19	; 0x05
    222a:	80 89       	ldd	r24, Z+16	; 0x10
    222c:	91 89       	ldd	r25, Z+17	; 0x11
    222e:	26 85       	ldd	r18, Z+14	; 0x0e
    2230:	37 85       	ldd	r19, Z+15	; 0x0f
    2232:	ec 01       	movw	r28, r24
    2234:	2a 83       	std	Y+2, r18	; 0x02
    2236:	3b 83       	std	Y+3, r19	; 0x03
    2238:	cf 01       	movw	r24, r30
    223a:	0c 96       	adiw	r24, 0x0c	; 12
    223c:	11 96       	adiw	r26, 0x01	; 1
    223e:	2d 91       	ld	r18, X+
    2240:	3c 91       	ld	r19, X
    2242:	12 97       	sbiw	r26, 0x02	; 2
    2244:	28 17       	cp	r18, r24
    2246:	39 07       	cpc	r19, r25
    2248:	31 f4       	brne	.+12     	; 0x2256 <xTaskResumeAll+0x76>
    224a:	80 89       	ldd	r24, Z+16	; 0x10
    224c:	91 89       	ldd	r25, Z+17	; 0x11
    224e:	11 96       	adiw	r26, 0x01	; 1
    2250:	8d 93       	st	X+, r24
    2252:	9c 93       	st	X, r25
    2254:	12 97       	sbiw	r26, 0x02	; 2
    2256:	14 8a       	std	Z+20, r1	; 0x14
    2258:	15 8a       	std	Z+21, r1	; 0x15
    225a:	8c 91       	ld	r24, X
    225c:	81 50       	subi	r24, 0x01	; 1
    225e:	8c 93       	st	X, r24
    2260:	a2 85       	ldd	r26, Z+10	; 0x0a
    2262:	b3 85       	ldd	r27, Z+11	; 0x0b
    2264:	84 81       	ldd	r24, Z+4	; 0x04
    2266:	95 81       	ldd	r25, Z+5	; 0x05
    2268:	26 81       	ldd	r18, Z+6	; 0x06
    226a:	37 81       	ldd	r19, Z+7	; 0x07
    226c:	ec 01       	movw	r28, r24
    226e:	2c 83       	std	Y+4, r18	; 0x04
    2270:	3d 83       	std	Y+5, r19	; 0x05
    2272:	86 81       	ldd	r24, Z+6	; 0x06
    2274:	97 81       	ldd	r25, Z+7	; 0x07
    2276:	24 81       	ldd	r18, Z+4	; 0x04
    2278:	35 81       	ldd	r19, Z+5	; 0x05
    227a:	ec 01       	movw	r28, r24
    227c:	2a 83       	std	Y+2, r18	; 0x02
    227e:	3b 83       	std	Y+3, r19	; 0x03
    2280:	9f 01       	movw	r18, r30
    2282:	2e 5f       	subi	r18, 0xFE	; 254
    2284:	3f 4f       	sbci	r19, 0xFF	; 255
    2286:	11 96       	adiw	r26, 0x01	; 1
    2288:	8d 91       	ld	r24, X+
    228a:	9c 91       	ld	r25, X
    228c:	12 97       	sbiw	r26, 0x02	; 2
    228e:	82 17       	cp	r24, r18
    2290:	93 07       	cpc	r25, r19
    2292:	31 f4       	brne	.+12     	; 0x22a0 <xTaskResumeAll+0xc0>
    2294:	86 81       	ldd	r24, Z+6	; 0x06
    2296:	97 81       	ldd	r25, Z+7	; 0x07
    2298:	11 96       	adiw	r26, 0x01	; 1
    229a:	8d 93       	st	X+, r24
    229c:	9c 93       	st	X, r25
    229e:	12 97       	sbiw	r26, 0x02	; 2
    22a0:	12 86       	std	Z+10, r1	; 0x0a
    22a2:	13 86       	std	Z+11, r1	; 0x0b
    22a4:	8c 91       	ld	r24, X
    22a6:	81 50       	subi	r24, 0x01	; 1
    22a8:	8c 93       	st	X, r24
    22aa:	86 89       	ldd	r24, Z+22	; 0x16
    22ac:	90 91 59 22 	lds	r25, 0x2259	; 0x802259 <uxTopReadyPriority>
    22b0:	98 17       	cp	r25, r24
    22b2:	10 f4       	brcc	.+4      	; 0x22b8 <xTaskResumeAll+0xd8>
    22b4:	80 93 59 22 	sts	0x2259, r24	; 0x802259 <uxTopReadyPriority>
    22b8:	90 e0       	ldi	r25, 0x00	; 0
    22ba:	dc 01       	movw	r26, r24
    22bc:	aa 0f       	add	r26, r26
    22be:	bb 1f       	adc	r27, r27
    22c0:	aa 0f       	add	r26, r26
    22c2:	bb 1f       	adc	r27, r27
    22c4:	aa 0f       	add	r26, r26
    22c6:	bb 1f       	adc	r27, r27
    22c8:	8a 0f       	add	r24, r26
    22ca:	9b 1f       	adc	r25, r27
    22cc:	dc 01       	movw	r26, r24
    22ce:	a4 58       	subi	r26, 0x84	; 132
    22d0:	bd 4d       	sbci	r27, 0xDD	; 221
    22d2:	11 96       	adiw	r26, 0x01	; 1
    22d4:	0d 90       	ld	r0, X+
    22d6:	bc 91       	ld	r27, X
    22d8:	a0 2d       	mov	r26, r0
    22da:	a4 83       	std	Z+4, r26	; 0x04
    22dc:	b5 83       	std	Z+5, r27	; 0x05
    22de:	14 96       	adiw	r26, 0x04	; 4
    22e0:	8d 91       	ld	r24, X+
    22e2:	9c 91       	ld	r25, X
    22e4:	15 97       	sbiw	r26, 0x05	; 5
    22e6:	86 83       	std	Z+6, r24	; 0x06
    22e8:	97 83       	std	Z+7, r25	; 0x07
    22ea:	14 96       	adiw	r26, 0x04	; 4
    22ec:	8d 91       	ld	r24, X+
    22ee:	9c 91       	ld	r25, X
    22f0:	15 97       	sbiw	r26, 0x05	; 5
    22f2:	ec 01       	movw	r28, r24
    22f4:	2a 83       	std	Y+2, r18	; 0x02
    22f6:	3b 83       	std	Y+3, r19	; 0x03
    22f8:	14 96       	adiw	r26, 0x04	; 4
    22fa:	2d 93       	st	X+, r18
    22fc:	3c 93       	st	X, r19
    22fe:	15 97       	sbiw	r26, 0x05	; 5
    2300:	a6 89       	ldd	r26, Z+22	; 0x16
    2302:	b0 e0       	ldi	r27, 0x00	; 0
    2304:	cd 01       	movw	r24, r26
    2306:	88 0f       	add	r24, r24
    2308:	99 1f       	adc	r25, r25
    230a:	88 0f       	add	r24, r24
    230c:	99 1f       	adc	r25, r25
    230e:	88 0f       	add	r24, r24
    2310:	99 1f       	adc	r25, r25
    2312:	a8 0f       	add	r26, r24
    2314:	b9 1f       	adc	r27, r25
    2316:	a4 58       	subi	r26, 0x84	; 132
    2318:	bd 4d       	sbci	r27, 0xDD	; 221
    231a:	a2 87       	std	Z+10, r26	; 0x0a
    231c:	b3 87       	std	Z+11, r27	; 0x0b
    231e:	8c 91       	ld	r24, X
    2320:	8f 5f       	subi	r24, 0xFF	; 255
    2322:	8c 93       	st	X, r24
    2324:	a0 91 a9 22 	lds	r26, 0x22A9	; 0x8022a9 <pxCurrentTCB>
    2328:	b0 91 aa 22 	lds	r27, 0x22AA	; 0x8022aa <pxCurrentTCB+0x1>
    232c:	96 89       	ldd	r25, Z+22	; 0x16
    232e:	56 96       	adiw	r26, 0x16	; 22
    2330:	8c 91       	ld	r24, X
    2332:	98 17       	cp	r25, r24
    2334:	40 f0       	brcs	.+16     	; 0x2346 <xTaskResumeAll+0x166>
    2336:	40 93 55 22 	sts	0x2255, r20	; 0x802255 <xYieldPending>
    233a:	05 c0       	rjmp	.+10     	; 0x2346 <xTaskResumeAll+0x166>
    233c:	e0 e0       	ldi	r30, 0x00	; 0
    233e:	f0 e0       	ldi	r31, 0x00	; 0
    2340:	6d e5       	ldi	r22, 0x5D	; 93
    2342:	72 e2       	ldi	r23, 0x22	; 34
    2344:	41 e0       	ldi	r20, 0x01	; 1
    2346:	db 01       	movw	r26, r22
    2348:	8c 91       	ld	r24, X
    234a:	81 11       	cpse	r24, r1
    234c:	5d cf       	rjmp	.-326    	; 0x2208 <xTaskResumeAll+0x28>
    234e:	ef 2b       	or	r30, r31
    2350:	09 f0       	breq	.+2      	; 0x2354 <xTaskResumeAll+0x174>
    2352:	69 dc       	rcall	.-1838   	; 0x1c26 <prvResetNextTaskUnblockTime>
    2354:	c0 91 56 22 	lds	r28, 0x2256	; 0x802256 <xPendedTicks>
    2358:	d0 91 57 22 	lds	r29, 0x2257	; 0x802257 <xPendedTicks+0x1>
    235c:	20 97       	sbiw	r28, 0x00	; 0
    235e:	59 f0       	breq	.+22     	; 0x2376 <xTaskResumeAll+0x196>
    2360:	11 e0       	ldi	r17, 0x01	; 1
    2362:	26 de       	rcall	.-948    	; 0x1fb0 <xTaskIncrementTick>
    2364:	81 11       	cpse	r24, r1
    2366:	10 93 55 22 	sts	0x2255, r17	; 0x802255 <xYieldPending>
    236a:	21 97       	sbiw	r28, 0x01	; 1
    236c:	d1 f7       	brne	.-12     	; 0x2362 <xTaskResumeAll+0x182>
    236e:	10 92 56 22 	sts	0x2256, r1	; 0x802256 <xPendedTicks>
    2372:	10 92 57 22 	sts	0x2257, r1	; 0x802257 <xPendedTicks+0x1>
    2376:	80 91 55 22 	lds	r24, 0x2255	; 0x802255 <xYieldPending>
    237a:	88 23       	and	r24, r24
    237c:	29 f0       	breq	.+10     	; 0x2388 <xTaskResumeAll+0x1a8>
    237e:	8c d8       	rcall	.-3816   	; 0x1498 <vPortYield>
    2380:	81 e0       	ldi	r24, 0x01	; 1
    2382:	03 c0       	rjmp	.+6      	; 0x238a <xTaskResumeAll+0x1aa>
    2384:	80 e0       	ldi	r24, 0x00	; 0
    2386:	01 c0       	rjmp	.+2      	; 0x238a <xTaskResumeAll+0x1aa>
    2388:	80 e0       	ldi	r24, 0x00	; 0
    238a:	0f 90       	pop	r0
    238c:	0f be       	out	0x3f, r0	; 63
    238e:	df 91       	pop	r29
    2390:	cf 91       	pop	r28
    2392:	1f 91       	pop	r17
    2394:	08 95       	ret

00002396 <vTaskDelay>:
    2396:	cf 93       	push	r28
    2398:	df 93       	push	r29
    239a:	ec 01       	movw	r28, r24
    239c:	89 2b       	or	r24, r25
    239e:	39 f0       	breq	.+14     	; 0x23ae <vTaskDelay+0x18>
    23a0:	f7 dd       	rcall	.-1042   	; 0x1f90 <vTaskSuspendAll>
    23a2:	60 e0       	ldi	r22, 0x00	; 0
    23a4:	ce 01       	movw	r24, r28
    23a6:	62 dc       	rcall	.-1852   	; 0x1c6c <prvAddCurrentTaskToDelayedList>
    23a8:	1b df       	rcall	.-458    	; 0x21e0 <xTaskResumeAll>
    23aa:	81 11       	cpse	r24, r1
    23ac:	01 c0       	rjmp	.+2      	; 0x23b0 <vTaskDelay+0x1a>
    23ae:	74 d8       	rcall	.-3864   	; 0x1498 <vPortYield>
    23b0:	df 91       	pop	r29
    23b2:	cf 91       	pop	r28
    23b4:	08 95       	ret

000023b6 <vTaskSwitchContext>:
    23b6:	80 91 4e 22 	lds	r24, 0x224E	; 0x80224e <uxSchedulerSuspended>
    23ba:	88 23       	and	r24, r24
    23bc:	21 f0       	breq	.+8      	; 0x23c6 <vTaskSwitchContext+0x10>
    23be:	81 e0       	ldi	r24, 0x01	; 1
    23c0:	80 93 55 22 	sts	0x2255, r24	; 0x802255 <xYieldPending>
    23c4:	08 95       	ret
    23c6:	10 92 55 22 	sts	0x2255, r1	; 0x802255 <xYieldPending>
    23ca:	20 91 59 22 	lds	r18, 0x2259	; 0x802259 <uxTopReadyPriority>
    23ce:	82 2f       	mov	r24, r18
    23d0:	90 e0       	ldi	r25, 0x00	; 0
    23d2:	fc 01       	movw	r30, r24
    23d4:	ee 0f       	add	r30, r30
    23d6:	ff 1f       	adc	r31, r31
    23d8:	ee 0f       	add	r30, r30
    23da:	ff 1f       	adc	r31, r31
    23dc:	ee 0f       	add	r30, r30
    23de:	ff 1f       	adc	r31, r31
    23e0:	e8 0f       	add	r30, r24
    23e2:	f9 1f       	adc	r31, r25
    23e4:	e4 58       	subi	r30, 0x84	; 132
    23e6:	fd 4d       	sbci	r31, 0xDD	; 221
    23e8:	30 81       	ld	r19, Z
    23ea:	31 11       	cpse	r19, r1
    23ec:	11 c0       	rjmp	.+34     	; 0x2410 <vTaskSwitchContext+0x5a>
    23ee:	21 50       	subi	r18, 0x01	; 1
    23f0:	82 2f       	mov	r24, r18
    23f2:	90 e0       	ldi	r25, 0x00	; 0
    23f4:	fc 01       	movw	r30, r24
    23f6:	ee 0f       	add	r30, r30
    23f8:	ff 1f       	adc	r31, r31
    23fa:	ee 0f       	add	r30, r30
    23fc:	ff 1f       	adc	r31, r31
    23fe:	ee 0f       	add	r30, r30
    2400:	ff 1f       	adc	r31, r31
    2402:	e8 0f       	add	r30, r24
    2404:	f9 1f       	adc	r31, r25
    2406:	e4 58       	subi	r30, 0x84	; 132
    2408:	fd 4d       	sbci	r31, 0xDD	; 221
    240a:	30 81       	ld	r19, Z
    240c:	33 23       	and	r19, r19
    240e:	79 f3       	breq	.-34     	; 0x23ee <vTaskSwitchContext+0x38>
    2410:	ac 01       	movw	r20, r24
    2412:	44 0f       	add	r20, r20
    2414:	55 1f       	adc	r21, r21
    2416:	44 0f       	add	r20, r20
    2418:	55 1f       	adc	r21, r21
    241a:	44 0f       	add	r20, r20
    241c:	55 1f       	adc	r21, r21
    241e:	48 0f       	add	r20, r24
    2420:	59 1f       	adc	r21, r25
    2422:	da 01       	movw	r26, r20
    2424:	a4 58       	subi	r26, 0x84	; 132
    2426:	bd 4d       	sbci	r27, 0xDD	; 221
    2428:	11 96       	adiw	r26, 0x01	; 1
    242a:	ed 91       	ld	r30, X+
    242c:	fc 91       	ld	r31, X
    242e:	12 97       	sbiw	r26, 0x02	; 2
    2430:	02 80       	ldd	r0, Z+2	; 0x02
    2432:	f3 81       	ldd	r31, Z+3	; 0x03
    2434:	e0 2d       	mov	r30, r0
    2436:	11 96       	adiw	r26, 0x01	; 1
    2438:	ed 93       	st	X+, r30
    243a:	fc 93       	st	X, r31
    243c:	12 97       	sbiw	r26, 0x02	; 2
    243e:	41 58       	subi	r20, 0x81	; 129
    2440:	5d 4d       	sbci	r21, 0xDD	; 221
    2442:	e4 17       	cp	r30, r20
    2444:	f5 07       	cpc	r31, r21
    2446:	29 f4       	brne	.+10     	; 0x2452 <vTaskSwitchContext+0x9c>
    2448:	42 81       	ldd	r20, Z+2	; 0x02
    244a:	53 81       	ldd	r21, Z+3	; 0x03
    244c:	fd 01       	movw	r30, r26
    244e:	41 83       	std	Z+1, r20	; 0x01
    2450:	52 83       	std	Z+2, r21	; 0x02
    2452:	fc 01       	movw	r30, r24
    2454:	ee 0f       	add	r30, r30
    2456:	ff 1f       	adc	r31, r31
    2458:	ee 0f       	add	r30, r30
    245a:	ff 1f       	adc	r31, r31
    245c:	ee 0f       	add	r30, r30
    245e:	ff 1f       	adc	r31, r31
    2460:	8e 0f       	add	r24, r30
    2462:	9f 1f       	adc	r25, r31
    2464:	fc 01       	movw	r30, r24
    2466:	e4 58       	subi	r30, 0x84	; 132
    2468:	fd 4d       	sbci	r31, 0xDD	; 221
    246a:	01 80       	ldd	r0, Z+1	; 0x01
    246c:	f2 81       	ldd	r31, Z+2	; 0x02
    246e:	e0 2d       	mov	r30, r0
    2470:	86 81       	ldd	r24, Z+6	; 0x06
    2472:	97 81       	ldd	r25, Z+7	; 0x07
    2474:	80 93 a9 22 	sts	0x22A9, r24	; 0x8022a9 <pxCurrentTCB>
    2478:	90 93 aa 22 	sts	0x22AA, r25	; 0x8022aa <pxCurrentTCB+0x1>
    247c:	20 93 59 22 	sts	0x2259, r18	; 0x802259 <uxTopReadyPriority>
    2480:	08 95       	ret

00002482 <vTaskPlaceOnEventList>:
    2482:	cf 93       	push	r28
    2484:	df 93       	push	r29
    2486:	eb 01       	movw	r28, r22
    2488:	60 91 a9 22 	lds	r22, 0x22A9	; 0x8022a9 <pxCurrentTCB>
    248c:	70 91 aa 22 	lds	r23, 0x22AA	; 0x8022aa <pxCurrentTCB+0x1>
    2490:	64 5f       	subi	r22, 0xF4	; 244
    2492:	7f 4f       	sbci	r23, 0xFF	; 255
    2494:	0e 94 38 09 	call	0x1270	; 0x1270 <vListInsert>
    2498:	61 e0       	ldi	r22, 0x01	; 1
    249a:	ce 01       	movw	r24, r28
    249c:	e7 db       	rcall	.-2098   	; 0x1c6c <prvAddCurrentTaskToDelayedList>
    249e:	df 91       	pop	r29
    24a0:	cf 91       	pop	r28
    24a2:	08 95       	ret

000024a4 <vTaskPlaceOnEventListRestricted>:
    24a4:	0f 93       	push	r16
    24a6:	1f 93       	push	r17
    24a8:	cf 93       	push	r28
    24aa:	df 93       	push	r29
    24ac:	fc 01       	movw	r30, r24
    24ae:	8b 01       	movw	r16, r22
    24b0:	a1 81       	ldd	r26, Z+1	; 0x01
    24b2:	b2 81       	ldd	r27, Z+2	; 0x02
    24b4:	80 91 a9 22 	lds	r24, 0x22A9	; 0x8022a9 <pxCurrentTCB>
    24b8:	90 91 aa 22 	lds	r25, 0x22AA	; 0x8022aa <pxCurrentTCB+0x1>
    24bc:	ec 01       	movw	r28, r24
    24be:	ae 87       	std	Y+14, r26	; 0x0e
    24c0:	bf 87       	std	Y+15, r27	; 0x0f
    24c2:	80 91 a9 22 	lds	r24, 0x22A9	; 0x8022a9 <pxCurrentTCB>
    24c6:	90 91 aa 22 	lds	r25, 0x22AA	; 0x8022aa <pxCurrentTCB+0x1>
    24ca:	14 96       	adiw	r26, 0x04	; 4
    24cc:	2d 91       	ld	r18, X+
    24ce:	3c 91       	ld	r19, X
    24d0:	15 97       	sbiw	r26, 0x05	; 5
    24d2:	ec 01       	movw	r28, r24
    24d4:	28 8b       	std	Y+16, r18	; 0x10
    24d6:	39 8b       	std	Y+17, r19	; 0x11
    24d8:	14 96       	adiw	r26, 0x04	; 4
    24da:	8d 91       	ld	r24, X+
    24dc:	9c 91       	ld	r25, X
    24de:	15 97       	sbiw	r26, 0x05	; 5
    24e0:	20 91 a9 22 	lds	r18, 0x22A9	; 0x8022a9 <pxCurrentTCB>
    24e4:	30 91 aa 22 	lds	r19, 0x22AA	; 0x8022aa <pxCurrentTCB+0x1>
    24e8:	24 5f       	subi	r18, 0xF4	; 244
    24ea:	3f 4f       	sbci	r19, 0xFF	; 255
    24ec:	ec 01       	movw	r28, r24
    24ee:	2a 83       	std	Y+2, r18	; 0x02
    24f0:	3b 83       	std	Y+3, r19	; 0x03
    24f2:	20 91 a9 22 	lds	r18, 0x22A9	; 0x8022a9 <pxCurrentTCB>
    24f6:	30 91 aa 22 	lds	r19, 0x22AA	; 0x8022aa <pxCurrentTCB+0x1>
    24fa:	24 5f       	subi	r18, 0xF4	; 244
    24fc:	3f 4f       	sbci	r19, 0xFF	; 255
    24fe:	14 96       	adiw	r26, 0x04	; 4
    2500:	2d 93       	st	X+, r18
    2502:	3c 93       	st	X, r19
    2504:	15 97       	sbiw	r26, 0x05	; 5
    2506:	a0 91 a9 22 	lds	r26, 0x22A9	; 0x8022a9 <pxCurrentTCB>
    250a:	b0 91 aa 22 	lds	r27, 0x22AA	; 0x8022aa <pxCurrentTCB+0x1>
    250e:	54 96       	adiw	r26, 0x14	; 20
    2510:	ed 93       	st	X+, r30
    2512:	fc 93       	st	X, r31
    2514:	55 97       	sbiw	r26, 0x15	; 21
    2516:	90 81       	ld	r25, Z
    2518:	9f 5f       	subi	r25, 0xFF	; 255
    251a:	90 83       	st	Z, r25
    251c:	44 23       	and	r20, r20
    251e:	11 f0       	breq	.+4      	; 0x2524 <vTaskPlaceOnEventListRestricted+0x80>
    2520:	0f ef       	ldi	r16, 0xFF	; 255
    2522:	1f ef       	ldi	r17, 0xFF	; 255
    2524:	64 2f       	mov	r22, r20
    2526:	c8 01       	movw	r24, r16
    2528:	a1 db       	rcall	.-2238   	; 0x1c6c <prvAddCurrentTaskToDelayedList>
    252a:	df 91       	pop	r29
    252c:	cf 91       	pop	r28
    252e:	1f 91       	pop	r17
    2530:	0f 91       	pop	r16
    2532:	08 95       	ret

00002534 <xTaskRemoveFromEventList>:
    2534:	cf 93       	push	r28
    2536:	df 93       	push	r29
    2538:	dc 01       	movw	r26, r24
    253a:	15 96       	adiw	r26, 0x05	; 5
    253c:	ed 91       	ld	r30, X+
    253e:	fc 91       	ld	r31, X
    2540:	16 97       	sbiw	r26, 0x06	; 6
    2542:	06 80       	ldd	r0, Z+6	; 0x06
    2544:	f7 81       	ldd	r31, Z+7	; 0x07
    2546:	e0 2d       	mov	r30, r0
    2548:	a4 89       	ldd	r26, Z+20	; 0x14
    254a:	b5 89       	ldd	r27, Z+21	; 0x15
    254c:	c6 85       	ldd	r28, Z+14	; 0x0e
    254e:	d7 85       	ldd	r29, Z+15	; 0x0f
    2550:	80 89       	ldd	r24, Z+16	; 0x10
    2552:	91 89       	ldd	r25, Z+17	; 0x11
    2554:	8c 83       	std	Y+4, r24	; 0x04
    2556:	9d 83       	std	Y+5, r25	; 0x05
    2558:	c0 89       	ldd	r28, Z+16	; 0x10
    255a:	d1 89       	ldd	r29, Z+17	; 0x11
    255c:	86 85       	ldd	r24, Z+14	; 0x0e
    255e:	97 85       	ldd	r25, Z+15	; 0x0f
    2560:	8a 83       	std	Y+2, r24	; 0x02
    2562:	9b 83       	std	Y+3, r25	; 0x03
    2564:	9f 01       	movw	r18, r30
    2566:	24 5f       	subi	r18, 0xF4	; 244
    2568:	3f 4f       	sbci	r19, 0xFF	; 255
    256a:	11 96       	adiw	r26, 0x01	; 1
    256c:	8d 91       	ld	r24, X+
    256e:	9c 91       	ld	r25, X
    2570:	12 97       	sbiw	r26, 0x02	; 2
    2572:	82 17       	cp	r24, r18
    2574:	93 07       	cpc	r25, r19
    2576:	31 f4       	brne	.+12     	; 0x2584 <xTaskRemoveFromEventList+0x50>
    2578:	80 89       	ldd	r24, Z+16	; 0x10
    257a:	91 89       	ldd	r25, Z+17	; 0x11
    257c:	11 96       	adiw	r26, 0x01	; 1
    257e:	8d 93       	st	X+, r24
    2580:	9c 93       	st	X, r25
    2582:	12 97       	sbiw	r26, 0x02	; 2
    2584:	14 8a       	std	Z+20, r1	; 0x14
    2586:	15 8a       	std	Z+21, r1	; 0x15
    2588:	8c 91       	ld	r24, X
    258a:	81 50       	subi	r24, 0x01	; 1
    258c:	8c 93       	st	X, r24
    258e:	80 91 4e 22 	lds	r24, 0x224E	; 0x80224e <uxSchedulerSuspended>
    2592:	81 11       	cpse	r24, r1
    2594:	60 c0       	rjmp	.+192    	; 0x2656 <xTaskRemoveFromEventList+0x122>
    2596:	a2 85       	ldd	r26, Z+10	; 0x0a
    2598:	b3 85       	ldd	r27, Z+11	; 0x0b
    259a:	c4 81       	ldd	r28, Z+4	; 0x04
    259c:	d5 81       	ldd	r29, Z+5	; 0x05
    259e:	86 81       	ldd	r24, Z+6	; 0x06
    25a0:	97 81       	ldd	r25, Z+7	; 0x07
    25a2:	8c 83       	std	Y+4, r24	; 0x04
    25a4:	9d 83       	std	Y+5, r25	; 0x05
    25a6:	c6 81       	ldd	r28, Z+6	; 0x06
    25a8:	d7 81       	ldd	r29, Z+7	; 0x07
    25aa:	84 81       	ldd	r24, Z+4	; 0x04
    25ac:	95 81       	ldd	r25, Z+5	; 0x05
    25ae:	8a 83       	std	Y+2, r24	; 0x02
    25b0:	9b 83       	std	Y+3, r25	; 0x03
    25b2:	9f 01       	movw	r18, r30
    25b4:	2e 5f       	subi	r18, 0xFE	; 254
    25b6:	3f 4f       	sbci	r19, 0xFF	; 255
    25b8:	11 96       	adiw	r26, 0x01	; 1
    25ba:	8d 91       	ld	r24, X+
    25bc:	9c 91       	ld	r25, X
    25be:	12 97       	sbiw	r26, 0x02	; 2
    25c0:	82 17       	cp	r24, r18
    25c2:	93 07       	cpc	r25, r19
    25c4:	31 f4       	brne	.+12     	; 0x25d2 <xTaskRemoveFromEventList+0x9e>
    25c6:	86 81       	ldd	r24, Z+6	; 0x06
    25c8:	97 81       	ldd	r25, Z+7	; 0x07
    25ca:	11 96       	adiw	r26, 0x01	; 1
    25cc:	8d 93       	st	X+, r24
    25ce:	9c 93       	st	X, r25
    25d0:	12 97       	sbiw	r26, 0x02	; 2
    25d2:	12 86       	std	Z+10, r1	; 0x0a
    25d4:	13 86       	std	Z+11, r1	; 0x0b
    25d6:	8c 91       	ld	r24, X
    25d8:	81 50       	subi	r24, 0x01	; 1
    25da:	8c 93       	st	X, r24
    25dc:	86 89       	ldd	r24, Z+22	; 0x16
    25de:	90 91 59 22 	lds	r25, 0x2259	; 0x802259 <uxTopReadyPriority>
    25e2:	98 17       	cp	r25, r24
    25e4:	10 f4       	brcc	.+4      	; 0x25ea <xTaskRemoveFromEventList+0xb6>
    25e6:	80 93 59 22 	sts	0x2259, r24	; 0x802259 <uxTopReadyPriority>
    25ea:	90 e0       	ldi	r25, 0x00	; 0
    25ec:	dc 01       	movw	r26, r24
    25ee:	aa 0f       	add	r26, r26
    25f0:	bb 1f       	adc	r27, r27
    25f2:	aa 0f       	add	r26, r26
    25f4:	bb 1f       	adc	r27, r27
    25f6:	aa 0f       	add	r26, r26
    25f8:	bb 1f       	adc	r27, r27
    25fa:	8a 0f       	add	r24, r26
    25fc:	9b 1f       	adc	r25, r27
    25fe:	dc 01       	movw	r26, r24
    2600:	a4 58       	subi	r26, 0x84	; 132
    2602:	bd 4d       	sbci	r27, 0xDD	; 221
    2604:	11 96       	adiw	r26, 0x01	; 1
    2606:	0d 90       	ld	r0, X+
    2608:	bc 91       	ld	r27, X
    260a:	a0 2d       	mov	r26, r0
    260c:	a4 83       	std	Z+4, r26	; 0x04
    260e:	b5 83       	std	Z+5, r27	; 0x05
    2610:	14 96       	adiw	r26, 0x04	; 4
    2612:	8d 91       	ld	r24, X+
    2614:	9c 91       	ld	r25, X
    2616:	15 97       	sbiw	r26, 0x05	; 5
    2618:	86 83       	std	Z+6, r24	; 0x06
    261a:	97 83       	std	Z+7, r25	; 0x07
    261c:	14 96       	adiw	r26, 0x04	; 4
    261e:	cd 91       	ld	r28, X+
    2620:	dc 91       	ld	r29, X
    2622:	15 97       	sbiw	r26, 0x05	; 5
    2624:	2a 83       	std	Y+2, r18	; 0x02
    2626:	3b 83       	std	Y+3, r19	; 0x03
    2628:	14 96       	adiw	r26, 0x04	; 4
    262a:	2d 93       	st	X+, r18
    262c:	3c 93       	st	X, r19
    262e:	15 97       	sbiw	r26, 0x05	; 5
    2630:	a6 89       	ldd	r26, Z+22	; 0x16
    2632:	b0 e0       	ldi	r27, 0x00	; 0
    2634:	cd 01       	movw	r24, r26
    2636:	88 0f       	add	r24, r24
    2638:	99 1f       	adc	r25, r25
    263a:	88 0f       	add	r24, r24
    263c:	99 1f       	adc	r25, r25
    263e:	88 0f       	add	r24, r24
    2640:	99 1f       	adc	r25, r25
    2642:	a8 0f       	add	r26, r24
    2644:	b9 1f       	adc	r27, r25
    2646:	a4 58       	subi	r26, 0x84	; 132
    2648:	bd 4d       	sbci	r27, 0xDD	; 221
    264a:	a2 87       	std	Z+10, r26	; 0x0a
    264c:	b3 87       	std	Z+11, r27	; 0x0b
    264e:	8c 91       	ld	r24, X
    2650:	8f 5f       	subi	r24, 0xFF	; 255
    2652:	8c 93       	st	X, r24
    2654:	1c c0       	rjmp	.+56     	; 0x268e <xTaskRemoveFromEventList+0x15a>
    2656:	4d e5       	ldi	r20, 0x5D	; 93
    2658:	52 e2       	ldi	r21, 0x22	; 34
    265a:	da 01       	movw	r26, r20
    265c:	11 96       	adiw	r26, 0x01	; 1
    265e:	cd 91       	ld	r28, X+
    2660:	dc 91       	ld	r29, X
    2662:	12 97       	sbiw	r26, 0x02	; 2
    2664:	c6 87       	std	Z+14, r28	; 0x0e
    2666:	d7 87       	std	Z+15, r29	; 0x0f
    2668:	8c 81       	ldd	r24, Y+4	; 0x04
    266a:	9d 81       	ldd	r25, Y+5	; 0x05
    266c:	80 8b       	std	Z+16, r24	; 0x10
    266e:	91 8b       	std	Z+17, r25	; 0x11
    2670:	8c 81       	ldd	r24, Y+4	; 0x04
    2672:	9d 81       	ldd	r25, Y+5	; 0x05
    2674:	dc 01       	movw	r26, r24
    2676:	12 96       	adiw	r26, 0x02	; 2
    2678:	2d 93       	st	X+, r18
    267a:	3c 93       	st	X, r19
    267c:	13 97       	sbiw	r26, 0x03	; 3
    267e:	2c 83       	std	Y+4, r18	; 0x04
    2680:	3d 83       	std	Y+5, r19	; 0x05
    2682:	44 8b       	std	Z+20, r20	; 0x14
    2684:	55 8b       	std	Z+21, r21	; 0x15
    2686:	da 01       	movw	r26, r20
    2688:	8c 91       	ld	r24, X
    268a:	8f 5f       	subi	r24, 0xFF	; 255
    268c:	8c 93       	st	X, r24
    268e:	a0 91 a9 22 	lds	r26, 0x22A9	; 0x8022a9 <pxCurrentTCB>
    2692:	b0 91 aa 22 	lds	r27, 0x22AA	; 0x8022aa <pxCurrentTCB+0x1>
    2696:	96 89       	ldd	r25, Z+22	; 0x16
    2698:	56 96       	adiw	r26, 0x16	; 22
    269a:	8c 91       	ld	r24, X
    269c:	89 17       	cp	r24, r25
    269e:	20 f4       	brcc	.+8      	; 0x26a8 <xTaskRemoveFromEventList+0x174>
    26a0:	81 e0       	ldi	r24, 0x01	; 1
    26a2:	80 93 55 22 	sts	0x2255, r24	; 0x802255 <xYieldPending>
    26a6:	01 c0       	rjmp	.+2      	; 0x26aa <xTaskRemoveFromEventList+0x176>
    26a8:	80 e0       	ldi	r24, 0x00	; 0
    26aa:	df 91       	pop	r29
    26ac:	cf 91       	pop	r28
    26ae:	08 95       	ret

000026b0 <vTaskInternalSetTimeOutState>:
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
    /* For internal use only as it does not use a critical section. */
    pxTimeOut->xOverflowCount = xNumOfOverflows;
    26b0:	20 91 54 22 	lds	r18, 0x2254	; 0x802254 <xNumOfOverflows>
    26b4:	fc 01       	movw	r30, r24
    26b6:	20 83       	st	Z, r18
    pxTimeOut->xTimeOnEntering = xTickCount;
    26b8:	20 91 5a 22 	lds	r18, 0x225A	; 0x80225a <xTickCount>
    26bc:	30 91 5b 22 	lds	r19, 0x225B	; 0x80225b <xTickCount+0x1>
    26c0:	21 83       	std	Z+1, r18	; 0x01
    26c2:	32 83       	std	Z+2, r19	; 0x02
    26c4:	08 95       	ret

000026c6 <xTaskCheckForTimeOut>:
    BaseType_t xReturn;

    configASSERT( pxTimeOut );
    configASSERT( pxTicksToWait );

    taskENTER_CRITICAL();
    26c6:	0f b6       	in	r0, 0x3f	; 63
    26c8:	f8 94       	cli
    26ca:	0f 92       	push	r0
    {
        /* Minor optimisation.  The tick count cannot change in this block. */
        const TickType_t xConstTickCount = xTickCount;
    26cc:	20 91 5a 22 	lds	r18, 0x225A	; 0x80225a <xTickCount>
    26d0:	30 91 5b 22 	lds	r19, 0x225B	; 0x80225b <xTickCount+0x1>
        const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
    26d4:	dc 01       	movw	r26, r24
    26d6:	11 96       	adiw	r26, 0x01	; 1
    26d8:	4d 91       	ld	r20, X+
    26da:	5c 91       	ld	r21, X
    26dc:	12 97       	sbiw	r26, 0x02	; 2
                xReturn = pdFALSE;
            }
            else
        #endif

        if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
    26de:	e0 91 54 22 	lds	r30, 0x2254	; 0x802254 <xNumOfOverflows>
    26e2:	fc 91       	ld	r31, X
    26e4:	fe 17       	cp	r31, r30
    26e6:	41 f0       	breq	.+16     	; 0x26f8 <xTaskCheckForTimeOut+0x32>
    26e8:	24 17       	cp	r18, r20
    26ea:	35 07       	cpc	r19, r21
    26ec:	28 f0       	brcs	.+10     	; 0x26f8 <xTaskCheckForTimeOut+0x32>
             * vTaskSetTimeout() was called, but has also overflowed since
             * vTaskSetTimeOut() was called.  It must have wrapped all the way
             * around and gone past again. This passed since vTaskSetTimeout()
             * was called. */
            xReturn = pdTRUE;
            *pxTicksToWait = ( TickType_t ) 0;
    26ee:	fb 01       	movw	r30, r22
    26f0:	10 82       	st	Z, r1
    26f2:	11 82       	std	Z+1, r1	; 0x01
            /* The tick count is greater than the time at which
             * vTaskSetTimeout() was called, but has also overflowed since
             * vTaskSetTimeOut() was called.  It must have wrapped all the way
             * around and gone past again. This passed since vTaskSetTimeout()
             * was called. */
            xReturn = pdTRUE;
    26f4:	81 e0       	ldi	r24, 0x01	; 1
            *pxTicksToWait = ( TickType_t ) 0;
    26f6:	14 c0       	rjmp	.+40     	; 0x2720 <xTaskCheckForTimeOut+0x5a>

    taskENTER_CRITICAL();
    {
        /* Minor optimisation.  The tick count cannot change in this block. */
        const TickType_t xConstTickCount = xTickCount;
        const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
    26f8:	24 1b       	sub	r18, r20
    26fa:	35 0b       	sbc	r19, r21
             * around and gone past again. This passed since vTaskSetTimeout()
             * was called. */
            xReturn = pdTRUE;
            *pxTicksToWait = ( TickType_t ) 0;
        }
        else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
    26fc:	db 01       	movw	r26, r22
    26fe:	4d 91       	ld	r20, X+
    2700:	5c 91       	ld	r21, X
    2702:	24 17       	cp	r18, r20
    2704:	35 07       	cpc	r19, r21
    2706:	40 f4       	brcc	.+16     	; 0x2718 <xTaskCheckForTimeOut+0x52>
    2708:	fb 01       	movw	r30, r22
        {
            /* Not a genuine timeout. Adjust parameters for time remaining. */
            *pxTicksToWait -= xElapsedTime;
    270a:	42 1b       	sub	r20, r18
    270c:	53 0b       	sbc	r21, r19
    270e:	40 83       	st	Z, r20
    2710:	51 83       	std	Z+1, r21	; 0x01
            vTaskInternalSetTimeOutState( pxTimeOut );
    2712:	ce df       	rcall	.-100    	; 0x26b0 <vTaskInternalSetTimeOutState>
            xReturn = pdFALSE;
    2714:	80 e0       	ldi	r24, 0x00	; 0
    2716:	04 c0       	rjmp	.+8      	; 0x2720 <xTaskCheckForTimeOut+0x5a>
        }
        else
        {
            *pxTicksToWait = ( TickType_t ) 0;
    2718:	fb 01       	movw	r30, r22
    271a:	10 82       	st	Z, r1
    271c:	11 82       	std	Z+1, r1	; 0x01
            xReturn = pdTRUE;
    271e:	81 e0       	ldi	r24, 0x01	; 1
        }
    }
    taskEXIT_CRITICAL();
    2720:	0f 90       	pop	r0
    2722:	0f be       	out	0x3f, r0	; 63

    return xReturn;
}
    2724:	08 95       	ret

00002726 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
    xYieldPending = pdTRUE;
    2726:	81 e0       	ldi	r24, 0x01	; 1
    2728:	80 93 55 22 	sts	0x2255, r24	; 0x802255 <xYieldPending>
    272c:	08 95       	ret

0000272e <prvInsertTimerInActiveList>:

    static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer,
                                                  const TickType_t xNextExpiryTime,
                                                  const TickType_t xTimeNow,
                                                  const TickType_t xCommandTime )
    {
    272e:	fc 01       	movw	r30, r24
        BaseType_t xProcessTimerNow = pdFALSE;

        listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
    2730:	62 83       	std	Z+2, r22	; 0x02
    2732:	73 83       	std	Z+3, r23	; 0x03
        listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
    2734:	80 87       	std	Z+8, r24	; 0x08
    2736:	91 87       	std	Z+9, r25	; 0x09

        if( xNextExpiryTime <= xTimeNow )
    2738:	46 17       	cp	r20, r22
    273a:	57 07       	cpc	r21, r23
    273c:	90 f0       	brcs	.+36     	; 0x2762 <prvInsertTimerInActiveList+0x34>
        {
            /* Has the expiry time elapsed between the command to start/reset a
             * timer was issued, and the time the command was processed? */
            if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
    273e:	42 1b       	sub	r20, r18
    2740:	53 0b       	sbc	r21, r19
    2742:	84 85       	ldd	r24, Z+12	; 0x0c
    2744:	95 85       	ldd	r25, Z+13	; 0x0d
    2746:	48 17       	cp	r20, r24
    2748:	59 07       	cpc	r21, r25
    274a:	e0 f4       	brcc	.+56     	; 0x2784 <prvInsertTimerInActiveList+0x56>
                 * processed actually exceeds the timers period.  */
                xProcessTimerNow = pdTRUE;
            }
            else
            {
                vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
    274c:	bf 01       	movw	r22, r30
    274e:	6e 5f       	subi	r22, 0xFE	; 254
    2750:	7f 4f       	sbci	r23, 0xFF	; 255
    2752:	80 91 b1 22 	lds	r24, 0x22B1	; 0x8022b1 <pxOverflowTimerList>
    2756:	90 91 b2 22 	lds	r25, 0x22B2	; 0x8022b2 <pxOverflowTimerList+0x1>
    275a:	0e 94 38 09 	call	0x1270	; 0x1270 <vListInsert>
    static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer,
                                                  const TickType_t xNextExpiryTime,
                                                  const TickType_t xTimeNow,
                                                  const TickType_t xCommandTime )
    {
        BaseType_t xProcessTimerNow = pdFALSE;
    275e:	80 e0       	ldi	r24, 0x00	; 0
    2760:	08 95       	ret
                vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
            }
        }
        else
        {
            if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
    2762:	42 17       	cp	r20, r18
    2764:	53 07       	cpc	r21, r19
    2766:	18 f4       	brcc	.+6      	; 0x276e <prvInsertTimerInActiveList+0x40>
    2768:	62 17       	cp	r22, r18
    276a:	73 07       	cpc	r23, r19
    276c:	68 f4       	brcc	.+26     	; 0x2788 <prvInsertTimerInActiveList+0x5a>
                 * its expiry time and should be processed immediately. */
                xProcessTimerNow = pdTRUE;
            }
            else
            {
                vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
    276e:	bf 01       	movw	r22, r30
    2770:	6e 5f       	subi	r22, 0xFE	; 254
    2772:	7f 4f       	sbci	r23, 0xFF	; 255
    2774:	80 91 b3 22 	lds	r24, 0x22B3	; 0x8022b3 <pxCurrentTimerList>
    2778:	90 91 b4 22 	lds	r25, 0x22B4	; 0x8022b4 <pxCurrentTimerList+0x1>
    277c:	0e 94 38 09 	call	0x1270	; 0x1270 <vListInsert>
    static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer,
                                                  const TickType_t xNextExpiryTime,
                                                  const TickType_t xTimeNow,
                                                  const TickType_t xCommandTime )
    {
        BaseType_t xProcessTimerNow = pdFALSE;
    2780:	80 e0       	ldi	r24, 0x00	; 0
    2782:	08 95       	ret
             * timer was issued, and the time the command was processed? */
            if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
            {
                /* The time between a command being issued and the command being
                 * processed actually exceeds the timers period.  */
                xProcessTimerNow = pdTRUE;
    2784:	81 e0       	ldi	r24, 0x01	; 1
    2786:	08 95       	ret
            if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
            {
                /* If, since the command was issued, the tick count has overflowed
                 * but the expiry time has not, then the timer must have already passed
                 * its expiry time and should be processed immediately. */
                xProcessTimerNow = pdTRUE;
    2788:	81 e0       	ldi	r24, 0x01	; 1
                vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
            }
        }

        return xProcessTimerNow;
    }
    278a:	08 95       	ret

0000278c <prvReloadTimer>:
/*-----------------------------------------------------------*/

    static void prvReloadTimer( Timer_t * const pxTimer,
                                TickType_t xExpiredTime,
                                const TickType_t xTimeNow )
    {
    278c:	ef 92       	push	r14
    278e:	ff 92       	push	r15
    2790:	0f 93       	push	r16
    2792:	1f 93       	push	r17
    2794:	cf 93       	push	r28
    2796:	df 93       	push	r29
    2798:	ec 01       	movw	r28, r24
    279a:	8b 01       	movw	r16, r22
    279c:	7a 01       	movw	r14, r20
        /* Insert the timer into the appropriate list for the next expiry time.
         * If the next expiry time has already passed, advance the expiry time,
         * call the callback function, and try again. */
        while( prvInsertTimerInActiveList( pxTimer, ( xExpiredTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xExpiredTime ) != pdFALSE )
    279e:	08 c0       	rjmp	.+16     	; 0x27b0 <prvReloadTimer+0x24>
        {
            /* Advance the expiry time. */
            xExpiredTime += pxTimer->xTimerPeriodInTicks;
    27a0:	8c 85       	ldd	r24, Y+12	; 0x0c
    27a2:	9d 85       	ldd	r25, Y+13	; 0x0d
    27a4:	08 0f       	add	r16, r24
    27a6:	19 1f       	adc	r17, r25

            /* Call the timer callback. */
            traceTIMER_EXPIRED( pxTimer );
            pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
    27a8:	e8 89       	ldd	r30, Y+16	; 0x10
    27aa:	f9 89       	ldd	r31, Y+17	; 0x11
    27ac:	ce 01       	movw	r24, r28
    27ae:	19 95       	eicall
                                const TickType_t xTimeNow )
    {
        /* Insert the timer into the appropriate list for the next expiry time.
         * If the next expiry time has already passed, advance the expiry time,
         * call the callback function, and try again. */
        while( prvInsertTimerInActiveList( pxTimer, ( xExpiredTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xExpiredTime ) != pdFALSE )
    27b0:	6c 85       	ldd	r22, Y+12	; 0x0c
    27b2:	7d 85       	ldd	r23, Y+13	; 0x0d
    27b4:	60 0f       	add	r22, r16
    27b6:	71 1f       	adc	r23, r17
    27b8:	98 01       	movw	r18, r16
    27ba:	a7 01       	movw	r20, r14
    27bc:	ce 01       	movw	r24, r28
    27be:	b7 df       	rcall	.-146    	; 0x272e <prvInsertTimerInActiveList>
    27c0:	81 11       	cpse	r24, r1
    27c2:	ee cf       	rjmp	.-36     	; 0x27a0 <prvReloadTimer+0x14>

            /* Call the timer callback. */
            traceTIMER_EXPIRED( pxTimer );
            pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
        }
    }
    27c4:	df 91       	pop	r29
    27c6:	cf 91       	pop	r28
    27c8:	1f 91       	pop	r17
    27ca:	0f 91       	pop	r16
    27cc:	ff 90       	pop	r15
    27ce:	ef 90       	pop	r14
    27d0:	08 95       	ret

000027d2 <prvProcessExpiredTimer>:
/*-----------------------------------------------------------*/

    static void prvProcessExpiredTimer( const TickType_t xNextExpireTime,
                                        const TickType_t xTimeNow )
    {
    27d2:	ef 92       	push	r14
    27d4:	ff 92       	push	r15
    27d6:	0f 93       	push	r16
    27d8:	1f 93       	push	r17
    27da:	cf 93       	push	r28
    27dc:	df 93       	push	r29
    27de:	8c 01       	movw	r16, r24
    27e0:	7b 01       	movw	r14, r22
        Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
    27e2:	e0 91 b3 22 	lds	r30, 0x22B3	; 0x8022b3 <pxCurrentTimerList>
    27e6:	f0 91 b4 22 	lds	r31, 0x22B4	; 0x8022b4 <pxCurrentTimerList+0x1>
    27ea:	05 80       	ldd	r0, Z+5	; 0x05
    27ec:	f6 81       	ldd	r31, Z+6	; 0x06
    27ee:	e0 2d       	mov	r30, r0
    27f0:	c6 81       	ldd	r28, Z+6	; 0x06
    27f2:	d7 81       	ldd	r29, Z+7	; 0x07

        /* Remove the timer from the list of active timers.  A check has already
         * been performed to ensure the list is not empty. */

        ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
    27f4:	ce 01       	movw	r24, r28
    27f6:	02 96       	adiw	r24, 0x02	; 2
    27f8:	0e 94 69 09 	call	0x12d2	; 0x12d2 <uxListRemove>

        /* If the timer is an auto-reload timer then calculate the next
         * expiry time and re-insert the timer in the list of active timers. */
        if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
    27fc:	8a 89       	ldd	r24, Y+18	; 0x12
    27fe:	82 ff       	sbrs	r24, 2
    2800:	05 c0       	rjmp	.+10     	; 0x280c <prvProcessExpiredTimer+0x3a>
        {
            prvReloadTimer( pxTimer, xNextExpireTime, xTimeNow );
    2802:	a7 01       	movw	r20, r14
    2804:	b8 01       	movw	r22, r16
    2806:	ce 01       	movw	r24, r28
    2808:	c1 df       	rcall	.-126    	; 0x278c <prvReloadTimer>
    280a:	02 c0       	rjmp	.+4      	; 0x2810 <prvProcessExpiredTimer+0x3e>
        }
        else
        {
            pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
    280c:	8e 7f       	andi	r24, 0xFE	; 254
    280e:	8a 8b       	std	Y+18, r24	; 0x12
        }

        /* Call the timer callback. */
        traceTIMER_EXPIRED( pxTimer );
        pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
    2810:	e8 89       	ldd	r30, Y+16	; 0x10
    2812:	f9 89       	ldd	r31, Y+17	; 0x11
    2814:	ce 01       	movw	r24, r28
    2816:	19 95       	eicall
    }
    2818:	df 91       	pop	r29
    281a:	cf 91       	pop	r28
    281c:	1f 91       	pop	r17
    281e:	0f 91       	pop	r16
    2820:	ff 90       	pop	r15
    2822:	ef 90       	pop	r14
    2824:	08 95       	ret

00002826 <prvSampleTimeNow>:
        return xNextExpireTime;
    }
/*-----------------------------------------------------------*/

    static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
    {
    2826:	0f 93       	push	r16
    2828:	1f 93       	push	r17
    282a:	cf 93       	push	r28
    282c:	df 93       	push	r29
    282e:	8c 01       	movw	r16, r24
        TickType_t xTimeNow;
        PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

        xTimeNow = xTaskGetTickCount();
    2830:	b5 db       	rcall	.-2198   	; 0x1f9c <xTaskGetTickCount>
    2832:	ec 01       	movw	r28, r24

        if( xTimeNow < xLastTime )
    2834:	80 91 ab 22 	lds	r24, 0x22AB	; 0x8022ab <xLastTime.4412>
    2838:	90 91 ac 22 	lds	r25, 0x22AC	; 0x8022ac <xLastTime.4412+0x1>
    283c:	c8 17       	cp	r28, r24
    283e:	d9 07       	cpc	r29, r25
    2840:	30 f5       	brcc	.+76     	; 0x288e <prvSampleTimeNow+0x68>

        /* The tick count has overflowed.  The timer lists must be switched.
         * If there are any timers still referenced from the current timer list
         * then they must have expired and should be processed before the lists
         * are switched. */
        while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
    2842:	e0 91 b3 22 	lds	r30, 0x22B3	; 0x8022b3 <pxCurrentTimerList>
    2846:	f0 91 b4 22 	lds	r31, 0x22B4	; 0x8022b4 <pxCurrentTimerList+0x1>
    284a:	80 81       	ld	r24, Z
    284c:	88 23       	and	r24, r24
    284e:	79 f0       	breq	.+30     	; 0x286e <prvSampleTimeNow+0x48>
        {
            xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
    2850:	05 80       	ldd	r0, Z+5	; 0x05
    2852:	f6 81       	ldd	r31, Z+6	; 0x06
    2854:	e0 2d       	mov	r30, r0

            /* Process the expired timer.  For auto-reload timers, be careful to
             * process only expirations that occur on the current list.  Further
             * expirations must wait until after the lists are switched. */
            prvProcessExpiredTimer( xNextExpireTime, tmrMAX_TIME_BEFORE_OVERFLOW );
    2856:	6f ef       	ldi	r22, 0xFF	; 255
    2858:	7f ef       	ldi	r23, 0xFF	; 255
    285a:	80 81       	ld	r24, Z
    285c:	91 81       	ldd	r25, Z+1	; 0x01
    285e:	b9 df       	rcall	.-142    	; 0x27d2 <prvProcessExpiredTimer>

        /* The tick count has overflowed.  The timer lists must be switched.
         * If there are any timers still referenced from the current timer list
         * then they must have expired and should be processed before the lists
         * are switched. */
        while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
    2860:	e0 91 b3 22 	lds	r30, 0x22B3	; 0x8022b3 <pxCurrentTimerList>
    2864:	f0 91 b4 22 	lds	r31, 0x22B4	; 0x8022b4 <pxCurrentTimerList+0x1>
    2868:	80 81       	ld	r24, Z
    286a:	81 11       	cpse	r24, r1
    286c:	f1 cf       	rjmp	.-30     	; 0x2850 <prvSampleTimeNow+0x2a>
             * expirations must wait until after the lists are switched. */
            prvProcessExpiredTimer( xNextExpireTime, tmrMAX_TIME_BEFORE_OVERFLOW );
        }

        pxTemp = pxCurrentTimerList;
        pxCurrentTimerList = pxOverflowTimerList;
    286e:	80 91 b1 22 	lds	r24, 0x22B1	; 0x8022b1 <pxOverflowTimerList>
    2872:	90 91 b2 22 	lds	r25, 0x22B2	; 0x8022b2 <pxOverflowTimerList+0x1>
    2876:	80 93 b3 22 	sts	0x22B3, r24	; 0x8022b3 <pxCurrentTimerList>
    287a:	90 93 b4 22 	sts	0x22B4, r25	; 0x8022b4 <pxCurrentTimerList+0x1>
        pxOverflowTimerList = pxTemp;
    287e:	e0 93 b1 22 	sts	0x22B1, r30	; 0x8022b1 <pxOverflowTimerList>
    2882:	f0 93 b2 22 	sts	0x22B2, r31	; 0x8022b2 <pxOverflowTimerList+0x1>
        xTimeNow = xTaskGetTickCount();

        if( xTimeNow < xLastTime )
        {
            prvSwitchTimerLists();
            *pxTimerListsWereSwitched = pdTRUE;
    2886:	81 e0       	ldi	r24, 0x01	; 1
    2888:	f8 01       	movw	r30, r16
    288a:	80 83       	st	Z, r24
    288c:	02 c0       	rjmp	.+4      	; 0x2892 <prvSampleTimeNow+0x6c>
        }
        else
        {
            *pxTimerListsWereSwitched = pdFALSE;
    288e:	f8 01       	movw	r30, r16
    2890:	10 82       	st	Z, r1
        }

        xLastTime = xTimeNow;
    2892:	c0 93 ab 22 	sts	0x22AB, r28	; 0x8022ab <xLastTime.4412>
    2896:	d0 93 ac 22 	sts	0x22AC, r29	; 0x8022ac <xLastTime.4412+0x1>

        return xTimeNow;
    }
    289a:	ce 01       	movw	r24, r28
    289c:	df 91       	pop	r29
    289e:	cf 91       	pop	r28
    28a0:	1f 91       	pop	r17
    28a2:	0f 91       	pop	r16
    28a4:	08 95       	ret

000028a6 <prvTimerTask>:
        pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
    }
/*-----------------------------------------------------------*/

    static portTASK_FUNCTION( prvTimerTask, pvParameters )
    {
    28a6:	cf 93       	push	r28
    28a8:	df 93       	push	r29
    28aa:	00 d0       	rcall	.+0      	; 0x28ac <prvTimerTask+0x6>
    28ac:	00 d0       	rcall	.+0      	; 0x28ae <prvTimerTask+0x8>
    28ae:	cd b7       	in	r28, 0x3d	; 61
    28b0:	de b7       	in	r29, 0x3e	; 62
            /* Obtain the time now to make an assessment as to whether the timer
             * has expired or not.  If obtaining the time causes the lists to switch
             * then don't process this timer as any timers that remained in the list
             * when the lists were switched will have been processed within the
             * prvSampleTimeNow() function. */
            xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
    28b2:	ce 01       	movw	r24, r28
    28b4:	01 96       	adiw	r24, 0x01	; 1
    28b6:	5c 01       	movw	r10, r24
        DaemonTaskMessage_t xMessage;
        Timer_t * pxTimer;
        BaseType_t xTimerListsWereSwitched;
        TickType_t xTimeNow;

        while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
    28b8:	08 2f       	mov	r16, r24
    28ba:	1b 2d       	mov	r17, r11
         * the timer with the nearest expiry time will expire.  If there are no
         * active timers then just set the next expire time to 0.  That will cause
         * this task to unblock when the tick count overflows, at which point the
         * timer lists will be switched and the next expiry time can be
         * re-assessed.  */
        *pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
    28bc:	e0 91 b3 22 	lds	r30, 0x22B3	; 0x8022b3 <pxCurrentTimerList>
    28c0:	f0 91 b4 22 	lds	r31, 0x22B4	; 0x8022b4 <pxCurrentTimerList+0x1>
    28c4:	80 81       	ld	r24, Z

        if( *pxListWasEmpty == pdFALSE )
    28c6:	88 23       	and	r24, r24
    28c8:	09 f4       	brne	.+2      	; 0x28cc <prvTimerTask+0x26>
    28ca:	a9 c0       	rjmp	.+338    	; 0x2a1e <prvTimerTask+0x178>
        {
            xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
    28cc:	05 80       	ldd	r0, Z+5	; 0x05
    28ce:	f6 81       	ldd	r31, Z+6	; 0x06
    28d0:	e0 2d       	mov	r30, r0
    28d2:	e0 80       	ld	r14, Z
    28d4:	f1 80       	ldd	r15, Z+1	; 0x01
                                            BaseType_t xListWasEmpty )
    {
        TickType_t xTimeNow;
        BaseType_t xTimerListsWereSwitched;

        vTaskSuspendAll();
    28d6:	5c db       	rcall	.-2376   	; 0x1f90 <vTaskSuspendAll>
            /* Obtain the time now to make an assessment as to whether the timer
             * has expired or not.  If obtaining the time causes the lists to switch
             * then don't process this timer as any timers that remained in the list
             * when the lists were switched will have been processed within the
             * prvSampleTimeNow() function. */
            xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
    28d8:	c5 01       	movw	r24, r10
    28da:	a5 df       	rcall	.-182    	; 0x2826 <prvSampleTimeNow>
    28dc:	6c 01       	movw	r12, r24

            if( xTimerListsWereSwitched == pdFALSE )
    28de:	89 81       	ldd	r24, Y+1	; 0x01
    28e0:	81 11       	cpse	r24, r1
    28e2:	17 c0       	rjmp	.+46     	; 0x2912 <prvTimerTask+0x6c>
            {
                /* The tick count has not overflowed, has the timer expired? */
                if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
    28e4:	ce 14       	cp	r12, r14
    28e6:	df 04       	cpc	r13, r15
                {
                    ( void ) xTaskResumeAll();
    28e8:	28 f0       	brcs	.+10     	; 0x28f4 <prvTimerTask+0x4e>
                    prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
    28ea:	7a dc       	rcall	.-1804   	; 0x21e0 <xTaskResumeAll>
    28ec:	b6 01       	movw	r22, r12
    28ee:	c7 01       	movw	r24, r14
    28f0:	70 df       	rcall	.-288    	; 0x27d2 <prvProcessExpiredTimer>
    28f2:	88 c0       	rjmp	.+272    	; 0x2a04 <prvTimerTask+0x15e>
            xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );

            if( xTimerListsWereSwitched == pdFALSE )
            {
                /* The tick count has not overflowed, has the timer expired? */
                if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
    28f4:	40 e0       	ldi	r20, 0x00	; 0
                        /* The current timer list is empty - is the overflow list
                         * also empty? */
                        xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
                    }

                    vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
    28f6:	b7 01       	movw	r22, r14
    28f8:	6c 19       	sub	r22, r12
    28fa:	7d 09       	sbc	r23, r13
    28fc:	80 91 af 22 	lds	r24, 0x22AF	; 0x8022af <xTimerQueue>
    2900:	90 91 b0 22 	lds	r25, 0x22B0	; 0x8022b0 <xTimerQueue+0x1>

                    if( xTaskResumeAll() == pdFALSE )
    2904:	75 d9       	rcall	.-3350   	; 0x1bf0 <vQueueWaitForMessageRestricted>
    2906:	6c dc       	rcall	.-1832   	; 0x21e0 <xTaskResumeAll>
    2908:	81 11       	cpse	r24, r1
                    {
                        /* Yield to wait for either a command to arrive, or the
                         * block time to expire.  If a command arrived between the
                         * critical section being exited and this yield then the yield
                         * will not cause the task to block. */
                        portYIELD_WITHIN_API();
    290a:	7c c0       	rjmp	.+248    	; 0x2a04 <prvTimerTask+0x15e>
    290c:	0e 94 4c 0a 	call	0x1498	; 0x1498 <vPortYield>
                    }
                }
            }
            else
            {
                ( void ) xTaskResumeAll();
    2910:	79 c0       	rjmp	.+242    	; 0x2a04 <prvTimerTask+0x15e>
    2912:	66 dc       	rcall	.-1844   	; 0x21e0 <xTaskResumeAll>
    2914:	77 c0       	rjmp	.+238    	; 0x2a04 <prvTimerTask+0x15e>
                }
            #endif /* INCLUDE_xTimerPendFunctionCall */

            /* Commands that are positive are timer commands rather than pended
             * function calls. */
            if( xMessage.xMessageID >= ( BaseType_t ) 0 )
    2916:	89 81       	ldd	r24, Y+1	; 0x01
    2918:	88 23       	and	r24, r24
    291a:	0c f4       	brge	.+2      	; 0x291e <prvTimerTask+0x78>
    291c:	73 c0       	rjmp	.+230    	; 0x2a04 <prvTimerTask+0x15e>
            {
                /* The messages uses the xTimerParameters member to work on a
                 * software timer. */
                pxTimer = xMessage.u.xTimerParameters.pxTimer;
    291e:	ec 80       	ldd	r14, Y+4	; 0x04
    2920:	fd 80       	ldd	r15, Y+5	; 0x05

                if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
    2922:	d7 01       	movw	r26, r14
    2924:	1a 96       	adiw	r26, 0x0a	; 10
    2926:	8d 91       	ld	r24, X+
    2928:	9c 91       	ld	r25, X
    292a:	1b 97       	sbiw	r26, 0x0b	; 11
    292c:	89 2b       	or	r24, r25
                {
                    /* The timer is in a list, remove it. */
                    ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
    292e:	21 f0       	breq	.+8      	; 0x2938 <prvTimerTask+0x92>
    2930:	c7 01       	movw	r24, r14
    2932:	02 96       	adiw	r24, 0x02	; 2
    2934:	0e 94 69 09 	call	0x12d2	; 0x12d2 <uxListRemove>
                 *  it must be present in the function call.  prvSampleTimeNow() must be
                 *  called after the message is received from xTimerQueue so there is no
                 *  possibility of a higher priority task adding a message to the message
                 *  queue with a time that is ahead of the timer daemon task (because it
                 *  pre-empted the timer daemon task after the xTimeNow value was set). */
                xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
    2938:	ce 01       	movw	r24, r28
    293a:	06 96       	adiw	r24, 0x06	; 6
    293c:	74 df       	rcall	.-280    	; 0x2826 <prvSampleTimeNow>
    293e:	6c 01       	movw	r12, r24

                switch( xMessage.xMessageID )
    2940:	e9 81       	ldd	r30, Y+1	; 0x01
    2942:	8e 2f       	mov	r24, r30
    2944:	ee 0f       	add	r30, r30
    2946:	99 0b       	sbc	r25, r25
    2948:	aa 0b       	sbc	r26, r26
    294a:	bb 0b       	sbc	r27, r27
    294c:	fc 01       	movw	r30, r24
    294e:	31 97       	sbiw	r30, 0x01	; 1
    2950:	e9 30       	cpi	r30, 0x09	; 9
    2952:	f1 05       	cpc	r31, r1
    2954:	08 f0       	brcs	.+2      	; 0x2958 <prvTimerTask+0xb2>
    2956:	56 c0       	rjmp	.+172    	; 0x2a04 <prvTimerTask+0x15e>
    2958:	88 27       	eor	r24, r24
    295a:	e2 50       	subi	r30, 0x02	; 2
    295c:	ff 4f       	sbci	r31, 0xFF	; 255
    295e:	8f 4f       	sbci	r24, 0xFF	; 255
    2960:	32 c3       	rjmp	.+1636   	; 0x2fc6 <__tablejump2__>
                    case tmrCOMMAND_START:
                    case tmrCOMMAND_START_FROM_ISR:
                    case tmrCOMMAND_RESET:
                    case tmrCOMMAND_RESET_FROM_ISR:
                        /* Start or restart a timer. */
                        pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
    2962:	f7 01       	movw	r30, r14
    2964:	82 89       	ldd	r24, Z+18	; 0x12
    2966:	81 60       	ori	r24, 0x01	; 1

                        if( prvInsertTimerInActiveList( pxTimer, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
    2968:	82 8b       	std	Z+18, r24	; 0x12
    296a:	2a 81       	ldd	r18, Y+2	; 0x02
    296c:	3b 81       	ldd	r19, Y+3	; 0x03
    296e:	64 85       	ldd	r22, Z+12	; 0x0c
    2970:	75 85       	ldd	r23, Z+13	; 0x0d
    2972:	62 0f       	add	r22, r18
    2974:	73 1f       	adc	r23, r19
    2976:	a6 01       	movw	r20, r12
    2978:	c7 01       	movw	r24, r14
    297a:	d9 de       	rcall	.-590    	; 0x272e <prvInsertTimerInActiveList>
    297c:	88 23       	and	r24, r24
    297e:	09 f4       	brne	.+2      	; 0x2982 <prvTimerTask+0xdc>
    2980:	41 c0       	rjmp	.+130    	; 0x2a04 <prvTimerTask+0x15e>
                        {
                            /* The timer expired before it was added to the active
                             * timer list.  Process it now. */
                            if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
    2982:	d7 01       	movw	r26, r14
    2984:	52 96       	adiw	r26, 0x12	; 18
    2986:	8c 91       	ld	r24, X
    2988:	52 97       	sbiw	r26, 0x12	; 18
    298a:	82 ff       	sbrs	r24, 2
    298c:	0c c0       	rjmp	.+24     	; 0x29a6 <prvTimerTask+0x100>
                            {
                                prvReloadTimer( pxTimer, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow );
    298e:	6a 81       	ldd	r22, Y+2	; 0x02
    2990:	7b 81       	ldd	r23, Y+3	; 0x03
    2992:	1c 96       	adiw	r26, 0x0c	; 12
    2994:	8d 91       	ld	r24, X+
    2996:	9c 91       	ld	r25, X
    2998:	1d 97       	sbiw	r26, 0x0d	; 13
    299a:	68 0f       	add	r22, r24
    299c:	79 1f       	adc	r23, r25
    299e:	a6 01       	movw	r20, r12
    29a0:	c7 01       	movw	r24, r14
    29a2:	f4 de       	rcall	.-536    	; 0x278c <prvReloadTimer>
    29a4:	03 c0       	rjmp	.+6      	; 0x29ac <prvTimerTask+0x106>
                            }
                            else
                            {
                                pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
    29a6:	8e 7f       	andi	r24, 0xFE	; 254
    29a8:	f7 01       	movw	r30, r14
    29aa:	82 8b       	std	Z+18, r24	; 0x12
                            }

                            /* Call the timer callback. */
                            traceTIMER_EXPIRED( pxTimer );
                            pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
    29ac:	d7 01       	movw	r26, r14
    29ae:	50 96       	adiw	r26, 0x10	; 16
    29b0:	ed 91       	ld	r30, X+
    29b2:	fc 91       	ld	r31, X
    29b4:	51 97       	sbiw	r26, 0x11	; 17
    29b6:	c7 01       	movw	r24, r14
    29b8:	19 95       	eicall
    29ba:	24 c0       	rjmp	.+72     	; 0x2a04 <prvTimerTask+0x15e>
                        break;

                    case tmrCOMMAND_STOP:
                    case tmrCOMMAND_STOP_FROM_ISR:
                        /* The timer has already been removed from the active list. */
                        pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
    29bc:	f7 01       	movw	r30, r14
    29be:	82 89       	ldd	r24, Z+18	; 0x12
    29c0:	8e 7f       	andi	r24, 0xFE	; 254
    29c2:	82 8b       	std	Z+18, r24	; 0x12
    29c4:	1f c0       	rjmp	.+62     	; 0x2a04 <prvTimerTask+0x15e>
                        break;

                    case tmrCOMMAND_CHANGE_PERIOD:
                    case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR:
                        pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
    29c6:	d7 01       	movw	r26, r14
    29c8:	52 96       	adiw	r26, 0x12	; 18
    29ca:	8c 91       	ld	r24, X
    29cc:	52 97       	sbiw	r26, 0x12	; 18
    29ce:	81 60       	ori	r24, 0x01	; 1
    29d0:	52 96       	adiw	r26, 0x12	; 18
    29d2:	8c 93       	st	X, r24
    29d4:	52 97       	sbiw	r26, 0x12	; 18
                        pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
    29d6:	6a 81       	ldd	r22, Y+2	; 0x02
    29d8:	7b 81       	ldd	r23, Y+3	; 0x03
    29da:	1c 96       	adiw	r26, 0x0c	; 12
    29dc:	6d 93       	st	X+, r22
    29de:	7c 93       	st	X, r23
                         * be longer or shorter than the old one.  The command time is
                         * therefore set to the current time, and as the period cannot
                         * be zero the next expiry time can only be in the future,
                         * meaning (unlike for the xTimerStart() case above) there is
                         * no fail case that needs to be handled here. */
                        ( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
    29e0:	1d 97       	sbiw	r26, 0x0d	; 13
    29e2:	6c 0d       	add	r22, r12
    29e4:	7d 1d       	adc	r23, r13
    29e6:	96 01       	movw	r18, r12
    29e8:	a6 01       	movw	r20, r12
    29ea:	c7 01       	movw	r24, r14
    29ec:	a0 de       	rcall	.-704    	; 0x272e <prvInsertTimerInActiveList>
    29ee:	0a c0       	rjmp	.+20     	; 0x2a04 <prvTimerTask+0x15e>
                        #if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
                            {
                                /* The timer has already been removed from the active list,
                                 * just free up the memory if the memory was dynamically
                                 * allocated. */
                                if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
    29f0:	f7 01       	movw	r30, r14
    29f2:	82 89       	ldd	r24, Z+18	; 0x12
    29f4:	81 fd       	sbrc	r24, 1
    29f6:	04 c0       	rjmp	.+8      	; 0x2a00 <prvTimerTask+0x15a>
                                {
                                    vPortFree( pxTimer );
    29f8:	c7 01       	movw	r24, r14
    29fa:	0e 94 0b 0b 	call	0x1616	; 0x1616 <vPortFree>
    29fe:	02 c0       	rjmp	.+4      	; 0x2a04 <prvTimerTask+0x15e>
                                }
                                else
                                {
                                    pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
    2a00:	8e 7f       	andi	r24, 0xFE	; 254
    2a02:	82 8b       	std	Z+18, r24	; 0x12
        DaemonTaskMessage_t xMessage;
        Timer_t * pxTimer;
        BaseType_t xTimerListsWereSwitched;
        TickType_t xTimeNow;

        while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
    2a04:	40 e0       	ldi	r20, 0x00	; 0
    2a06:	50 e0       	ldi	r21, 0x00	; 0
    2a08:	60 2f       	mov	r22, r16
    2a0a:	71 2f       	mov	r23, r17
    2a0c:	80 91 af 22 	lds	r24, 0x22AF	; 0x8022af <xTimerQueue>
    2a10:	90 91 b0 22 	lds	r25, 0x22B0	; 0x8022b0 <xTimerQueue+0x1>
    2a14:	0e 94 fb 0c 	call	0x19f6	; 0x19f6 <xQueueReceive>
    2a18:	81 11       	cpse	r24, r1
                                            BaseType_t xListWasEmpty )
    {
        TickType_t xTimeNow;
        BaseType_t xTimerListsWereSwitched;

        vTaskSuspendAll();
    2a1a:	7d cf       	rjmp	.-262    	; 0x2916 <prvTimerTask+0x70>
    2a1c:	4f cf       	rjmp	.-354    	; 0x28bc <prvTimerTask+0x16>
            /* Obtain the time now to make an assessment as to whether the timer
             * has expired or not.  If obtaining the time causes the lists to switch
             * then don't process this timer as any timers that remained in the list
             * when the lists were switched will have been processed within the
             * prvSampleTimeNow() function. */
            xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
    2a1e:	b8 da       	rcall	.-2704   	; 0x1f90 <vTaskSuspendAll>
    2a20:	c5 01       	movw	r24, r10
    2a22:	01 df       	rcall	.-510    	; 0x2826 <prvSampleTimeNow>
    2a24:	6c 01       	movw	r12, r24

            if( xTimerListsWereSwitched == pdFALSE )
    2a26:	89 81       	ldd	r24, Y+1	; 0x01
    2a28:	81 11       	cpse	r24, r1
    2a2a:	73 cf       	rjmp	.-282    	; 0x2912 <prvTimerTask+0x6c>
                     * case when the current timer list is empty. */
                    if( xListWasEmpty != pdFALSE )
                    {
                        /* The current timer list is empty - is the overflow list
                         * also empty? */
                        xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
    2a2c:	e0 91 b1 22 	lds	r30, 0x22B1	; 0x8022b1 <pxOverflowTimerList>
    2a30:	f0 91 b2 22 	lds	r31, 0x22B2	; 0x8022b2 <pxOverflowTimerList+0x1>
    2a34:	80 81       	ld	r24, Z
    2a36:	41 e0       	ldi	r20, 0x01	; 1
    2a38:	81 11       	cpse	r24, r1
    2a3a:	40 e0       	ldi	r20, 0x00	; 0
            xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
        }
        else
        {
            /* Ensure the task unblocks when the tick count rolls over. */
            xNextExpireTime = ( TickType_t ) 0U;
    2a3c:	e1 2c       	mov	r14, r1
    2a3e:	f1 2c       	mov	r15, r1
    2a40:	5a cf       	rjmp	.-332    	; 0x28f6 <prvTimerTask+0x50>

00002a42 <prvCheckForValidListAndQueue>:
    static void prvCheckForValidListAndQueue( void )
    {
        /* Check that the list from which active timers are referenced, and the
         * queue used to communicate with the timer service, have been
         * initialised. */
        taskENTER_CRITICAL();
    2a42:	0f b6       	in	r0, 0x3f	; 63
    2a44:	f8 94       	cli
    2a46:	0f 92       	push	r0
        {
            if( xTimerQueue == NULL )
    2a48:	80 91 af 22 	lds	r24, 0x22AF	; 0x8022af <xTimerQueue>
    2a4c:	90 91 b0 22 	lds	r25, 0x22B0	; 0x8022b0 <xTimerQueue+0x1>
    2a50:	89 2b       	or	r24, r25
    2a52:	e9 f4       	brne	.+58     	; 0x2a8e <prvCheckForValidListAndQueue+0x4c>
            {
                vListInitialise( &xActiveTimerList1 );
    2a54:	8e eb       	ldi	r24, 0xBE	; 190
    2a56:	92 e2       	ldi	r25, 0x22	; 34
    2a58:	0e 94 26 09 	call	0x124c	; 0x124c <vListInitialise>
                vListInitialise( &xActiveTimerList2 );
    2a5c:	85 eb       	ldi	r24, 0xB5	; 181
    2a5e:	92 e2       	ldi	r25, 0x22	; 34
    2a60:	0e 94 26 09 	call	0x124c	; 0x124c <vListInitialise>
                pxCurrentTimerList = &xActiveTimerList1;
    2a64:	8e eb       	ldi	r24, 0xBE	; 190
    2a66:	92 e2       	ldi	r25, 0x22	; 34
    2a68:	80 93 b3 22 	sts	0x22B3, r24	; 0x8022b3 <pxCurrentTimerList>
    2a6c:	90 93 b4 22 	sts	0x22B4, r25	; 0x8022b4 <pxCurrentTimerList+0x1>
                pxOverflowTimerList = &xActiveTimerList2;
    2a70:	85 eb       	ldi	r24, 0xB5	; 181
    2a72:	92 e2       	ldi	r25, 0x22	; 34
    2a74:	80 93 b1 22 	sts	0x22B1, r24	; 0x8022b1 <pxOverflowTimerList>
    2a78:	90 93 b2 22 	sts	0x22B2, r25	; 0x8022b2 <pxOverflowTimerList+0x1>

                        xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
                    }
                #else
                    {
                        xTimerQueue = xQueueCreate( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, sizeof( DaemonTaskMessage_t ) );
    2a7c:	40 e0       	ldi	r20, 0x00	; 0
    2a7e:	65 e0       	ldi	r22, 0x05	; 5
    2a80:	8a e0       	ldi	r24, 0x0A	; 10
    2a82:	0e 94 2e 0c 	call	0x185c	; 0x185c <xQueueGenericCreate>
    2a86:	80 93 af 22 	sts	0x22AF, r24	; 0x8022af <xTimerQueue>
    2a8a:	90 93 b0 22 	sts	0x22B0, r25	; 0x8022b0 <xTimerQueue+0x1>
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
        taskEXIT_CRITICAL();
    2a8e:	0f 90       	pop	r0
    2a90:	0f be       	out	0x3f, r0	; 63
    2a92:	08 95       	ret

00002a94 <xTimerCreateTimerTask>:
                                       TimerCallbackFunction_t pxCallbackFunction,
                                       Timer_t * pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

    BaseType_t xTimerCreateTimerTask( void )
    {
    2a94:	ef 92       	push	r14
    2a96:	ff 92       	push	r15
    2a98:	0f 93       	push	r16

        /* This function is called when the scheduler is started if
         * configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
         * timer service task has been created/initialised.  If timers have already
         * been created then the initialisation will already have been performed. */
        prvCheckForValidListAndQueue();
    2a9a:	d3 df       	rcall	.-90     	; 0x2a42 <prvCheckForValidListAndQueue>

        if( xTimerQueue != NULL )
    2a9c:	80 91 af 22 	lds	r24, 0x22AF	; 0x8022af <xTimerQueue>
    2aa0:	90 91 b0 22 	lds	r25, 0x22B0	; 0x8022b0 <xTimerQueue+0x1>
    2aa4:	89 2b       	or	r24, r25
    2aa6:	89 f0       	breq	.+34     	; 0x2aca <xTimerCreateTimerTask+0x36>
                        xReturn = pdPASS;
                    }
                }
            #else /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */
                {
                    xReturn = xTaskCreate( prvTimerTask,
    2aa8:	0f 2e       	mov	r0, r31
    2aaa:	fd ea       	ldi	r31, 0xAD	; 173
    2aac:	ef 2e       	mov	r14, r31
    2aae:	f2 e2       	ldi	r31, 0x22	; 34
    2ab0:	ff 2e       	mov	r15, r31
    2ab2:	f0 2d       	mov	r31, r0
    2ab4:	03 e0       	ldi	r16, 0x03	; 3
    2ab6:	20 e0       	ldi	r18, 0x00	; 0
    2ab8:	30 e0       	ldi	r19, 0x00	; 0
    2aba:	45 e5       	ldi	r20, 0x55	; 85
    2abc:	50 e0       	ldi	r21, 0x00	; 0
    2abe:	63 e1       	ldi	r22, 0x13	; 19
    2ac0:	70 e2       	ldi	r23, 0x20	; 32
    2ac2:	83 e5       	ldi	r24, 0x53	; 83
    2ac4:	94 e1       	ldi	r25, 0x14	; 20
    2ac6:	13 d9       	rcall	.-3546   	; 0x1cee <xTaskCreate>
    2ac8:	01 c0       	rjmp	.+2      	; 0x2acc <xTimerCreateTimerTask+0x38>
                                       Timer_t * pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

    BaseType_t xTimerCreateTimerTask( void )
    {
        BaseType_t xReturn = pdFAIL;
    2aca:	80 e0       	ldi	r24, 0x00	; 0
            mtCOVERAGE_TEST_MARKER();
        }

        configASSERT( xReturn );
        return xReturn;
    }
    2acc:	0f 91       	pop	r16
    2ace:	ff 90       	pop	r15
    2ad0:	ef 90       	pop	r14
    2ad2:	08 95       	ret

00002ad4 <ioport_configure_port_pin>:
#include "ioport_compat.h"

#if defined(IOPORT_XMEGA_COMPAT)
void ioport_configure_port_pin(void *port, pin_mask_t pin_mask,
		port_pin_flags_t flags)
{
    2ad4:	cf 93       	push	r28
    2ad6:	df 93       	push	r29
    2ad8:	fc 01       	movw	r30, r24
	uint8_t pin;

	for (pin = 0; pin < 8; pin++) {
		if (pin_mask & (1 << pin)) {
			*((uint8_t *)port + PORT_PIN0CTRL + pin) = flags >> 8;
    2ada:	20 e0       	ldi	r18, 0x00	; 0
    2adc:	30 e0       	ldi	r19, 0x00	; 0
		port_pin_flags_t flags)
{
	uint8_t pin;

	for (pin = 0; pin < 8; pin++) {
		if (pin_mask & (1 << pin)) {
    2ade:	c6 2f       	mov	r28, r22
    2ae0:	d0 e0       	ldi	r29, 0x00	; 0
    2ae2:	de 01       	movw	r26, r28
    2ae4:	02 2e       	mov	r0, r18
    2ae6:	02 c0       	rjmp	.+4      	; 0x2aec <ioport_configure_port_pin+0x18>
    2ae8:	b5 95       	asr	r27
    2aea:	a7 95       	ror	r26
    2aec:	0a 94       	dec	r0
    2aee:	e2 f7       	brpl	.-8      	; 0x2ae8 <ioport_configure_port_pin+0x14>
    2af0:	a0 fd       	sbrc	r26, 0
			*((uint8_t *)port + PORT_PIN0CTRL + pin) = flags >> 8;
    2af2:	50 8b       	std	Z+16, r21	; 0x10
    2af4:	2f 5f       	subi	r18, 0xFF	; 255
    2af6:	3f 4f       	sbci	r19, 0xFF	; 255
    2af8:	31 96       	adiw	r30, 0x01	; 1
void ioport_configure_port_pin(void *port, pin_mask_t pin_mask,
		port_pin_flags_t flags)
{
	uint8_t pin;

	for (pin = 0; pin < 8; pin++) {
    2afa:	28 30       	cpi	r18, 0x08	; 8
    2afc:	31 05       	cpc	r19, r1
    2afe:	89 f7       	brne	.-30     	; 0x2ae2 <ioport_configure_port_pin+0xe>
		if (pin_mask & (1 << pin)) {
			*((uint8_t *)port + PORT_PIN0CTRL + pin) = flags >> 8;
		}
	}
	/* Select direction and initial pin state */
	if (flags & IOPORT_DIR_OUTPUT) {
    2b00:	40 ff       	sbrs	r20, 0
    2b02:	0a c0       	rjmp	.+20     	; 0x2b18 <ioport_configure_port_pin+0x44>
		if (flags & IOPORT_INIT_HIGH) {
    2b04:	41 ff       	sbrs	r20, 1
    2b06:	03 c0       	rjmp	.+6      	; 0x2b0e <ioport_configure_port_pin+0x3a>
			*((uint8_t *)port + PORT_OUTSET) = pin_mask;
    2b08:	fc 01       	movw	r30, r24
    2b0a:	65 83       	std	Z+5, r22	; 0x05
    2b0c:	02 c0       	rjmp	.+4      	; 0x2b12 <ioport_configure_port_pin+0x3e>
		} else {
			*((uint8_t *)port + PORT_OUTCLR) = pin_mask;
    2b0e:	fc 01       	movw	r30, r24
    2b10:	66 83       	std	Z+6, r22	; 0x06
		}

		*((uint8_t *)port + PORT_DIRSET) = pin_mask;
    2b12:	fc 01       	movw	r30, r24
    2b14:	61 83       	std	Z+1, r22	; 0x01
    2b16:	02 c0       	rjmp	.+4      	; 0x2b1c <ioport_configure_port_pin+0x48>
	} else {
		*((uint8_t *)port + PORT_DIRCLR) = pin_mask;
    2b18:	fc 01       	movw	r30, r24
    2b1a:	62 83       	std	Z+2, r22	; 0x02
	}
}
    2b1c:	df 91       	pop	r29
    2b1e:	cf 91       	pop	r28
    2b20:	08 95       	ret

00002b22 <board_init>:
 * \param flags Bitmask of flags specifying additional configuration
 * parameters.
 */
static inline void ioport_configure_pin(port_pin_t pin, port_pin_flags_t flags)
{
	ioport_configure_port_pin(arch_ioport_pin_to_base(pin),
    2b22:	43 e0       	ldi	r20, 0x03	; 3
    2b24:	50 e0       	ldi	r21, 0x00	; 0
    2b26:	61 e0       	ldi	r22, 0x01	; 1
    2b28:	80 ee       	ldi	r24, 0xE0	; 224
    2b2a:	97 e0       	ldi	r25, 0x07	; 7
    2b2c:	d3 df       	rcall	.-90     	; 0x2ad4 <ioport_configure_port_pin>
    2b2e:	43 e0       	ldi	r20, 0x03	; 3
    2b30:	50 e0       	ldi	r21, 0x00	; 0
    2b32:	62 e0       	ldi	r22, 0x02	; 2
    2b34:	80 ee       	ldi	r24, 0xE0	; 224
    2b36:	97 e0       	ldi	r25, 0x07	; 7
    2b38:	cd df       	rcall	.-102    	; 0x2ad4 <ioport_configure_port_pin>
    2b3a:	43 e0       	ldi	r20, 0x03	; 3
    2b3c:	50 e0       	ldi	r21, 0x00	; 0
    2b3e:	60 e1       	ldi	r22, 0x10	; 16
    2b40:	80 e6       	ldi	r24, 0x60	; 96
    2b42:	96 e0       	ldi	r25, 0x06	; 6
    2b44:	c7 df       	rcall	.-114    	; 0x2ad4 <ioport_configure_port_pin>
    2b46:	41 e0       	ldi	r20, 0x01	; 1
    2b48:	50 e4       	ldi	r21, 0x40	; 64
    2b4a:	60 e2       	ldi	r22, 0x20	; 32
    2b4c:	80 e6       	ldi	r24, 0x60	; 96
    2b4e:	96 e0       	ldi	r25, 0x06	; 6
    2b50:	c1 df       	rcall	.-126    	; 0x2ad4 <ioport_configure_port_pin>
    2b52:	40 e0       	ldi	r20, 0x00	; 0
    2b54:	5b e1       	ldi	r21, 0x1B	; 27
    2b56:	60 e2       	ldi	r22, 0x20	; 32
    2b58:	80 e8       	ldi	r24, 0x80	; 128
    2b5a:	96 e0       	ldi	r25, 0x06	; 6
    2b5c:	bb df       	rcall	.-138    	; 0x2ad4 <ioport_configure_port_pin>
    2b5e:	40 e0       	ldi	r20, 0x00	; 0
    2b60:	5b e1       	ldi	r21, 0x1B	; 27
    2b62:	62 e0       	ldi	r22, 0x02	; 2
    2b64:	80 ea       	ldi	r24, 0xA0	; 160
    2b66:	96 e0       	ldi	r25, 0x06	; 6
    2b68:	b5 df       	rcall	.-150    	; 0x2ad4 <ioport_configure_port_pin>
    2b6a:	40 e0       	ldi	r20, 0x00	; 0
    2b6c:	5b e1       	ldi	r21, 0x1B	; 27
    2b6e:	64 e0       	ldi	r22, 0x04	; 4
    2b70:	80 ea       	ldi	r24, 0xA0	; 160
    2b72:	96 e0       	ldi	r25, 0x06	; 6
    2b74:	af df       	rcall	.-162    	; 0x2ad4 <ioport_configure_port_pin>
    2b76:	43 e0       	ldi	r20, 0x03	; 3
    2b78:	50 e0       	ldi	r21, 0x00	; 0
    2b7a:	62 e0       	ldi	r22, 0x02	; 2
    2b7c:	80 e6       	ldi	r24, 0x60	; 96
    2b7e:	96 e0       	ldi	r25, 0x06	; 6
    2b80:	a9 df       	rcall	.-174    	; 0x2ad4 <ioport_configure_port_pin>
    2b82:	43 e0       	ldi	r20, 0x03	; 3
    2b84:	50 e0       	ldi	r21, 0x00	; 0
    2b86:	68 e0       	ldi	r22, 0x08	; 8
    2b88:	80 e6       	ldi	r24, 0x60	; 96
    2b8a:	96 e0       	ldi	r25, 0x06	; 6
    2b8c:	a3 df       	rcall	.-186    	; 0x2ad4 <ioport_configure_port_pin>
    2b8e:	43 e0       	ldi	r20, 0x03	; 3
    2b90:	50 e0       	ldi	r21, 0x00	; 0
    2b92:	68 e0       	ldi	r22, 0x08	; 8
    2b94:	80 ea       	ldi	r24, 0xA0	; 160
    2b96:	96 e0       	ldi	r25, 0x06	; 6
    2b98:	9d df       	rcall	.-198    	; 0x2ad4 <ioport_configure_port_pin>
    2b9a:	43 e0       	ldi	r20, 0x03	; 3
    2b9c:	50 e0       	ldi	r21, 0x00	; 0
    2b9e:	61 e0       	ldi	r22, 0x01	; 1
    2ba0:	80 e6       	ldi	r24, 0x60	; 96
    2ba2:	96 e0       	ldi	r25, 0x06	; 6
    2ba4:	97 df       	rcall	.-210    	; 0x2ad4 <ioport_configure_port_pin>
    2ba6:	43 e0       	ldi	r20, 0x03	; 3
    2ba8:	50 e0       	ldi	r21, 0x00	; 0
    2baa:	68 e0       	ldi	r22, 0x08	; 8
    2bac:	80 e0       	ldi	r24, 0x00	; 0
    2bae:	96 e0       	ldi	r25, 0x06	; 6
    2bb0:	91 df       	rcall	.-222    	; 0x2ad4 <ioport_configure_port_pin>
    2bb2:	41 e0       	ldi	r20, 0x01	; 1
    2bb4:	50 e0       	ldi	r21, 0x00	; 0
    2bb6:	60 e1       	ldi	r22, 0x10	; 16
    2bb8:	80 e8       	ldi	r24, 0x80	; 128
    2bba:	96 e0       	ldi	r25, 0x06	; 6
    2bbc:	8b df       	rcall	.-234    	; 0x2ad4 <ioport_configure_port_pin>
    2bbe:	43 e0       	ldi	r20, 0x03	; 3
    2bc0:	50 e0       	ldi	r21, 0x00	; 0
    2bc2:	62 e0       	ldi	r22, 0x02	; 2
    2bc4:	80 e6       	ldi	r24, 0x60	; 96
    2bc6:	96 e0       	ldi	r25, 0x06	; 6
    2bc8:	85 df       	rcall	.-246    	; 0x2ad4 <ioport_configure_port_pin>
    2bca:	43 e0       	ldi	r20, 0x03	; 3
    2bcc:	50 e0       	ldi	r21, 0x00	; 0
    2bce:	68 e0       	ldi	r22, 0x08	; 8
    2bd0:	80 e6       	ldi	r24, 0x60	; 96
    2bd2:	96 e0       	ldi	r25, 0x06	; 6
    2bd4:	7f df       	rcall	.-258    	; 0x2ad4 <ioport_configure_port_pin>
    2bd6:	40 e0       	ldi	r20, 0x00	; 0
    2bd8:	50 e0       	ldi	r21, 0x00	; 0
    2bda:	64 e0       	ldi	r22, 0x04	; 4
    2bdc:	80 e6       	ldi	r24, 0x60	; 96
    2bde:	96 e0       	ldi	r25, 0x06	; 6
    2be0:	79 df       	rcall	.-270    	; 0x2ad4 <ioport_configure_port_pin>
    2be2:	43 e0       	ldi	r20, 0x03	; 3
    2be4:	50 e0       	ldi	r21, 0x00	; 0
    2be6:	60 e1       	ldi	r22, 0x10	; 16
    2be8:	80 ea       	ldi	r24, 0xA0	; 160
    2bea:	96 e0       	ldi	r25, 0x06	; 6
    2bec:	73 df       	rcall	.-282    	; 0x2ad4 <ioport_configure_port_pin>
    2bee:	40 e0       	ldi	r20, 0x00	; 0
    2bf0:	50 e0       	ldi	r21, 0x00	; 0
    2bf2:	61 e0       	ldi	r22, 0x01	; 1
    2bf4:	80 e0       	ldi	r24, 0x00	; 0
    2bf6:	96 e0       	ldi	r25, 0x06	; 6
    2bf8:	6d df       	rcall	.-294    	; 0x2ad4 <ioport_configure_port_pin>
    2bfa:	40 e0       	ldi	r20, 0x00	; 0
    2bfc:	50 e0       	ldi	r21, 0x00	; 0
    2bfe:	64 e0       	ldi	r22, 0x04	; 4
    2c00:	80 e0       	ldi	r24, 0x00	; 0
    2c02:	96 e0       	ldi	r25, 0x06	; 6
    2c04:	67 df       	rcall	.-306    	; 0x2ad4 <ioport_configure_port_pin>
    2c06:	40 e0       	ldi	r20, 0x00	; 0
    2c08:	50 e0       	ldi	r21, 0x00	; 0
    2c0a:	62 e0       	ldi	r22, 0x02	; 2
    2c0c:	80 e2       	ldi	r24, 0x20	; 32
    2c0e:	96 e0       	ldi	r25, 0x06	; 6
    2c10:	61 df       	rcall	.-318    	; 0x2ad4 <ioport_configure_port_pin>
    2c12:	43 e0       	ldi	r20, 0x03	; 3
    2c14:	50 e0       	ldi	r21, 0x00	; 0
    2c16:	68 e0       	ldi	r22, 0x08	; 8
    2c18:	80 e4       	ldi	r24, 0x40	; 64
    2c1a:	96 e0       	ldi	r25, 0x06	; 6
    2c1c:	5b df       	rcall	.-330    	; 0x2ad4 <ioport_configure_port_pin>
    2c1e:	40 e0       	ldi	r20, 0x00	; 0
    2c20:	50 e0       	ldi	r21, 0x00	; 0
    2c22:	64 e0       	ldi	r22, 0x04	; 4
    2c24:	80 e4       	ldi	r24, 0x40	; 64
    2c26:	96 e0       	ldi	r25, 0x06	; 6
    2c28:	55 df       	rcall	.-342    	; 0x2ad4 <ioport_configure_port_pin>
    2c2a:	43 e0       	ldi	r20, 0x03	; 3
    2c2c:	50 e0       	ldi	r21, 0x00	; 0
    2c2e:	68 e0       	ldi	r22, 0x08	; 8
    2c30:	80 e6       	ldi	r24, 0x60	; 96
    2c32:	96 e0       	ldi	r25, 0x06	; 6
    2c34:	4f df       	rcall	.-354    	; 0x2ad4 <ioport_configure_port_pin>
    2c36:	40 e0       	ldi	r20, 0x00	; 0
    2c38:	50 e0       	ldi	r21, 0x00	; 0
    2c3a:	64 e0       	ldi	r22, 0x04	; 4
    2c3c:	80 e6       	ldi	r24, 0x60	; 96
    2c3e:	96 e0       	ldi	r25, 0x06	; 6
    2c40:	49 df       	rcall	.-366    	; 0x2ad4 <ioport_configure_port_pin>
    2c42:	43 e0       	ldi	r20, 0x03	; 3
    2c44:	50 e0       	ldi	r21, 0x00	; 0
    2c46:	68 e0       	ldi	r22, 0x08	; 8
    2c48:	80 e8       	ldi	r24, 0x80	; 128
    2c4a:	96 e0       	ldi	r25, 0x06	; 6
    2c4c:	43 df       	rcall	.-378    	; 0x2ad4 <ioport_configure_port_pin>
    2c4e:	40 e0       	ldi	r20, 0x00	; 0
    2c50:	50 e0       	ldi	r21, 0x00	; 0
    2c52:	64 e0       	ldi	r22, 0x04	; 4
    2c54:	80 e8       	ldi	r24, 0x80	; 128
    2c56:	96 e0       	ldi	r25, 0x06	; 6
    2c58:	3d cf       	rjmp	.-390    	; 0x2ad4 <ioport_configure_port_pin>
    2c5a:	08 95       	ret

00002c5c <vCounter>:
		
		vTaskDelay(10/portTICK_PERIOD_MS);
	}
}

static portTASK_FUNCTION(vCounter, r_) {
    2c5c:	cf 93       	push	r28
    2c5e:	df 93       	push	r29
    2c60:	cd b7       	in	r28, 0x3d	; 61
    2c62:	de b7       	in	r29, 0x3e	; 62
    2c64:	c0 58       	subi	r28, 0x80	; 128
    2c66:	d1 09       	sbc	r29, r1
    2c68:	cd bf       	out	0x3d, r28	; 61
    2c6a:	de bf       	out	0x3e, r29	; 62
	
	while(1) {
		
		if(xSemaphoreTake(xSemaphore, (TickType_t) 10) == pdTRUE) {
			counter++;
			snprintf(strbuf, sizeof(strbuf), "Counter : %d", counter);
    2c6c:	0f 2e       	mov	r0, r31
    2c6e:	fb e1       	ldi	r31, 0x1B	; 27
    2c70:	ef 2e       	mov	r14, r31
    2c72:	f0 e2       	ldi	r31, 0x20	; 32
    2c74:	ff 2e       	mov	r15, r31
    2c76:	f0 2d       	mov	r31, r0
    2c78:	68 94       	set
    2c7a:	dd 24       	eor	r13, r13
    2c7c:	d7 f8       	bld	r13, 7
    2c7e:	8e 01       	movw	r16, r28
    2c80:	0f 5f       	subi	r16, 0xFF	; 255
    2c82:	1f 4f       	sbci	r17, 0xFF	; 255
static portTASK_FUNCTION(vCounter, r_) {
	char strbuf[128];
	
	while(1) {
		
		if(xSemaphoreTake(xSemaphore, (TickType_t) 10) == pdTRUE) {
    2c84:	6a e0       	ldi	r22, 0x0A	; 10
    2c86:	70 e0       	ldi	r23, 0x00	; 0
    2c88:	80 91 c9 22 	lds	r24, 0x22C9	; 0x8022c9 <xSemaphore>
    2c8c:	90 91 ca 22 	lds	r25, 0x22CA	; 0x8022ca <xSemaphore+0x1>
    2c90:	0e 94 7f 0d 	call	0x1afe	; 0x1afe <xQueueSemaphoreTake>
    2c94:	81 30       	cpi	r24, 0x01	; 1
    2c96:	31 f5       	brne	.+76     	; 0x2ce4 <vCounter+0x88>
			counter++;
    2c98:	80 91 c7 22 	lds	r24, 0x22C7	; 0x8022c7 <counter>
    2c9c:	90 91 c8 22 	lds	r25, 0x22C8	; 0x8022c8 <counter+0x1>
    2ca0:	01 96       	adiw	r24, 0x01	; 1
    2ca2:	80 93 c7 22 	sts	0x22C7, r24	; 0x8022c7 <counter>
    2ca6:	90 93 c8 22 	sts	0x22C8, r25	; 0x8022c8 <counter+0x1>
			snprintf(strbuf, sizeof(strbuf), "Counter : %d", counter);
    2caa:	9f 93       	push	r25
    2cac:	8f 93       	push	r24
    2cae:	ff 92       	push	r15
    2cb0:	ef 92       	push	r14
    2cb2:	1f 92       	push	r1
    2cb4:	df 92       	push	r13
    2cb6:	1f 93       	push	r17
    2cb8:	0f 93       	push	r16
    2cba:	b7 d2       	rcall	.+1390   	; 0x322a <snprintf>
			gfx_mono_draw_string(strbuf,0, 8, &sysfont);
    2cbc:	26 e0       	ldi	r18, 0x06	; 6
    2cbe:	30 e2       	ldi	r19, 0x20	; 32
    2cc0:	48 e0       	ldi	r20, 0x08	; 8
    2cc2:	60 e0       	ldi	r22, 0x00	; 0
    2cc4:	c8 01       	movw	r24, r16
    2cc6:	0e 94 fd 08 	call	0x11fa	; 0x11fa <gfx_mono_draw_string>
			xSemaphoreGive(xSemaphore);	
    2cca:	20 e0       	ldi	r18, 0x00	; 0
    2ccc:	40 e0       	ldi	r20, 0x00	; 0
    2cce:	50 e0       	ldi	r21, 0x00	; 0
    2cd0:	60 e0       	ldi	r22, 0x00	; 0
    2cd2:	70 e0       	ldi	r23, 0x00	; 0
    2cd4:	80 91 c9 22 	lds	r24, 0x22C9	; 0x8022c9 <xSemaphore>
    2cd8:	90 91 ca 22 	lds	r25, 0x22CA	; 0x8022ca <xSemaphore+0x1>
    2cdc:	0e 94 6e 0c 	call	0x18dc	; 0x18dc <xQueueGenericSend>
    2ce0:	cd bf       	out	0x3d, r28	; 61
    2ce2:	de bf       	out	0x3e, r29	; 62
		}
		
		vTaskDelay(100/portTICK_PERIOD_MS);
    2ce4:	82 e3       	ldi	r24, 0x32	; 50
    2ce6:	90 e0       	ldi	r25, 0x00	; 0
    2ce8:	56 db       	rcall	.-2388   	; 0x2396 <vTaskDelay>
	}	
    2cea:	cc cf       	rjmp	.-104    	; 0x2c84 <vCounter+0x28>

00002cec <vPushButton1>:
		gfx_mono_draw_string(strbuf,0, 24, &sysfont);
		vTaskDelay(375/portTICK_PERIOD_MS);
	}
}

static portTASK_FUNCTION(vPushButton1, s_) {
    2cec:	cf 93       	push	r28
    2cee:	df 93       	push	r29
    2cf0:	cd b7       	in	r28, 0x3d	; 61
    2cf2:	de b7       	in	r29, 0x3e	; 62
    2cf4:	c0 58       	subi	r28, 0x80	; 128
    2cf6:	d1 09       	sbc	r29, r1
    2cf8:	cd bf       	out	0x3d, r28	; 61
    2cfa:	de bf       	out	0x3e, r29	; 62

__always_inline static bool arch_ioport_get_pin_level(ioport_pin_t pin)
{
	PORT_t *base = arch_ioport_pin_to_base(pin);

	return base->IN & arch_ioport_pin_to_mask(pin);
    2cfc:	00 ea       	ldi	r16, 0xA0	; 160
    2cfe:	16 e0       	ldi	r17, 0x06	; 6
	while(1) {
		
		if(ioport_get_pin_level(GPIO_PUSH_BUTTON_1)==0){
			if(xSemaphoreTake(xSemaphore, (TickType_t) 10) == pdTRUE) {
				counter++;
				snprintf(strbuf, sizeof(strbuf), "Counter : %d", counter);
    2d00:	0f 2e       	mov	r0, r31
    2d02:	fb e1       	ldi	r31, 0x1B	; 27
    2d04:	cf 2e       	mov	r12, r31
    2d06:	f0 e2       	ldi	r31, 0x20	; 32
    2d08:	df 2e       	mov	r13, r31
    2d0a:	f0 2d       	mov	r31, r0
    2d0c:	68 94       	set
    2d0e:	bb 24       	eor	r11, r11
    2d10:	b7 f8       	bld	r11, 7
    2d12:	ce 01       	movw	r24, r28
    2d14:	01 96       	adiw	r24, 0x01	; 1
    2d16:	7c 01       	movw	r14, r24
    2d18:	f8 01       	movw	r30, r16
    2d1a:	80 85       	ldd	r24, Z+8	; 0x08
static portTASK_FUNCTION(vPushButton1, s_) {
	char strbuf[128];
	
	while(1) {
		
		if(ioport_get_pin_level(GPIO_PUSH_BUTTON_1)==0){
    2d1c:	81 fd       	sbrc	r24, 1
    2d1e:	30 c0       	rjmp	.+96     	; 0x2d80 <vPushButton1+0x94>
			if(xSemaphoreTake(xSemaphore, (TickType_t) 10) == pdTRUE) {
    2d20:	6a e0       	ldi	r22, 0x0A	; 10
    2d22:	70 e0       	ldi	r23, 0x00	; 0
    2d24:	80 91 c9 22 	lds	r24, 0x22C9	; 0x8022c9 <xSemaphore>
    2d28:	90 91 ca 22 	lds	r25, 0x22CA	; 0x8022ca <xSemaphore+0x1>
    2d2c:	0e 94 7f 0d 	call	0x1afe	; 0x1afe <xQueueSemaphoreTake>
    2d30:	81 30       	cpi	r24, 0x01	; 1
    2d32:	31 f5       	brne	.+76     	; 0x2d80 <vPushButton1+0x94>
				counter++;
    2d34:	80 91 c7 22 	lds	r24, 0x22C7	; 0x8022c7 <counter>
    2d38:	90 91 c8 22 	lds	r25, 0x22C8	; 0x8022c8 <counter+0x1>
    2d3c:	01 96       	adiw	r24, 0x01	; 1
    2d3e:	80 93 c7 22 	sts	0x22C7, r24	; 0x8022c7 <counter>
    2d42:	90 93 c8 22 	sts	0x22C8, r25	; 0x8022c8 <counter+0x1>
				snprintf(strbuf, sizeof(strbuf), "Counter : %d", counter);
    2d46:	9f 93       	push	r25
    2d48:	8f 93       	push	r24
    2d4a:	df 92       	push	r13
    2d4c:	cf 92       	push	r12
    2d4e:	1f 92       	push	r1
    2d50:	bf 92       	push	r11
    2d52:	ff 92       	push	r15
    2d54:	ef 92       	push	r14
    2d56:	69 d2       	rcall	.+1234   	; 0x322a <snprintf>
				gfx_mono_draw_string(strbuf,0, 8, &sysfont);
    2d58:	26 e0       	ldi	r18, 0x06	; 6
    2d5a:	30 e2       	ldi	r19, 0x20	; 32
    2d5c:	48 e0       	ldi	r20, 0x08	; 8
    2d5e:	60 e0       	ldi	r22, 0x00	; 0
    2d60:	c7 01       	movw	r24, r14
    2d62:	0e 94 fd 08 	call	0x11fa	; 0x11fa <gfx_mono_draw_string>
				xSemaphoreGive(xSemaphore);
    2d66:	20 e0       	ldi	r18, 0x00	; 0
    2d68:	40 e0       	ldi	r20, 0x00	; 0
    2d6a:	50 e0       	ldi	r21, 0x00	; 0
    2d6c:	60 e0       	ldi	r22, 0x00	; 0
    2d6e:	70 e0       	ldi	r23, 0x00	; 0
    2d70:	80 91 c9 22 	lds	r24, 0x22C9	; 0x8022c9 <xSemaphore>
    2d74:	90 91 ca 22 	lds	r25, 0x22CA	; 0x8022ca <xSemaphore+0x1>
    2d78:	0e 94 6e 0c 	call	0x18dc	; 0x18dc <xQueueGenericSend>
    2d7c:	cd bf       	out	0x3d, r28	; 61
    2d7e:	de bf       	out	0x3e, r29	; 62
			}
		}
		
		vTaskDelay(10/portTICK_PERIOD_MS);
    2d80:	85 e0       	ldi	r24, 0x05	; 5
    2d82:	90 e0       	ldi	r25, 0x00	; 0
    2d84:	08 db       	rcall	.-2544   	; 0x2396 <vTaskDelay>
	}
    2d86:	c8 cf       	rjmp	.-112    	; 0x2d18 <vPushButton1+0x2c>

00002d88 <vBlinkLed1>:
		gfx_mono_draw_string(strbuf,0, 16, &sysfont);
		vTaskDelay(100/portTICK_PERIOD_MS);
	}
}

static portTASK_FUNCTION(vBlinkLed1, q_) {	
    2d88:	cf 93       	push	r28
    2d8a:	df 93       	push	r29
    2d8c:	cd b7       	in	r28, 0x3d	; 61
    2d8e:	de b7       	in	r29, 0x3e	; 62
    2d90:	c0 58       	subi	r28, 0x80	; 128
    2d92:	d1 09       	sbc	r29, r1
    2d94:	cd bf       	out	0x3d, r28	; 61
    2d96:	de bf       	out	0x3e, r29	; 62
	char strbuf[128];
	int flagLed1 = 0;
    2d98:	80 e0       	ldi	r24, 0x00	; 0
    2d9a:	90 e0       	ldi	r25, 0x00	; 0
	PORT_t *base = arch_ioport_pin_to_base(pin);

	if (level) {
		base->OUTSET = arch_ioport_pin_to_mask(pin);
	} else {
		base->OUTCLR = arch_ioport_pin_to_mask(pin);
    2d9c:	0f 2e       	mov	r0, r31
    2d9e:	f0 ee       	ldi	r31, 0xE0	; 224
    2da0:	af 2e       	mov	r10, r31
    2da2:	f7 e0       	ldi	r31, 0x07	; 7
    2da4:	bf 2e       	mov	r11, r31
    2da6:	f0 2d       	mov	r31, r0
    2da8:	68 94       	set
    2daa:	88 24       	eor	r8, r8
    2dac:	81 f8       	bld	r8, 1
	
	while(1) {
		flagLed1 = !flagLed1;
		ioport_set_pin_level(LED1_GPIO, flagLed1);
		snprintf(strbuf, sizeof(strbuf), "LED 1 : %d", !flagLed1);
    2dae:	0f 2e       	mov	r0, r31
    2db0:	f8 e2       	ldi	r31, 0x28	; 40
    2db2:	cf 2e       	mov	r12, r31
    2db4:	f0 e2       	ldi	r31, 0x20	; 32
    2db6:	df 2e       	mov	r13, r31
    2db8:	f0 2d       	mov	r31, r0
    2dba:	68 94       	set
    2dbc:	99 24       	eor	r9, r9
    2dbe:	97 f8       	bld	r9, 7
    2dc0:	9e 01       	movw	r18, r28
    2dc2:	2f 5f       	subi	r18, 0xFF	; 255
    2dc4:	3f 4f       	sbci	r19, 0xFF	; 255
    2dc6:	79 01       	movw	r14, r18
static portTASK_FUNCTION(vBlinkLed1, q_) {	
	char strbuf[128];
	int flagLed1 = 0;
	
	while(1) {
		flagLed1 = !flagLed1;
    2dc8:	01 e0       	ldi	r16, 0x01	; 1
    2dca:	00 97       	sbiw	r24, 0x00	; 0
    2dcc:	09 f0       	breq	.+2      	; 0x2dd0 <vBlinkLed1+0x48>
    2dce:	00 e0       	ldi	r16, 0x00	; 0
    2dd0:	10 e0       	ldi	r17, 0x00	; 0
__always_inline static void arch_ioport_set_pin_level(ioport_pin_t pin,
		bool level)
{
	PORT_t *base = arch_ioport_pin_to_base(pin);

	if (level) {
    2dd2:	00 97       	sbiw	r24, 0x00	; 0
    2dd4:	19 f4       	brne	.+6      	; 0x2ddc <vBlinkLed1+0x54>
		base->OUTSET = arch_ioport_pin_to_mask(pin);
    2dd6:	f5 01       	movw	r30, r10
    2dd8:	85 82       	std	Z+5, r8	; 0x05
    2dda:	02 c0       	rjmp	.+4      	; 0x2de0 <vBlinkLed1+0x58>
	} else {
		base->OUTCLR = arch_ioport_pin_to_mask(pin);
    2ddc:	f5 01       	movw	r30, r10
    2dde:	86 82       	std	Z+6, r8	; 0x06
		ioport_set_pin_level(LED1_GPIO, flagLed1);
		snprintf(strbuf, sizeof(strbuf), "LED 1 : %d", !flagLed1);
    2de0:	21 e0       	ldi	r18, 0x01	; 1
    2de2:	30 e0       	ldi	r19, 0x00	; 0
    2de4:	89 2b       	or	r24, r25
    2de6:	09 f4       	brne	.+2      	; 0x2dea <vBlinkLed1+0x62>
    2de8:	20 e0       	ldi	r18, 0x00	; 0
    2dea:	3f 93       	push	r19
    2dec:	2f 93       	push	r18
    2dee:	df 92       	push	r13
    2df0:	cf 92       	push	r12
    2df2:	1f 92       	push	r1
    2df4:	9f 92       	push	r9
    2df6:	ff 92       	push	r15
    2df8:	ef 92       	push	r14
    2dfa:	17 d2       	rcall	.+1070   	; 0x322a <snprintf>
		gfx_mono_draw_string(strbuf,0, 24, &sysfont);
    2dfc:	26 e0       	ldi	r18, 0x06	; 6
    2dfe:	30 e2       	ldi	r19, 0x20	; 32
    2e00:	48 e1       	ldi	r20, 0x18	; 24
    2e02:	60 e0       	ldi	r22, 0x00	; 0
    2e04:	c7 01       	movw	r24, r14
    2e06:	0e 94 fd 08 	call	0x11fa	; 0x11fa <gfx_mono_draw_string>
		vTaskDelay(375/portTICK_PERIOD_MS);
    2e0a:	8b eb       	ldi	r24, 0xBB	; 187
    2e0c:	90 e0       	ldi	r25, 0x00	; 0
    2e0e:	c3 da       	rcall	.-2682   	; 0x2396 <vTaskDelay>
	}
    2e10:	cd bf       	out	0x3d, r28	; 61
    2e12:	de bf       	out	0x3e, r29	; 62
static portTASK_FUNCTION(vBlinkLed1, q_) {	
	char strbuf[128];
	int flagLed1 = 0;
	
	while(1) {
		flagLed1 = !flagLed1;
    2e14:	c8 01       	movw	r24, r16
		ioport_set_pin_level(LED1_GPIO, flagLed1);
		snprintf(strbuf, sizeof(strbuf), "LED 1 : %d", !flagLed1);
		gfx_mono_draw_string(strbuf,0, 24, &sysfont);
		vTaskDelay(375/portTICK_PERIOD_MS);
	}
    2e16:	d8 cf       	rjmp	.-80     	; 0x2dc8 <vBlinkLed1+0x40>

00002e18 <vBlinkLed0>:
	/* Start the task */
	
	vTaskStartScheduler();
}

static portTASK_FUNCTION(vBlinkLed0, p_) {
    2e18:	cf 93       	push	r28
    2e1a:	df 93       	push	r29
    2e1c:	cd b7       	in	r28, 0x3d	; 61
    2e1e:	de b7       	in	r29, 0x3e	; 62
    2e20:	c0 58       	subi	r28, 0x80	; 128
    2e22:	d1 09       	sbc	r29, r1
    2e24:	cd bf       	out	0x3d, r28	; 61
    2e26:	de bf       	out	0x3e, r29	; 62
	char strbuf[128];
	int flagLed0 = 1;
    2e28:	81 e0       	ldi	r24, 0x01	; 1
    2e2a:	90 e0       	ldi	r25, 0x00	; 0
    2e2c:	0f 2e       	mov	r0, r31
    2e2e:	f0 ee       	ldi	r31, 0xE0	; 224
    2e30:	af 2e       	mov	r10, r31
    2e32:	f7 e0       	ldi	r31, 0x07	; 7
    2e34:	bf 2e       	mov	r11, r31
    2e36:	f0 2d       	mov	r31, r0
	
	while(1) {
		flagLed0 = !flagLed0;
		ioport_set_pin_level(LED0_GPIO, flagLed0);
		snprintf(strbuf, sizeof(strbuf), "LED 0 : %d", !flagLed0);
    2e38:	0f 2e       	mov	r0, r31
    2e3a:	f3 e3       	ldi	r31, 0x33	; 51
    2e3c:	cf 2e       	mov	r12, r31
    2e3e:	f0 e2       	ldi	r31, 0x20	; 32
    2e40:	df 2e       	mov	r13, r31
    2e42:	f0 2d       	mov	r31, r0
    2e44:	68 94       	set
    2e46:	99 24       	eor	r9, r9
    2e48:	97 f8       	bld	r9, 7
    2e4a:	9e 01       	movw	r18, r28
    2e4c:	2f 5f       	subi	r18, 0xFF	; 255
    2e4e:	3f 4f       	sbci	r19, 0xFF	; 255
    2e50:	79 01       	movw	r14, r18
static portTASK_FUNCTION(vBlinkLed0, p_) {
	char strbuf[128];
	int flagLed0 = 1;
	
	while(1) {
		flagLed0 = !flagLed0;
    2e52:	01 e0       	ldi	r16, 0x01	; 1
    2e54:	00 97       	sbiw	r24, 0x00	; 0
    2e56:	09 f0       	breq	.+2      	; 0x2e5a <vBlinkLed0+0x42>
    2e58:	00 e0       	ldi	r16, 0x00	; 0
    2e5a:	10 e0       	ldi	r17, 0x00	; 0
__always_inline static void arch_ioport_set_pin_level(ioport_pin_t pin,
		bool level)
{
	PORT_t *base = arch_ioport_pin_to_base(pin);

	if (level) {
    2e5c:	00 97       	sbiw	r24, 0x00	; 0
    2e5e:	21 f4       	brne	.+8      	; 0x2e68 <vBlinkLed0+0x50>
		base->OUTSET = arch_ioport_pin_to_mask(pin);
    2e60:	21 e0       	ldi	r18, 0x01	; 1
    2e62:	f5 01       	movw	r30, r10
    2e64:	25 83       	std	Z+5, r18	; 0x05
    2e66:	03 c0       	rjmp	.+6      	; 0x2e6e <vBlinkLed0+0x56>
	} else {
		base->OUTCLR = arch_ioport_pin_to_mask(pin);
    2e68:	21 e0       	ldi	r18, 0x01	; 1
    2e6a:	f5 01       	movw	r30, r10
    2e6c:	26 83       	std	Z+6, r18	; 0x06
		ioport_set_pin_level(LED0_GPIO, flagLed0);
		snprintf(strbuf, sizeof(strbuf), "LED 0 : %d", !flagLed0);
    2e6e:	21 e0       	ldi	r18, 0x01	; 1
    2e70:	30 e0       	ldi	r19, 0x00	; 0
    2e72:	89 2b       	or	r24, r25
    2e74:	09 f4       	brne	.+2      	; 0x2e78 <vBlinkLed0+0x60>
    2e76:	20 e0       	ldi	r18, 0x00	; 0
    2e78:	3f 93       	push	r19
    2e7a:	2f 93       	push	r18
    2e7c:	df 92       	push	r13
    2e7e:	cf 92       	push	r12
    2e80:	1f 92       	push	r1
    2e82:	9f 92       	push	r9
    2e84:	ff 92       	push	r15
    2e86:	ef 92       	push	r14
    2e88:	d0 d1       	rcall	.+928    	; 0x322a <snprintf>
		gfx_mono_draw_string(strbuf,0, 16, &sysfont);
    2e8a:	26 e0       	ldi	r18, 0x06	; 6
    2e8c:	30 e2       	ldi	r19, 0x20	; 32
    2e8e:	40 e1       	ldi	r20, 0x10	; 16
    2e90:	60 e0       	ldi	r22, 0x00	; 0
    2e92:	c7 01       	movw	r24, r14
    2e94:	0e 94 fd 08 	call	0x11fa	; 0x11fa <gfx_mono_draw_string>
		vTaskDelay(100/portTICK_PERIOD_MS);
    2e98:	82 e3       	ldi	r24, 0x32	; 50
    2e9a:	90 e0       	ldi	r25, 0x00	; 0
    2e9c:	7c da       	rcall	.-2824   	; 0x2396 <vTaskDelay>
	}
    2e9e:	cd bf       	out	0x3d, r28	; 61
    2ea0:	de bf       	out	0x3e, r29	; 62
static portTASK_FUNCTION(vBlinkLed0, p_) {
	char strbuf[128];
	int flagLed0 = 1;
	
	while(1) {
		flagLed0 = !flagLed0;
    2ea2:	c8 01       	movw	r24, r16
		ioport_set_pin_level(LED0_GPIO, flagLed0);
		snprintf(strbuf, sizeof(strbuf), "LED 0 : %d", !flagLed0);
		gfx_mono_draw_string(strbuf,0, 16, &sysfont);
		vTaskDelay(100/portTICK_PERIOD_MS);
	}
    2ea4:	d6 cf       	rjmp	.-84     	; 0x2e52 <vBlinkLed0+0x3a>

00002ea6 <main>:
/* Define semaphore */
SemaphoreHandle_t xSemaphore;
uint16_t counter = 0;

int main (void)
{
    2ea6:	ef 92       	push	r14
    2ea8:	ff 92       	push	r15
    2eaa:	0f 93       	push	r16
	/* Insert system clock initialization code here (sysclk_init()). */

	board_init();
    2eac:	3a de       	rcall	.-908    	; 0x2b22 <board_init>
 * Enables all interrupt levels, with vectors located in the application section
 * and fixed priority scheduling.
 */
static inline void pmic_init(void)
{
	PMIC.CTRL = PMIC_LVL_LOW | PMIC_LVL_MEDIUM |
    2eae:	87 e0       	ldi	r24, 0x07	; 7
    2eb0:	80 93 a2 00 	sts	0x00A2, r24	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7be0a2>
	pmic_init();
	gfx_mono_init();
    2eb4:	0e 94 e8 04 	call	0x9d0	; 0x9d0 <gfx_mono_st7565r_init>
		bool level)
{
	PORT_t *base = arch_ioport_pin_to_base(pin);

	if (level) {
		base->OUTSET = arch_ioport_pin_to_mask(pin);
    2eb8:	80 e1       	ldi	r24, 0x10	; 16
    2eba:	80 93 85 06 	sts	0x0685, r24	; 0x800685 <__TEXT_REGION_LENGTH__+0x7be685>
	
	gpio_set_pin_high(LCD_BACKLIGHT_ENABLE_PIN);
	gfx_mono_draw_string("RTOS v10.2.1", 0, 0, &sysfont);
    2ebe:	26 e0       	ldi	r18, 0x06	; 6
    2ec0:	30 e2       	ldi	r19, 0x20	; 32
    2ec2:	40 e0       	ldi	r20, 0x00	; 0
    2ec4:	60 e0       	ldi	r22, 0x00	; 0
    2ec6:	8e e3       	ldi	r24, 0x3E	; 62
    2ec8:	90 e2       	ldi	r25, 0x20	; 32
    2eca:	0e 94 fd 08 	call	0x11fa	; 0x11fa <gfx_mono_draw_string>

	/* Create the task */
	
	xTaskCreate(vBlinkLed0, "", 1000, NULL, tskIDLE_PRIORITY + 1, NULL);	// higher priority
    2ece:	e1 2c       	mov	r14, r1
    2ed0:	f1 2c       	mov	r15, r1
    2ed2:	01 e0       	ldi	r16, 0x01	; 1
    2ed4:	20 e0       	ldi	r18, 0x00	; 0
    2ed6:	30 e0       	ldi	r19, 0x00	; 0
    2ed8:	48 ee       	ldi	r20, 0xE8	; 232
    2eda:	53 e0       	ldi	r21, 0x03	; 3
    2edc:	6a e4       	ldi	r22, 0x4A	; 74
    2ede:	70 e2       	ldi	r23, 0x20	; 32
    2ee0:	8c e0       	ldi	r24, 0x0C	; 12
    2ee2:	97 e1       	ldi	r25, 0x17	; 23
    2ee4:	0e 94 77 0e 	call	0x1cee	; 0x1cee <xTaskCreate>
	xTaskCreate(vBlinkLed1, "", 1000, NULL, tskIDLE_PRIORITY + 2, NULL);	// higher priority
    2ee8:	02 e0       	ldi	r16, 0x02	; 2
    2eea:	20 e0       	ldi	r18, 0x00	; 0
    2eec:	30 e0       	ldi	r19, 0x00	; 0
    2eee:	48 ee       	ldi	r20, 0xE8	; 232
    2ef0:	53 e0       	ldi	r21, 0x03	; 3
    2ef2:	6a e4       	ldi	r22, 0x4A	; 74
    2ef4:	70 e2       	ldi	r23, 0x20	; 32
    2ef6:	84 ec       	ldi	r24, 0xC4	; 196
    2ef8:	96 e1       	ldi	r25, 0x16	; 22
    2efa:	0e 94 77 0e 	call	0x1cee	; 0x1cee <xTaskCreate>
	xTaskCreate(vPushButton1, "", 1000, NULL, tskIDLE_PRIORITY + 3, NULL);	// higher priority
    2efe:	03 e0       	ldi	r16, 0x03	; 3
    2f00:	20 e0       	ldi	r18, 0x00	; 0
    2f02:	30 e0       	ldi	r19, 0x00	; 0
    2f04:	48 ee       	ldi	r20, 0xE8	; 232
    2f06:	53 e0       	ldi	r21, 0x03	; 3
    2f08:	6a e4       	ldi	r22, 0x4A	; 74
    2f0a:	70 e2       	ldi	r23, 0x20	; 32
    2f0c:	86 e7       	ldi	r24, 0x76	; 118
    2f0e:	96 e1       	ldi	r25, 0x16	; 22
    2f10:	0e 94 77 0e 	call	0x1cee	; 0x1cee <xTaskCreate>
	xTaskCreate(vCounter, "", 1000, NULL, tskIDLE_PRIORITY, NULL);			// low priority
    2f14:	00 e0       	ldi	r16, 0x00	; 0
    2f16:	20 e0       	ldi	r18, 0x00	; 0
    2f18:	30 e0       	ldi	r19, 0x00	; 0
    2f1a:	48 ee       	ldi	r20, 0xE8	; 232
    2f1c:	53 e0       	ldi	r21, 0x03	; 3
    2f1e:	6a e4       	ldi	r22, 0x4A	; 74
    2f20:	70 e2       	ldi	r23, 0x20	; 32
    2f22:	8e e2       	ldi	r24, 0x2E	; 46
    2f24:	96 e1       	ldi	r25, 0x16	; 22
    2f26:	0e 94 77 0e 	call	0x1cee	; 0x1cee <xTaskCreate>
	
	/* Semaphore */
	xSemaphore = xSemaphoreCreateBinary();
    2f2a:	43 e0       	ldi	r20, 0x03	; 3
    2f2c:	60 e0       	ldi	r22, 0x00	; 0
    2f2e:	81 e0       	ldi	r24, 0x01	; 1
    2f30:	0e 94 2e 0c 	call	0x185c	; 0x185c <xQueueGenericCreate>
    2f34:	80 93 c9 22 	sts	0x22C9, r24	; 0x8022c9 <xSemaphore>
    2f38:	90 93 ca 22 	sts	0x22CA, r25	; 0x8022ca <xSemaphore+0x1>
	xSemaphoreGive(xSemaphore);
    2f3c:	20 e0       	ldi	r18, 0x00	; 0
    2f3e:	40 e0       	ldi	r20, 0x00	; 0
    2f40:	50 e0       	ldi	r21, 0x00	; 0
    2f42:	60 e0       	ldi	r22, 0x00	; 0
    2f44:	70 e0       	ldi	r23, 0x00	; 0
    2f46:	0e 94 6e 0c 	call	0x18dc	; 0x18dc <xQueueGenericSend>
	
	/* Start the task */
	
	vTaskStartScheduler();
    2f4a:	0e 94 9b 0f 	call	0x1f36	; 0x1f36 <vTaskStartScheduler>
}
    2f4e:	80 e0       	ldi	r24, 0x00	; 0
    2f50:	90 e0       	ldi	r25, 0x00	; 0
    2f52:	0f 91       	pop	r16
    2f54:	ff 90       	pop	r15
    2f56:	ef 90       	pop	r14
    2f58:	08 95       	ret

00002f5a <__udivmodhi4>:
    2f5a:	aa 1b       	sub	r26, r26
    2f5c:	bb 1b       	sub	r27, r27
    2f5e:	51 e1       	ldi	r21, 0x11	; 17
    2f60:	07 c0       	rjmp	.+14     	; 0x2f70 <__udivmodhi4_ep>

00002f62 <__udivmodhi4_loop>:
    2f62:	aa 1f       	adc	r26, r26
    2f64:	bb 1f       	adc	r27, r27
    2f66:	a6 17       	cp	r26, r22
    2f68:	b7 07       	cpc	r27, r23
    2f6a:	10 f0       	brcs	.+4      	; 0x2f70 <__udivmodhi4_ep>
    2f6c:	a6 1b       	sub	r26, r22
    2f6e:	b7 0b       	sbc	r27, r23

00002f70 <__udivmodhi4_ep>:
    2f70:	88 1f       	adc	r24, r24
    2f72:	99 1f       	adc	r25, r25
    2f74:	5a 95       	dec	r21
    2f76:	a9 f7       	brne	.-22     	; 0x2f62 <__udivmodhi4_loop>
    2f78:	80 95       	com	r24
    2f7a:	90 95       	com	r25
    2f7c:	bc 01       	movw	r22, r24
    2f7e:	cd 01       	movw	r24, r26
    2f80:	08 95       	ret

00002f82 <__udivmodsi4>:
    2f82:	a1 e2       	ldi	r26, 0x21	; 33
    2f84:	1a 2e       	mov	r1, r26
    2f86:	aa 1b       	sub	r26, r26
    2f88:	bb 1b       	sub	r27, r27
    2f8a:	fd 01       	movw	r30, r26
    2f8c:	0d c0       	rjmp	.+26     	; 0x2fa8 <__udivmodsi4_ep>

00002f8e <__udivmodsi4_loop>:
    2f8e:	aa 1f       	adc	r26, r26
    2f90:	bb 1f       	adc	r27, r27
    2f92:	ee 1f       	adc	r30, r30
    2f94:	ff 1f       	adc	r31, r31
    2f96:	a2 17       	cp	r26, r18
    2f98:	b3 07       	cpc	r27, r19
    2f9a:	e4 07       	cpc	r30, r20
    2f9c:	f5 07       	cpc	r31, r21
    2f9e:	20 f0       	brcs	.+8      	; 0x2fa8 <__udivmodsi4_ep>
    2fa0:	a2 1b       	sub	r26, r18
    2fa2:	b3 0b       	sbc	r27, r19
    2fa4:	e4 0b       	sbc	r30, r20
    2fa6:	f5 0b       	sbc	r31, r21

00002fa8 <__udivmodsi4_ep>:
    2fa8:	66 1f       	adc	r22, r22
    2faa:	77 1f       	adc	r23, r23
    2fac:	88 1f       	adc	r24, r24
    2fae:	99 1f       	adc	r25, r25
    2fb0:	1a 94       	dec	r1
    2fb2:	69 f7       	brne	.-38     	; 0x2f8e <__udivmodsi4_loop>
    2fb4:	60 95       	com	r22
    2fb6:	70 95       	com	r23
    2fb8:	80 95       	com	r24
    2fba:	90 95       	com	r25
    2fbc:	9b 01       	movw	r18, r22
    2fbe:	ac 01       	movw	r20, r24
    2fc0:	bd 01       	movw	r22, r26
    2fc2:	cf 01       	movw	r24, r30
    2fc4:	08 95       	ret

00002fc6 <__tablejump2__>:
    2fc6:	ee 0f       	add	r30, r30
    2fc8:	ff 1f       	adc	r31, r31
    2fca:	88 1f       	adc	r24, r24
    2fcc:	8b bf       	out	0x3b, r24	; 59
    2fce:	07 90       	elpm	r0, Z+
    2fd0:	f6 91       	elpm	r31, Z
    2fd2:	e0 2d       	mov	r30, r0
    2fd4:	19 94       	eijmp

00002fd6 <malloc>:
    2fd6:	0f 93       	push	r16
    2fd8:	1f 93       	push	r17
    2fda:	cf 93       	push	r28
    2fdc:	df 93       	push	r29
    2fde:	82 30       	cpi	r24, 0x02	; 2
    2fe0:	91 05       	cpc	r25, r1
    2fe2:	10 f4       	brcc	.+4      	; 0x2fe8 <malloc+0x12>
    2fe4:	82 e0       	ldi	r24, 0x02	; 2
    2fe6:	90 e0       	ldi	r25, 0x00	; 0
    2fe8:	e0 91 cd 22 	lds	r30, 0x22CD	; 0x8022cd <__flp>
    2fec:	f0 91 ce 22 	lds	r31, 0x22CE	; 0x8022ce <__flp+0x1>
    2ff0:	20 e0       	ldi	r18, 0x00	; 0
    2ff2:	30 e0       	ldi	r19, 0x00	; 0
    2ff4:	a0 e0       	ldi	r26, 0x00	; 0
    2ff6:	b0 e0       	ldi	r27, 0x00	; 0
    2ff8:	30 97       	sbiw	r30, 0x00	; 0
    2ffa:	19 f1       	breq	.+70     	; 0x3042 <malloc+0x6c>
    2ffc:	40 81       	ld	r20, Z
    2ffe:	51 81       	ldd	r21, Z+1	; 0x01
    3000:	02 81       	ldd	r16, Z+2	; 0x02
    3002:	13 81       	ldd	r17, Z+3	; 0x03
    3004:	48 17       	cp	r20, r24
    3006:	59 07       	cpc	r21, r25
    3008:	c8 f0       	brcs	.+50     	; 0x303c <malloc+0x66>
    300a:	84 17       	cp	r24, r20
    300c:	95 07       	cpc	r25, r21
    300e:	69 f4       	brne	.+26     	; 0x302a <malloc+0x54>
    3010:	10 97       	sbiw	r26, 0x00	; 0
    3012:	31 f0       	breq	.+12     	; 0x3020 <malloc+0x4a>
    3014:	12 96       	adiw	r26, 0x02	; 2
    3016:	0c 93       	st	X, r16
    3018:	12 97       	sbiw	r26, 0x02	; 2
    301a:	13 96       	adiw	r26, 0x03	; 3
    301c:	1c 93       	st	X, r17
    301e:	27 c0       	rjmp	.+78     	; 0x306e <malloc+0x98>
    3020:	00 93 cd 22 	sts	0x22CD, r16	; 0x8022cd <__flp>
    3024:	10 93 ce 22 	sts	0x22CE, r17	; 0x8022ce <__flp+0x1>
    3028:	22 c0       	rjmp	.+68     	; 0x306e <malloc+0x98>
    302a:	21 15       	cp	r18, r1
    302c:	31 05       	cpc	r19, r1
    302e:	19 f0       	breq	.+6      	; 0x3036 <malloc+0x60>
    3030:	42 17       	cp	r20, r18
    3032:	53 07       	cpc	r21, r19
    3034:	18 f4       	brcc	.+6      	; 0x303c <malloc+0x66>
    3036:	9a 01       	movw	r18, r20
    3038:	bd 01       	movw	r22, r26
    303a:	ef 01       	movw	r28, r30
    303c:	df 01       	movw	r26, r30
    303e:	f8 01       	movw	r30, r16
    3040:	db cf       	rjmp	.-74     	; 0x2ff8 <malloc+0x22>
    3042:	21 15       	cp	r18, r1
    3044:	31 05       	cpc	r19, r1
    3046:	f9 f0       	breq	.+62     	; 0x3086 <malloc+0xb0>
    3048:	28 1b       	sub	r18, r24
    304a:	39 0b       	sbc	r19, r25
    304c:	24 30       	cpi	r18, 0x04	; 4
    304e:	31 05       	cpc	r19, r1
    3050:	80 f4       	brcc	.+32     	; 0x3072 <malloc+0x9c>
    3052:	8a 81       	ldd	r24, Y+2	; 0x02
    3054:	9b 81       	ldd	r25, Y+3	; 0x03
    3056:	61 15       	cp	r22, r1
    3058:	71 05       	cpc	r23, r1
    305a:	21 f0       	breq	.+8      	; 0x3064 <malloc+0x8e>
    305c:	fb 01       	movw	r30, r22
    305e:	82 83       	std	Z+2, r24	; 0x02
    3060:	93 83       	std	Z+3, r25	; 0x03
    3062:	04 c0       	rjmp	.+8      	; 0x306c <malloc+0x96>
    3064:	80 93 cd 22 	sts	0x22CD, r24	; 0x8022cd <__flp>
    3068:	90 93 ce 22 	sts	0x22CE, r25	; 0x8022ce <__flp+0x1>
    306c:	fe 01       	movw	r30, r28
    306e:	32 96       	adiw	r30, 0x02	; 2
    3070:	44 c0       	rjmp	.+136    	; 0x30fa <malloc+0x124>
    3072:	fe 01       	movw	r30, r28
    3074:	e2 0f       	add	r30, r18
    3076:	f3 1f       	adc	r31, r19
    3078:	81 93       	st	Z+, r24
    307a:	91 93       	st	Z+, r25
    307c:	22 50       	subi	r18, 0x02	; 2
    307e:	31 09       	sbc	r19, r1
    3080:	28 83       	st	Y, r18
    3082:	39 83       	std	Y+1, r19	; 0x01
    3084:	3a c0       	rjmp	.+116    	; 0x30fa <malloc+0x124>
    3086:	20 91 cb 22 	lds	r18, 0x22CB	; 0x8022cb <__brkval>
    308a:	30 91 cc 22 	lds	r19, 0x22CC	; 0x8022cc <__brkval+0x1>
    308e:	23 2b       	or	r18, r19
    3090:	41 f4       	brne	.+16     	; 0x30a2 <malloc+0xcc>
    3092:	20 91 02 20 	lds	r18, 0x2002	; 0x802002 <__malloc_heap_start>
    3096:	30 91 03 20 	lds	r19, 0x2003	; 0x802003 <__malloc_heap_start+0x1>
    309a:	20 93 cb 22 	sts	0x22CB, r18	; 0x8022cb <__brkval>
    309e:	30 93 cc 22 	sts	0x22CC, r19	; 0x8022cc <__brkval+0x1>
    30a2:	20 91 00 20 	lds	r18, 0x2000	; 0x802000 <__DATA_REGION_ORIGIN__>
    30a6:	30 91 01 20 	lds	r19, 0x2001	; 0x802001 <__DATA_REGION_ORIGIN__+0x1>
    30aa:	21 15       	cp	r18, r1
    30ac:	31 05       	cpc	r19, r1
    30ae:	41 f4       	brne	.+16     	; 0x30c0 <malloc+0xea>
    30b0:	2d b7       	in	r18, 0x3d	; 61
    30b2:	3e b7       	in	r19, 0x3e	; 62
    30b4:	40 91 04 20 	lds	r20, 0x2004	; 0x802004 <__malloc_margin>
    30b8:	50 91 05 20 	lds	r21, 0x2005	; 0x802005 <__malloc_margin+0x1>
    30bc:	24 1b       	sub	r18, r20
    30be:	35 0b       	sbc	r19, r21
    30c0:	e0 91 cb 22 	lds	r30, 0x22CB	; 0x8022cb <__brkval>
    30c4:	f0 91 cc 22 	lds	r31, 0x22CC	; 0x8022cc <__brkval+0x1>
    30c8:	e2 17       	cp	r30, r18
    30ca:	f3 07       	cpc	r31, r19
    30cc:	a0 f4       	brcc	.+40     	; 0x30f6 <malloc+0x120>
    30ce:	2e 1b       	sub	r18, r30
    30d0:	3f 0b       	sbc	r19, r31
    30d2:	28 17       	cp	r18, r24
    30d4:	39 07       	cpc	r19, r25
    30d6:	78 f0       	brcs	.+30     	; 0x30f6 <malloc+0x120>
    30d8:	ac 01       	movw	r20, r24
    30da:	4e 5f       	subi	r20, 0xFE	; 254
    30dc:	5f 4f       	sbci	r21, 0xFF	; 255
    30de:	24 17       	cp	r18, r20
    30e0:	35 07       	cpc	r19, r21
    30e2:	48 f0       	brcs	.+18     	; 0x30f6 <malloc+0x120>
    30e4:	4e 0f       	add	r20, r30
    30e6:	5f 1f       	adc	r21, r31
    30e8:	40 93 cb 22 	sts	0x22CB, r20	; 0x8022cb <__brkval>
    30ec:	50 93 cc 22 	sts	0x22CC, r21	; 0x8022cc <__brkval+0x1>
    30f0:	81 93       	st	Z+, r24
    30f2:	91 93       	st	Z+, r25
    30f4:	02 c0       	rjmp	.+4      	; 0x30fa <malloc+0x124>
    30f6:	e0 e0       	ldi	r30, 0x00	; 0
    30f8:	f0 e0       	ldi	r31, 0x00	; 0
    30fa:	cf 01       	movw	r24, r30
    30fc:	df 91       	pop	r29
    30fe:	cf 91       	pop	r28
    3100:	1f 91       	pop	r17
    3102:	0f 91       	pop	r16
    3104:	08 95       	ret

00003106 <free>:
    3106:	cf 93       	push	r28
    3108:	df 93       	push	r29
    310a:	00 97       	sbiw	r24, 0x00	; 0
    310c:	09 f4       	brne	.+2      	; 0x3110 <free+0xa>
    310e:	81 c0       	rjmp	.+258    	; 0x3212 <free+0x10c>
    3110:	fc 01       	movw	r30, r24
    3112:	32 97       	sbiw	r30, 0x02	; 2
    3114:	12 82       	std	Z+2, r1	; 0x02
    3116:	13 82       	std	Z+3, r1	; 0x03
    3118:	a0 91 cd 22 	lds	r26, 0x22CD	; 0x8022cd <__flp>
    311c:	b0 91 ce 22 	lds	r27, 0x22CE	; 0x8022ce <__flp+0x1>
    3120:	10 97       	sbiw	r26, 0x00	; 0
    3122:	81 f4       	brne	.+32     	; 0x3144 <free+0x3e>
    3124:	20 81       	ld	r18, Z
    3126:	31 81       	ldd	r19, Z+1	; 0x01
    3128:	82 0f       	add	r24, r18
    312a:	93 1f       	adc	r25, r19
    312c:	20 91 cb 22 	lds	r18, 0x22CB	; 0x8022cb <__brkval>
    3130:	30 91 cc 22 	lds	r19, 0x22CC	; 0x8022cc <__brkval+0x1>
    3134:	28 17       	cp	r18, r24
    3136:	39 07       	cpc	r19, r25
    3138:	51 f5       	brne	.+84     	; 0x318e <free+0x88>
    313a:	e0 93 cb 22 	sts	0x22CB, r30	; 0x8022cb <__brkval>
    313e:	f0 93 cc 22 	sts	0x22CC, r31	; 0x8022cc <__brkval+0x1>
    3142:	67 c0       	rjmp	.+206    	; 0x3212 <free+0x10c>
    3144:	ed 01       	movw	r28, r26
    3146:	20 e0       	ldi	r18, 0x00	; 0
    3148:	30 e0       	ldi	r19, 0x00	; 0
    314a:	ce 17       	cp	r28, r30
    314c:	df 07       	cpc	r29, r31
    314e:	40 f4       	brcc	.+16     	; 0x3160 <free+0x5a>
    3150:	4a 81       	ldd	r20, Y+2	; 0x02
    3152:	5b 81       	ldd	r21, Y+3	; 0x03
    3154:	9e 01       	movw	r18, r28
    3156:	41 15       	cp	r20, r1
    3158:	51 05       	cpc	r21, r1
    315a:	f1 f0       	breq	.+60     	; 0x3198 <free+0x92>
    315c:	ea 01       	movw	r28, r20
    315e:	f5 cf       	rjmp	.-22     	; 0x314a <free+0x44>
    3160:	c2 83       	std	Z+2, r28	; 0x02
    3162:	d3 83       	std	Z+3, r29	; 0x03
    3164:	40 81       	ld	r20, Z
    3166:	51 81       	ldd	r21, Z+1	; 0x01
    3168:	84 0f       	add	r24, r20
    316a:	95 1f       	adc	r25, r21
    316c:	c8 17       	cp	r28, r24
    316e:	d9 07       	cpc	r29, r25
    3170:	59 f4       	brne	.+22     	; 0x3188 <free+0x82>
    3172:	88 81       	ld	r24, Y
    3174:	99 81       	ldd	r25, Y+1	; 0x01
    3176:	84 0f       	add	r24, r20
    3178:	95 1f       	adc	r25, r21
    317a:	02 96       	adiw	r24, 0x02	; 2
    317c:	80 83       	st	Z, r24
    317e:	91 83       	std	Z+1, r25	; 0x01
    3180:	8a 81       	ldd	r24, Y+2	; 0x02
    3182:	9b 81       	ldd	r25, Y+3	; 0x03
    3184:	82 83       	std	Z+2, r24	; 0x02
    3186:	93 83       	std	Z+3, r25	; 0x03
    3188:	21 15       	cp	r18, r1
    318a:	31 05       	cpc	r19, r1
    318c:	29 f4       	brne	.+10     	; 0x3198 <free+0x92>
    318e:	e0 93 cd 22 	sts	0x22CD, r30	; 0x8022cd <__flp>
    3192:	f0 93 ce 22 	sts	0x22CE, r31	; 0x8022ce <__flp+0x1>
    3196:	3d c0       	rjmp	.+122    	; 0x3212 <free+0x10c>
    3198:	e9 01       	movw	r28, r18
    319a:	ea 83       	std	Y+2, r30	; 0x02
    319c:	fb 83       	std	Y+3, r31	; 0x03
    319e:	49 91       	ld	r20, Y+
    31a0:	59 91       	ld	r21, Y+
    31a2:	c4 0f       	add	r28, r20
    31a4:	d5 1f       	adc	r29, r21
    31a6:	ec 17       	cp	r30, r28
    31a8:	fd 07       	cpc	r31, r29
    31aa:	61 f4       	brne	.+24     	; 0x31c4 <free+0xbe>
    31ac:	80 81       	ld	r24, Z
    31ae:	91 81       	ldd	r25, Z+1	; 0x01
    31b0:	84 0f       	add	r24, r20
    31b2:	95 1f       	adc	r25, r21
    31b4:	02 96       	adiw	r24, 0x02	; 2
    31b6:	e9 01       	movw	r28, r18
    31b8:	88 83       	st	Y, r24
    31ba:	99 83       	std	Y+1, r25	; 0x01
    31bc:	82 81       	ldd	r24, Z+2	; 0x02
    31be:	93 81       	ldd	r25, Z+3	; 0x03
    31c0:	8a 83       	std	Y+2, r24	; 0x02
    31c2:	9b 83       	std	Y+3, r25	; 0x03
    31c4:	e0 e0       	ldi	r30, 0x00	; 0
    31c6:	f0 e0       	ldi	r31, 0x00	; 0
    31c8:	12 96       	adiw	r26, 0x02	; 2
    31ca:	8d 91       	ld	r24, X+
    31cc:	9c 91       	ld	r25, X
    31ce:	13 97       	sbiw	r26, 0x03	; 3
    31d0:	00 97       	sbiw	r24, 0x00	; 0
    31d2:	19 f0       	breq	.+6      	; 0x31da <free+0xd4>
    31d4:	fd 01       	movw	r30, r26
    31d6:	dc 01       	movw	r26, r24
    31d8:	f7 cf       	rjmp	.-18     	; 0x31c8 <free+0xc2>
    31da:	8d 91       	ld	r24, X+
    31dc:	9c 91       	ld	r25, X
    31de:	11 97       	sbiw	r26, 0x01	; 1
    31e0:	9d 01       	movw	r18, r26
    31e2:	2e 5f       	subi	r18, 0xFE	; 254
    31e4:	3f 4f       	sbci	r19, 0xFF	; 255
    31e6:	82 0f       	add	r24, r18
    31e8:	93 1f       	adc	r25, r19
    31ea:	20 91 cb 22 	lds	r18, 0x22CB	; 0x8022cb <__brkval>
    31ee:	30 91 cc 22 	lds	r19, 0x22CC	; 0x8022cc <__brkval+0x1>
    31f2:	28 17       	cp	r18, r24
    31f4:	39 07       	cpc	r19, r25
    31f6:	69 f4       	brne	.+26     	; 0x3212 <free+0x10c>
    31f8:	30 97       	sbiw	r30, 0x00	; 0
    31fa:	29 f4       	brne	.+10     	; 0x3206 <free+0x100>
    31fc:	10 92 cd 22 	sts	0x22CD, r1	; 0x8022cd <__flp>
    3200:	10 92 ce 22 	sts	0x22CE, r1	; 0x8022ce <__flp+0x1>
    3204:	02 c0       	rjmp	.+4      	; 0x320a <free+0x104>
    3206:	12 82       	std	Z+2, r1	; 0x02
    3208:	13 82       	std	Z+3, r1	; 0x03
    320a:	a0 93 cb 22 	sts	0x22CB, r26	; 0x8022cb <__brkval>
    320e:	b0 93 cc 22 	sts	0x22CC, r27	; 0x8022cc <__brkval+0x1>
    3212:	df 91       	pop	r29
    3214:	cf 91       	pop	r28
    3216:	08 95       	ret

00003218 <memcpy>:
    3218:	fb 01       	movw	r30, r22
    321a:	dc 01       	movw	r26, r24
    321c:	02 c0       	rjmp	.+4      	; 0x3222 <memcpy+0xa>
    321e:	01 90       	ld	r0, Z+
    3220:	0d 92       	st	X+, r0
    3222:	41 50       	subi	r20, 0x01	; 1
    3224:	50 40       	sbci	r21, 0x00	; 0
    3226:	d8 f7       	brcc	.-10     	; 0x321e <memcpy+0x6>
    3228:	08 95       	ret

0000322a <snprintf>:
    322a:	0f 93       	push	r16
    322c:	1f 93       	push	r17
    322e:	cf 93       	push	r28
    3230:	df 93       	push	r29
    3232:	cd b7       	in	r28, 0x3d	; 61
    3234:	de b7       	in	r29, 0x3e	; 62
    3236:	2e 97       	sbiw	r28, 0x0e	; 14
    3238:	cd bf       	out	0x3d, r28	; 61
    323a:	de bf       	out	0x3e, r29	; 62
    323c:	0e 89       	ldd	r16, Y+22	; 0x16
    323e:	1f 89       	ldd	r17, Y+23	; 0x17
    3240:	88 8d       	ldd	r24, Y+24	; 0x18
    3242:	99 8d       	ldd	r25, Y+25	; 0x19
    3244:	26 e0       	ldi	r18, 0x06	; 6
    3246:	2c 83       	std	Y+4, r18	; 0x04
    3248:	09 83       	std	Y+1, r16	; 0x01
    324a:	1a 83       	std	Y+2, r17	; 0x02
    324c:	97 ff       	sbrs	r25, 7
    324e:	02 c0       	rjmp	.+4      	; 0x3254 <snprintf+0x2a>
    3250:	80 e0       	ldi	r24, 0x00	; 0
    3252:	90 e8       	ldi	r25, 0x80	; 128
    3254:	01 97       	sbiw	r24, 0x01	; 1
    3256:	8d 83       	std	Y+5, r24	; 0x05
    3258:	9e 83       	std	Y+6, r25	; 0x06
    325a:	ae 01       	movw	r20, r28
    325c:	44 5e       	subi	r20, 0xE4	; 228
    325e:	5f 4f       	sbci	r21, 0xFF	; 255
    3260:	6a 8d       	ldd	r22, Y+26	; 0x1a
    3262:	7b 8d       	ldd	r23, Y+27	; 0x1b
    3264:	ce 01       	movw	r24, r28
    3266:	01 96       	adiw	r24, 0x01	; 1
    3268:	16 d0       	rcall	.+44     	; 0x3296 <vfprintf>
    326a:	4d 81       	ldd	r20, Y+5	; 0x05
    326c:	5e 81       	ldd	r21, Y+6	; 0x06
    326e:	57 fd       	sbrc	r21, 7
    3270:	0a c0       	rjmp	.+20     	; 0x3286 <snprintf+0x5c>
    3272:	2f 81       	ldd	r18, Y+7	; 0x07
    3274:	38 85       	ldd	r19, Y+8	; 0x08
    3276:	42 17       	cp	r20, r18
    3278:	53 07       	cpc	r21, r19
    327a:	0c f4       	brge	.+2      	; 0x327e <snprintf+0x54>
    327c:	9a 01       	movw	r18, r20
    327e:	f8 01       	movw	r30, r16
    3280:	e2 0f       	add	r30, r18
    3282:	f3 1f       	adc	r31, r19
    3284:	10 82       	st	Z, r1
    3286:	2e 96       	adiw	r28, 0x0e	; 14
    3288:	cd bf       	out	0x3d, r28	; 61
    328a:	de bf       	out	0x3e, r29	; 62
    328c:	df 91       	pop	r29
    328e:	cf 91       	pop	r28
    3290:	1f 91       	pop	r17
    3292:	0f 91       	pop	r16
    3294:	08 95       	ret

00003296 <vfprintf>:
    3296:	2f 92       	push	r2
    3298:	3f 92       	push	r3
    329a:	4f 92       	push	r4
    329c:	5f 92       	push	r5
    329e:	6f 92       	push	r6
    32a0:	7f 92       	push	r7
    32a2:	8f 92       	push	r8
    32a4:	9f 92       	push	r9
    32a6:	af 92       	push	r10
    32a8:	bf 92       	push	r11
    32aa:	cf 92       	push	r12
    32ac:	df 92       	push	r13
    32ae:	ef 92       	push	r14
    32b0:	ff 92       	push	r15
    32b2:	0f 93       	push	r16
    32b4:	1f 93       	push	r17
    32b6:	cf 93       	push	r28
    32b8:	df 93       	push	r29
    32ba:	cd b7       	in	r28, 0x3d	; 61
    32bc:	de b7       	in	r29, 0x3e	; 62
    32be:	2b 97       	sbiw	r28, 0x0b	; 11
    32c0:	cd bf       	out	0x3d, r28	; 61
    32c2:	de bf       	out	0x3e, r29	; 62
    32c4:	6c 01       	movw	r12, r24
    32c6:	7b 01       	movw	r14, r22
    32c8:	8a 01       	movw	r16, r20
    32ca:	fc 01       	movw	r30, r24
    32cc:	16 82       	std	Z+6, r1	; 0x06
    32ce:	17 82       	std	Z+7, r1	; 0x07
    32d0:	83 81       	ldd	r24, Z+3	; 0x03
    32d2:	81 ff       	sbrs	r24, 1
    32d4:	bf c1       	rjmp	.+894    	; 0x3654 <vfprintf+0x3be>
    32d6:	ce 01       	movw	r24, r28
    32d8:	01 96       	adiw	r24, 0x01	; 1
    32da:	3c 01       	movw	r6, r24
    32dc:	f6 01       	movw	r30, r12
    32de:	93 81       	ldd	r25, Z+3	; 0x03
    32e0:	f7 01       	movw	r30, r14
    32e2:	93 fd       	sbrc	r25, 3
    32e4:	85 91       	lpm	r24, Z+
    32e6:	93 ff       	sbrs	r25, 3
    32e8:	81 91       	ld	r24, Z+
    32ea:	7f 01       	movw	r14, r30
    32ec:	88 23       	and	r24, r24
    32ee:	09 f4       	brne	.+2      	; 0x32f2 <vfprintf+0x5c>
    32f0:	ad c1       	rjmp	.+858    	; 0x364c <vfprintf+0x3b6>
    32f2:	85 32       	cpi	r24, 0x25	; 37
    32f4:	39 f4       	brne	.+14     	; 0x3304 <vfprintf+0x6e>
    32f6:	93 fd       	sbrc	r25, 3
    32f8:	85 91       	lpm	r24, Z+
    32fa:	93 ff       	sbrs	r25, 3
    32fc:	81 91       	ld	r24, Z+
    32fe:	7f 01       	movw	r14, r30
    3300:	85 32       	cpi	r24, 0x25	; 37
    3302:	21 f4       	brne	.+8      	; 0x330c <vfprintf+0x76>
    3304:	b6 01       	movw	r22, r12
    3306:	90 e0       	ldi	r25, 0x00	; 0
    3308:	d3 d1       	rcall	.+934    	; 0x36b0 <fputc>
    330a:	e8 cf       	rjmp	.-48     	; 0x32dc <vfprintf+0x46>
    330c:	91 2c       	mov	r9, r1
    330e:	21 2c       	mov	r2, r1
    3310:	31 2c       	mov	r3, r1
    3312:	ff e1       	ldi	r31, 0x1F	; 31
    3314:	f3 15       	cp	r31, r3
    3316:	d8 f0       	brcs	.+54     	; 0x334e <vfprintf+0xb8>
    3318:	8b 32       	cpi	r24, 0x2B	; 43
    331a:	79 f0       	breq	.+30     	; 0x333a <vfprintf+0xa4>
    331c:	38 f4       	brcc	.+14     	; 0x332c <vfprintf+0x96>
    331e:	80 32       	cpi	r24, 0x20	; 32
    3320:	79 f0       	breq	.+30     	; 0x3340 <vfprintf+0xaa>
    3322:	83 32       	cpi	r24, 0x23	; 35
    3324:	a1 f4       	brne	.+40     	; 0x334e <vfprintf+0xb8>
    3326:	23 2d       	mov	r18, r3
    3328:	20 61       	ori	r18, 0x10	; 16
    332a:	1d c0       	rjmp	.+58     	; 0x3366 <vfprintf+0xd0>
    332c:	8d 32       	cpi	r24, 0x2D	; 45
    332e:	61 f0       	breq	.+24     	; 0x3348 <vfprintf+0xb2>
    3330:	80 33       	cpi	r24, 0x30	; 48
    3332:	69 f4       	brne	.+26     	; 0x334e <vfprintf+0xb8>
    3334:	23 2d       	mov	r18, r3
    3336:	21 60       	ori	r18, 0x01	; 1
    3338:	16 c0       	rjmp	.+44     	; 0x3366 <vfprintf+0xd0>
    333a:	83 2d       	mov	r24, r3
    333c:	82 60       	ori	r24, 0x02	; 2
    333e:	38 2e       	mov	r3, r24
    3340:	e3 2d       	mov	r30, r3
    3342:	e4 60       	ori	r30, 0x04	; 4
    3344:	3e 2e       	mov	r3, r30
    3346:	2a c0       	rjmp	.+84     	; 0x339c <vfprintf+0x106>
    3348:	f3 2d       	mov	r31, r3
    334a:	f8 60       	ori	r31, 0x08	; 8
    334c:	1d c0       	rjmp	.+58     	; 0x3388 <vfprintf+0xf2>
    334e:	37 fc       	sbrc	r3, 7
    3350:	2d c0       	rjmp	.+90     	; 0x33ac <vfprintf+0x116>
    3352:	20 ed       	ldi	r18, 0xD0	; 208
    3354:	28 0f       	add	r18, r24
    3356:	2a 30       	cpi	r18, 0x0A	; 10
    3358:	40 f0       	brcs	.+16     	; 0x336a <vfprintf+0xd4>
    335a:	8e 32       	cpi	r24, 0x2E	; 46
    335c:	b9 f4       	brne	.+46     	; 0x338c <vfprintf+0xf6>
    335e:	36 fc       	sbrc	r3, 6
    3360:	75 c1       	rjmp	.+746    	; 0x364c <vfprintf+0x3b6>
    3362:	23 2d       	mov	r18, r3
    3364:	20 64       	ori	r18, 0x40	; 64
    3366:	32 2e       	mov	r3, r18
    3368:	19 c0       	rjmp	.+50     	; 0x339c <vfprintf+0x106>
    336a:	36 fe       	sbrs	r3, 6
    336c:	06 c0       	rjmp	.+12     	; 0x337a <vfprintf+0xe4>
    336e:	8a e0       	ldi	r24, 0x0A	; 10
    3370:	98 9e       	mul	r9, r24
    3372:	20 0d       	add	r18, r0
    3374:	11 24       	eor	r1, r1
    3376:	92 2e       	mov	r9, r18
    3378:	11 c0       	rjmp	.+34     	; 0x339c <vfprintf+0x106>
    337a:	ea e0       	ldi	r30, 0x0A	; 10
    337c:	2e 9e       	mul	r2, r30
    337e:	20 0d       	add	r18, r0
    3380:	11 24       	eor	r1, r1
    3382:	22 2e       	mov	r2, r18
    3384:	f3 2d       	mov	r31, r3
    3386:	f0 62       	ori	r31, 0x20	; 32
    3388:	3f 2e       	mov	r3, r31
    338a:	08 c0       	rjmp	.+16     	; 0x339c <vfprintf+0x106>
    338c:	8c 36       	cpi	r24, 0x6C	; 108
    338e:	21 f4       	brne	.+8      	; 0x3398 <vfprintf+0x102>
    3390:	83 2d       	mov	r24, r3
    3392:	80 68       	ori	r24, 0x80	; 128
    3394:	38 2e       	mov	r3, r24
    3396:	02 c0       	rjmp	.+4      	; 0x339c <vfprintf+0x106>
    3398:	88 36       	cpi	r24, 0x68	; 104
    339a:	41 f4       	brne	.+16     	; 0x33ac <vfprintf+0x116>
    339c:	f7 01       	movw	r30, r14
    339e:	93 fd       	sbrc	r25, 3
    33a0:	85 91       	lpm	r24, Z+
    33a2:	93 ff       	sbrs	r25, 3
    33a4:	81 91       	ld	r24, Z+
    33a6:	7f 01       	movw	r14, r30
    33a8:	81 11       	cpse	r24, r1
    33aa:	b3 cf       	rjmp	.-154    	; 0x3312 <vfprintf+0x7c>
    33ac:	98 2f       	mov	r25, r24
    33ae:	9f 7d       	andi	r25, 0xDF	; 223
    33b0:	95 54       	subi	r25, 0x45	; 69
    33b2:	93 30       	cpi	r25, 0x03	; 3
    33b4:	28 f4       	brcc	.+10     	; 0x33c0 <vfprintf+0x12a>
    33b6:	0c 5f       	subi	r16, 0xFC	; 252
    33b8:	1f 4f       	sbci	r17, 0xFF	; 255
    33ba:	9f e3       	ldi	r25, 0x3F	; 63
    33bc:	99 83       	std	Y+1, r25	; 0x01
    33be:	0d c0       	rjmp	.+26     	; 0x33da <vfprintf+0x144>
    33c0:	83 36       	cpi	r24, 0x63	; 99
    33c2:	31 f0       	breq	.+12     	; 0x33d0 <vfprintf+0x13a>
    33c4:	83 37       	cpi	r24, 0x73	; 115
    33c6:	71 f0       	breq	.+28     	; 0x33e4 <vfprintf+0x14e>
    33c8:	83 35       	cpi	r24, 0x53	; 83
    33ca:	09 f0       	breq	.+2      	; 0x33ce <vfprintf+0x138>
    33cc:	55 c0       	rjmp	.+170    	; 0x3478 <vfprintf+0x1e2>
    33ce:	20 c0       	rjmp	.+64     	; 0x3410 <vfprintf+0x17a>
    33d0:	f8 01       	movw	r30, r16
    33d2:	80 81       	ld	r24, Z
    33d4:	89 83       	std	Y+1, r24	; 0x01
    33d6:	0e 5f       	subi	r16, 0xFE	; 254
    33d8:	1f 4f       	sbci	r17, 0xFF	; 255
    33da:	88 24       	eor	r8, r8
    33dc:	83 94       	inc	r8
    33de:	91 2c       	mov	r9, r1
    33e0:	53 01       	movw	r10, r6
    33e2:	12 c0       	rjmp	.+36     	; 0x3408 <vfprintf+0x172>
    33e4:	28 01       	movw	r4, r16
    33e6:	f2 e0       	ldi	r31, 0x02	; 2
    33e8:	4f 0e       	add	r4, r31
    33ea:	51 1c       	adc	r5, r1
    33ec:	f8 01       	movw	r30, r16
    33ee:	a0 80       	ld	r10, Z
    33f0:	b1 80       	ldd	r11, Z+1	; 0x01
    33f2:	36 fe       	sbrs	r3, 6
    33f4:	03 c0       	rjmp	.+6      	; 0x33fc <vfprintf+0x166>
    33f6:	69 2d       	mov	r22, r9
    33f8:	70 e0       	ldi	r23, 0x00	; 0
    33fa:	02 c0       	rjmp	.+4      	; 0x3400 <vfprintf+0x16a>
    33fc:	6f ef       	ldi	r22, 0xFF	; 255
    33fe:	7f ef       	ldi	r23, 0xFF	; 255
    3400:	c5 01       	movw	r24, r10
    3402:	4b d1       	rcall	.+662    	; 0x369a <strnlen>
    3404:	4c 01       	movw	r8, r24
    3406:	82 01       	movw	r16, r4
    3408:	f3 2d       	mov	r31, r3
    340a:	ff 77       	andi	r31, 0x7F	; 127
    340c:	3f 2e       	mov	r3, r31
    340e:	15 c0       	rjmp	.+42     	; 0x343a <vfprintf+0x1a4>
    3410:	28 01       	movw	r4, r16
    3412:	22 e0       	ldi	r18, 0x02	; 2
    3414:	42 0e       	add	r4, r18
    3416:	51 1c       	adc	r5, r1
    3418:	f8 01       	movw	r30, r16
    341a:	a0 80       	ld	r10, Z
    341c:	b1 80       	ldd	r11, Z+1	; 0x01
    341e:	36 fe       	sbrs	r3, 6
    3420:	03 c0       	rjmp	.+6      	; 0x3428 <vfprintf+0x192>
    3422:	69 2d       	mov	r22, r9
    3424:	70 e0       	ldi	r23, 0x00	; 0
    3426:	02 c0       	rjmp	.+4      	; 0x342c <vfprintf+0x196>
    3428:	6f ef       	ldi	r22, 0xFF	; 255
    342a:	7f ef       	ldi	r23, 0xFF	; 255
    342c:	c5 01       	movw	r24, r10
    342e:	2a d1       	rcall	.+596    	; 0x3684 <strnlen_P>
    3430:	4c 01       	movw	r8, r24
    3432:	f3 2d       	mov	r31, r3
    3434:	f0 68       	ori	r31, 0x80	; 128
    3436:	3f 2e       	mov	r3, r31
    3438:	82 01       	movw	r16, r4
    343a:	33 fc       	sbrc	r3, 3
    343c:	19 c0       	rjmp	.+50     	; 0x3470 <vfprintf+0x1da>
    343e:	82 2d       	mov	r24, r2
    3440:	90 e0       	ldi	r25, 0x00	; 0
    3442:	88 16       	cp	r8, r24
    3444:	99 06       	cpc	r9, r25
    3446:	a0 f4       	brcc	.+40     	; 0x3470 <vfprintf+0x1da>
    3448:	b6 01       	movw	r22, r12
    344a:	80 e2       	ldi	r24, 0x20	; 32
    344c:	90 e0       	ldi	r25, 0x00	; 0
    344e:	30 d1       	rcall	.+608    	; 0x36b0 <fputc>
    3450:	2a 94       	dec	r2
    3452:	f5 cf       	rjmp	.-22     	; 0x343e <vfprintf+0x1a8>
    3454:	f5 01       	movw	r30, r10
    3456:	37 fc       	sbrc	r3, 7
    3458:	85 91       	lpm	r24, Z+
    345a:	37 fe       	sbrs	r3, 7
    345c:	81 91       	ld	r24, Z+
    345e:	5f 01       	movw	r10, r30
    3460:	b6 01       	movw	r22, r12
    3462:	90 e0       	ldi	r25, 0x00	; 0
    3464:	25 d1       	rcall	.+586    	; 0x36b0 <fputc>
    3466:	21 10       	cpse	r2, r1
    3468:	2a 94       	dec	r2
    346a:	21 e0       	ldi	r18, 0x01	; 1
    346c:	82 1a       	sub	r8, r18
    346e:	91 08       	sbc	r9, r1
    3470:	81 14       	cp	r8, r1
    3472:	91 04       	cpc	r9, r1
    3474:	79 f7       	brne	.-34     	; 0x3454 <vfprintf+0x1be>
    3476:	e1 c0       	rjmp	.+450    	; 0x363a <vfprintf+0x3a4>
    3478:	84 36       	cpi	r24, 0x64	; 100
    347a:	11 f0       	breq	.+4      	; 0x3480 <vfprintf+0x1ea>
    347c:	89 36       	cpi	r24, 0x69	; 105
    347e:	39 f5       	brne	.+78     	; 0x34ce <vfprintf+0x238>
    3480:	f8 01       	movw	r30, r16
    3482:	37 fe       	sbrs	r3, 7
    3484:	07 c0       	rjmp	.+14     	; 0x3494 <vfprintf+0x1fe>
    3486:	60 81       	ld	r22, Z
    3488:	71 81       	ldd	r23, Z+1	; 0x01
    348a:	82 81       	ldd	r24, Z+2	; 0x02
    348c:	93 81       	ldd	r25, Z+3	; 0x03
    348e:	0c 5f       	subi	r16, 0xFC	; 252
    3490:	1f 4f       	sbci	r17, 0xFF	; 255
    3492:	08 c0       	rjmp	.+16     	; 0x34a4 <vfprintf+0x20e>
    3494:	60 81       	ld	r22, Z
    3496:	71 81       	ldd	r23, Z+1	; 0x01
    3498:	07 2e       	mov	r0, r23
    349a:	00 0c       	add	r0, r0
    349c:	88 0b       	sbc	r24, r24
    349e:	99 0b       	sbc	r25, r25
    34a0:	0e 5f       	subi	r16, 0xFE	; 254
    34a2:	1f 4f       	sbci	r17, 0xFF	; 255
    34a4:	f3 2d       	mov	r31, r3
    34a6:	ff 76       	andi	r31, 0x6F	; 111
    34a8:	3f 2e       	mov	r3, r31
    34aa:	97 ff       	sbrs	r25, 7
    34ac:	09 c0       	rjmp	.+18     	; 0x34c0 <vfprintf+0x22a>
    34ae:	90 95       	com	r25
    34b0:	80 95       	com	r24
    34b2:	70 95       	com	r23
    34b4:	61 95       	neg	r22
    34b6:	7f 4f       	sbci	r23, 0xFF	; 255
    34b8:	8f 4f       	sbci	r24, 0xFF	; 255
    34ba:	9f 4f       	sbci	r25, 0xFF	; 255
    34bc:	f0 68       	ori	r31, 0x80	; 128
    34be:	3f 2e       	mov	r3, r31
    34c0:	2a e0       	ldi	r18, 0x0A	; 10
    34c2:	30 e0       	ldi	r19, 0x00	; 0
    34c4:	a3 01       	movw	r20, r6
    34c6:	30 d1       	rcall	.+608    	; 0x3728 <__ultoa_invert>
    34c8:	88 2e       	mov	r8, r24
    34ca:	86 18       	sub	r8, r6
    34cc:	44 c0       	rjmp	.+136    	; 0x3556 <vfprintf+0x2c0>
    34ce:	85 37       	cpi	r24, 0x75	; 117
    34d0:	31 f4       	brne	.+12     	; 0x34de <vfprintf+0x248>
    34d2:	23 2d       	mov	r18, r3
    34d4:	2f 7e       	andi	r18, 0xEF	; 239
    34d6:	b2 2e       	mov	r11, r18
    34d8:	2a e0       	ldi	r18, 0x0A	; 10
    34da:	30 e0       	ldi	r19, 0x00	; 0
    34dc:	25 c0       	rjmp	.+74     	; 0x3528 <vfprintf+0x292>
    34de:	93 2d       	mov	r25, r3
    34e0:	99 7f       	andi	r25, 0xF9	; 249
    34e2:	b9 2e       	mov	r11, r25
    34e4:	8f 36       	cpi	r24, 0x6F	; 111
    34e6:	c1 f0       	breq	.+48     	; 0x3518 <vfprintf+0x282>
    34e8:	18 f4       	brcc	.+6      	; 0x34f0 <vfprintf+0x25a>
    34ea:	88 35       	cpi	r24, 0x58	; 88
    34ec:	79 f0       	breq	.+30     	; 0x350c <vfprintf+0x276>
    34ee:	ae c0       	rjmp	.+348    	; 0x364c <vfprintf+0x3b6>
    34f0:	80 37       	cpi	r24, 0x70	; 112
    34f2:	19 f0       	breq	.+6      	; 0x34fa <vfprintf+0x264>
    34f4:	88 37       	cpi	r24, 0x78	; 120
    34f6:	21 f0       	breq	.+8      	; 0x3500 <vfprintf+0x26a>
    34f8:	a9 c0       	rjmp	.+338    	; 0x364c <vfprintf+0x3b6>
    34fa:	e9 2f       	mov	r30, r25
    34fc:	e0 61       	ori	r30, 0x10	; 16
    34fe:	be 2e       	mov	r11, r30
    3500:	b4 fe       	sbrs	r11, 4
    3502:	0d c0       	rjmp	.+26     	; 0x351e <vfprintf+0x288>
    3504:	fb 2d       	mov	r31, r11
    3506:	f4 60       	ori	r31, 0x04	; 4
    3508:	bf 2e       	mov	r11, r31
    350a:	09 c0       	rjmp	.+18     	; 0x351e <vfprintf+0x288>
    350c:	34 fe       	sbrs	r3, 4
    350e:	0a c0       	rjmp	.+20     	; 0x3524 <vfprintf+0x28e>
    3510:	29 2f       	mov	r18, r25
    3512:	26 60       	ori	r18, 0x06	; 6
    3514:	b2 2e       	mov	r11, r18
    3516:	06 c0       	rjmp	.+12     	; 0x3524 <vfprintf+0x28e>
    3518:	28 e0       	ldi	r18, 0x08	; 8
    351a:	30 e0       	ldi	r19, 0x00	; 0
    351c:	05 c0       	rjmp	.+10     	; 0x3528 <vfprintf+0x292>
    351e:	20 e1       	ldi	r18, 0x10	; 16
    3520:	30 e0       	ldi	r19, 0x00	; 0
    3522:	02 c0       	rjmp	.+4      	; 0x3528 <vfprintf+0x292>
    3524:	20 e1       	ldi	r18, 0x10	; 16
    3526:	32 e0       	ldi	r19, 0x02	; 2
    3528:	f8 01       	movw	r30, r16
    352a:	b7 fe       	sbrs	r11, 7
    352c:	07 c0       	rjmp	.+14     	; 0x353c <vfprintf+0x2a6>
    352e:	60 81       	ld	r22, Z
    3530:	71 81       	ldd	r23, Z+1	; 0x01
    3532:	82 81       	ldd	r24, Z+2	; 0x02
    3534:	93 81       	ldd	r25, Z+3	; 0x03
    3536:	0c 5f       	subi	r16, 0xFC	; 252
    3538:	1f 4f       	sbci	r17, 0xFF	; 255
    353a:	06 c0       	rjmp	.+12     	; 0x3548 <vfprintf+0x2b2>
    353c:	60 81       	ld	r22, Z
    353e:	71 81       	ldd	r23, Z+1	; 0x01
    3540:	80 e0       	ldi	r24, 0x00	; 0
    3542:	90 e0       	ldi	r25, 0x00	; 0
    3544:	0e 5f       	subi	r16, 0xFE	; 254
    3546:	1f 4f       	sbci	r17, 0xFF	; 255
    3548:	a3 01       	movw	r20, r6
    354a:	ee d0       	rcall	.+476    	; 0x3728 <__ultoa_invert>
    354c:	88 2e       	mov	r8, r24
    354e:	86 18       	sub	r8, r6
    3550:	fb 2d       	mov	r31, r11
    3552:	ff 77       	andi	r31, 0x7F	; 127
    3554:	3f 2e       	mov	r3, r31
    3556:	36 fe       	sbrs	r3, 6
    3558:	0d c0       	rjmp	.+26     	; 0x3574 <vfprintf+0x2de>
    355a:	23 2d       	mov	r18, r3
    355c:	2e 7f       	andi	r18, 0xFE	; 254
    355e:	a2 2e       	mov	r10, r18
    3560:	89 14       	cp	r8, r9
    3562:	58 f4       	brcc	.+22     	; 0x357a <vfprintf+0x2e4>
    3564:	34 fe       	sbrs	r3, 4
    3566:	0b c0       	rjmp	.+22     	; 0x357e <vfprintf+0x2e8>
    3568:	32 fc       	sbrc	r3, 2
    356a:	09 c0       	rjmp	.+18     	; 0x357e <vfprintf+0x2e8>
    356c:	83 2d       	mov	r24, r3
    356e:	8e 7e       	andi	r24, 0xEE	; 238
    3570:	a8 2e       	mov	r10, r24
    3572:	05 c0       	rjmp	.+10     	; 0x357e <vfprintf+0x2e8>
    3574:	b8 2c       	mov	r11, r8
    3576:	a3 2c       	mov	r10, r3
    3578:	03 c0       	rjmp	.+6      	; 0x3580 <vfprintf+0x2ea>
    357a:	b8 2c       	mov	r11, r8
    357c:	01 c0       	rjmp	.+2      	; 0x3580 <vfprintf+0x2ea>
    357e:	b9 2c       	mov	r11, r9
    3580:	a4 fe       	sbrs	r10, 4
    3582:	0f c0       	rjmp	.+30     	; 0x35a2 <vfprintf+0x30c>
    3584:	fe 01       	movw	r30, r28
    3586:	e8 0d       	add	r30, r8
    3588:	f1 1d       	adc	r31, r1
    358a:	80 81       	ld	r24, Z
    358c:	80 33       	cpi	r24, 0x30	; 48
    358e:	21 f4       	brne	.+8      	; 0x3598 <vfprintf+0x302>
    3590:	9a 2d       	mov	r25, r10
    3592:	99 7e       	andi	r25, 0xE9	; 233
    3594:	a9 2e       	mov	r10, r25
    3596:	09 c0       	rjmp	.+18     	; 0x35aa <vfprintf+0x314>
    3598:	a2 fe       	sbrs	r10, 2
    359a:	06 c0       	rjmp	.+12     	; 0x35a8 <vfprintf+0x312>
    359c:	b3 94       	inc	r11
    359e:	b3 94       	inc	r11
    35a0:	04 c0       	rjmp	.+8      	; 0x35aa <vfprintf+0x314>
    35a2:	8a 2d       	mov	r24, r10
    35a4:	86 78       	andi	r24, 0x86	; 134
    35a6:	09 f0       	breq	.+2      	; 0x35aa <vfprintf+0x314>
    35a8:	b3 94       	inc	r11
    35aa:	a3 fc       	sbrc	r10, 3
    35ac:	10 c0       	rjmp	.+32     	; 0x35ce <vfprintf+0x338>
    35ae:	a0 fe       	sbrs	r10, 0
    35b0:	06 c0       	rjmp	.+12     	; 0x35be <vfprintf+0x328>
    35b2:	b2 14       	cp	r11, r2
    35b4:	80 f4       	brcc	.+32     	; 0x35d6 <vfprintf+0x340>
    35b6:	28 0c       	add	r2, r8
    35b8:	92 2c       	mov	r9, r2
    35ba:	9b 18       	sub	r9, r11
    35bc:	0d c0       	rjmp	.+26     	; 0x35d8 <vfprintf+0x342>
    35be:	b2 14       	cp	r11, r2
    35c0:	58 f4       	brcc	.+22     	; 0x35d8 <vfprintf+0x342>
    35c2:	b6 01       	movw	r22, r12
    35c4:	80 e2       	ldi	r24, 0x20	; 32
    35c6:	90 e0       	ldi	r25, 0x00	; 0
    35c8:	73 d0       	rcall	.+230    	; 0x36b0 <fputc>
    35ca:	b3 94       	inc	r11
    35cc:	f8 cf       	rjmp	.-16     	; 0x35be <vfprintf+0x328>
    35ce:	b2 14       	cp	r11, r2
    35d0:	18 f4       	brcc	.+6      	; 0x35d8 <vfprintf+0x342>
    35d2:	2b 18       	sub	r2, r11
    35d4:	02 c0       	rjmp	.+4      	; 0x35da <vfprintf+0x344>
    35d6:	98 2c       	mov	r9, r8
    35d8:	21 2c       	mov	r2, r1
    35da:	a4 fe       	sbrs	r10, 4
    35dc:	0f c0       	rjmp	.+30     	; 0x35fc <vfprintf+0x366>
    35de:	b6 01       	movw	r22, r12
    35e0:	80 e3       	ldi	r24, 0x30	; 48
    35e2:	90 e0       	ldi	r25, 0x00	; 0
    35e4:	65 d0       	rcall	.+202    	; 0x36b0 <fputc>
    35e6:	a2 fe       	sbrs	r10, 2
    35e8:	16 c0       	rjmp	.+44     	; 0x3616 <vfprintf+0x380>
    35ea:	a1 fc       	sbrc	r10, 1
    35ec:	03 c0       	rjmp	.+6      	; 0x35f4 <vfprintf+0x35e>
    35ee:	88 e7       	ldi	r24, 0x78	; 120
    35f0:	90 e0       	ldi	r25, 0x00	; 0
    35f2:	02 c0       	rjmp	.+4      	; 0x35f8 <vfprintf+0x362>
    35f4:	88 e5       	ldi	r24, 0x58	; 88
    35f6:	90 e0       	ldi	r25, 0x00	; 0
    35f8:	b6 01       	movw	r22, r12
    35fa:	0c c0       	rjmp	.+24     	; 0x3614 <vfprintf+0x37e>
    35fc:	8a 2d       	mov	r24, r10
    35fe:	86 78       	andi	r24, 0x86	; 134
    3600:	51 f0       	breq	.+20     	; 0x3616 <vfprintf+0x380>
    3602:	a1 fe       	sbrs	r10, 1
    3604:	02 c0       	rjmp	.+4      	; 0x360a <vfprintf+0x374>
    3606:	8b e2       	ldi	r24, 0x2B	; 43
    3608:	01 c0       	rjmp	.+2      	; 0x360c <vfprintf+0x376>
    360a:	80 e2       	ldi	r24, 0x20	; 32
    360c:	a7 fc       	sbrc	r10, 7
    360e:	8d e2       	ldi	r24, 0x2D	; 45
    3610:	b6 01       	movw	r22, r12
    3612:	90 e0       	ldi	r25, 0x00	; 0
    3614:	4d d0       	rcall	.+154    	; 0x36b0 <fputc>
    3616:	89 14       	cp	r8, r9
    3618:	30 f4       	brcc	.+12     	; 0x3626 <vfprintf+0x390>
    361a:	b6 01       	movw	r22, r12
    361c:	80 e3       	ldi	r24, 0x30	; 48
    361e:	90 e0       	ldi	r25, 0x00	; 0
    3620:	47 d0       	rcall	.+142    	; 0x36b0 <fputc>
    3622:	9a 94       	dec	r9
    3624:	f8 cf       	rjmp	.-16     	; 0x3616 <vfprintf+0x380>
    3626:	8a 94       	dec	r8
    3628:	f3 01       	movw	r30, r6
    362a:	e8 0d       	add	r30, r8
    362c:	f1 1d       	adc	r31, r1
    362e:	80 81       	ld	r24, Z
    3630:	b6 01       	movw	r22, r12
    3632:	90 e0       	ldi	r25, 0x00	; 0
    3634:	3d d0       	rcall	.+122    	; 0x36b0 <fputc>
    3636:	81 10       	cpse	r8, r1
    3638:	f6 cf       	rjmp	.-20     	; 0x3626 <vfprintf+0x390>
    363a:	22 20       	and	r2, r2
    363c:	09 f4       	brne	.+2      	; 0x3640 <vfprintf+0x3aa>
    363e:	4e ce       	rjmp	.-868    	; 0x32dc <vfprintf+0x46>
    3640:	b6 01       	movw	r22, r12
    3642:	80 e2       	ldi	r24, 0x20	; 32
    3644:	90 e0       	ldi	r25, 0x00	; 0
    3646:	34 d0       	rcall	.+104    	; 0x36b0 <fputc>
    3648:	2a 94       	dec	r2
    364a:	f7 cf       	rjmp	.-18     	; 0x363a <vfprintf+0x3a4>
    364c:	f6 01       	movw	r30, r12
    364e:	86 81       	ldd	r24, Z+6	; 0x06
    3650:	97 81       	ldd	r25, Z+7	; 0x07
    3652:	02 c0       	rjmp	.+4      	; 0x3658 <vfprintf+0x3c2>
    3654:	8f ef       	ldi	r24, 0xFF	; 255
    3656:	9f ef       	ldi	r25, 0xFF	; 255
    3658:	2b 96       	adiw	r28, 0x0b	; 11
    365a:	cd bf       	out	0x3d, r28	; 61
    365c:	de bf       	out	0x3e, r29	; 62
    365e:	df 91       	pop	r29
    3660:	cf 91       	pop	r28
    3662:	1f 91       	pop	r17
    3664:	0f 91       	pop	r16
    3666:	ff 90       	pop	r15
    3668:	ef 90       	pop	r14
    366a:	df 90       	pop	r13
    366c:	cf 90       	pop	r12
    366e:	bf 90       	pop	r11
    3670:	af 90       	pop	r10
    3672:	9f 90       	pop	r9
    3674:	8f 90       	pop	r8
    3676:	7f 90       	pop	r7
    3678:	6f 90       	pop	r6
    367a:	5f 90       	pop	r5
    367c:	4f 90       	pop	r4
    367e:	3f 90       	pop	r3
    3680:	2f 90       	pop	r2
    3682:	08 95       	ret

00003684 <strnlen_P>:
    3684:	fc 01       	movw	r30, r24
    3686:	05 90       	lpm	r0, Z+
    3688:	61 50       	subi	r22, 0x01	; 1
    368a:	70 40       	sbci	r23, 0x00	; 0
    368c:	01 10       	cpse	r0, r1
    368e:	d8 f7       	brcc	.-10     	; 0x3686 <strnlen_P+0x2>
    3690:	80 95       	com	r24
    3692:	90 95       	com	r25
    3694:	8e 0f       	add	r24, r30
    3696:	9f 1f       	adc	r25, r31
    3698:	08 95       	ret

0000369a <strnlen>:
    369a:	fc 01       	movw	r30, r24
    369c:	61 50       	subi	r22, 0x01	; 1
    369e:	70 40       	sbci	r23, 0x00	; 0
    36a0:	01 90       	ld	r0, Z+
    36a2:	01 10       	cpse	r0, r1
    36a4:	d8 f7       	brcc	.-10     	; 0x369c <strnlen+0x2>
    36a6:	80 95       	com	r24
    36a8:	90 95       	com	r25
    36aa:	8e 0f       	add	r24, r30
    36ac:	9f 1f       	adc	r25, r31
    36ae:	08 95       	ret

000036b0 <fputc>:
    36b0:	0f 93       	push	r16
    36b2:	1f 93       	push	r17
    36b4:	cf 93       	push	r28
    36b6:	df 93       	push	r29
    36b8:	fb 01       	movw	r30, r22
    36ba:	23 81       	ldd	r18, Z+3	; 0x03
    36bc:	21 fd       	sbrc	r18, 1
    36be:	03 c0       	rjmp	.+6      	; 0x36c6 <fputc+0x16>
    36c0:	8f ef       	ldi	r24, 0xFF	; 255
    36c2:	9f ef       	ldi	r25, 0xFF	; 255
    36c4:	2c c0       	rjmp	.+88     	; 0x371e <fputc+0x6e>
    36c6:	22 ff       	sbrs	r18, 2
    36c8:	16 c0       	rjmp	.+44     	; 0x36f6 <fputc+0x46>
    36ca:	46 81       	ldd	r20, Z+6	; 0x06
    36cc:	57 81       	ldd	r21, Z+7	; 0x07
    36ce:	24 81       	ldd	r18, Z+4	; 0x04
    36d0:	35 81       	ldd	r19, Z+5	; 0x05
    36d2:	42 17       	cp	r20, r18
    36d4:	53 07       	cpc	r21, r19
    36d6:	44 f4       	brge	.+16     	; 0x36e8 <fputc+0x38>
    36d8:	a0 81       	ld	r26, Z
    36da:	b1 81       	ldd	r27, Z+1	; 0x01
    36dc:	9d 01       	movw	r18, r26
    36de:	2f 5f       	subi	r18, 0xFF	; 255
    36e0:	3f 4f       	sbci	r19, 0xFF	; 255
    36e2:	20 83       	st	Z, r18
    36e4:	31 83       	std	Z+1, r19	; 0x01
    36e6:	8c 93       	st	X, r24
    36e8:	26 81       	ldd	r18, Z+6	; 0x06
    36ea:	37 81       	ldd	r19, Z+7	; 0x07
    36ec:	2f 5f       	subi	r18, 0xFF	; 255
    36ee:	3f 4f       	sbci	r19, 0xFF	; 255
    36f0:	26 83       	std	Z+6, r18	; 0x06
    36f2:	37 83       	std	Z+7, r19	; 0x07
    36f4:	14 c0       	rjmp	.+40     	; 0x371e <fputc+0x6e>
    36f6:	8b 01       	movw	r16, r22
    36f8:	ec 01       	movw	r28, r24
    36fa:	fb 01       	movw	r30, r22
    36fc:	00 84       	ldd	r0, Z+8	; 0x08
    36fe:	f1 85       	ldd	r31, Z+9	; 0x09
    3700:	e0 2d       	mov	r30, r0
    3702:	19 95       	eicall
    3704:	89 2b       	or	r24, r25
    3706:	e1 f6       	brne	.-72     	; 0x36c0 <fputc+0x10>
    3708:	d8 01       	movw	r26, r16
    370a:	16 96       	adiw	r26, 0x06	; 6
    370c:	8d 91       	ld	r24, X+
    370e:	9c 91       	ld	r25, X
    3710:	17 97       	sbiw	r26, 0x07	; 7
    3712:	01 96       	adiw	r24, 0x01	; 1
    3714:	16 96       	adiw	r26, 0x06	; 6
    3716:	8d 93       	st	X+, r24
    3718:	9c 93       	st	X, r25
    371a:	17 97       	sbiw	r26, 0x07	; 7
    371c:	ce 01       	movw	r24, r28
    371e:	df 91       	pop	r29
    3720:	cf 91       	pop	r28
    3722:	1f 91       	pop	r17
    3724:	0f 91       	pop	r16
    3726:	08 95       	ret

00003728 <__ultoa_invert>:
    3728:	fa 01       	movw	r30, r20
    372a:	aa 27       	eor	r26, r26
    372c:	28 30       	cpi	r18, 0x08	; 8
    372e:	51 f1       	breq	.+84     	; 0x3784 <__ultoa_invert+0x5c>
    3730:	20 31       	cpi	r18, 0x10	; 16
    3732:	81 f1       	breq	.+96     	; 0x3794 <__ultoa_invert+0x6c>
    3734:	e8 94       	clt
    3736:	6f 93       	push	r22
    3738:	6e 7f       	andi	r22, 0xFE	; 254
    373a:	6e 5f       	subi	r22, 0xFE	; 254
    373c:	7f 4f       	sbci	r23, 0xFF	; 255
    373e:	8f 4f       	sbci	r24, 0xFF	; 255
    3740:	9f 4f       	sbci	r25, 0xFF	; 255
    3742:	af 4f       	sbci	r26, 0xFF	; 255
    3744:	b1 e0       	ldi	r27, 0x01	; 1
    3746:	3e d0       	rcall	.+124    	; 0x37c4 <__ultoa_invert+0x9c>
    3748:	b4 e0       	ldi	r27, 0x04	; 4
    374a:	3c d0       	rcall	.+120    	; 0x37c4 <__ultoa_invert+0x9c>
    374c:	67 0f       	add	r22, r23
    374e:	78 1f       	adc	r23, r24
    3750:	89 1f       	adc	r24, r25
    3752:	9a 1f       	adc	r25, r26
    3754:	a1 1d       	adc	r26, r1
    3756:	68 0f       	add	r22, r24
    3758:	79 1f       	adc	r23, r25
    375a:	8a 1f       	adc	r24, r26
    375c:	91 1d       	adc	r25, r1
    375e:	a1 1d       	adc	r26, r1
    3760:	6a 0f       	add	r22, r26
    3762:	71 1d       	adc	r23, r1
    3764:	81 1d       	adc	r24, r1
    3766:	91 1d       	adc	r25, r1
    3768:	a1 1d       	adc	r26, r1
    376a:	20 d0       	rcall	.+64     	; 0x37ac <__ultoa_invert+0x84>
    376c:	09 f4       	brne	.+2      	; 0x3770 <__ultoa_invert+0x48>
    376e:	68 94       	set
    3770:	3f 91       	pop	r19
    3772:	2a e0       	ldi	r18, 0x0A	; 10
    3774:	26 9f       	mul	r18, r22
    3776:	11 24       	eor	r1, r1
    3778:	30 19       	sub	r19, r0
    377a:	30 5d       	subi	r19, 0xD0	; 208
    377c:	31 93       	st	Z+, r19
    377e:	de f6       	brtc	.-74     	; 0x3736 <__ultoa_invert+0xe>
    3780:	cf 01       	movw	r24, r30
    3782:	08 95       	ret
    3784:	46 2f       	mov	r20, r22
    3786:	47 70       	andi	r20, 0x07	; 7
    3788:	40 5d       	subi	r20, 0xD0	; 208
    378a:	41 93       	st	Z+, r20
    378c:	b3 e0       	ldi	r27, 0x03	; 3
    378e:	0f d0       	rcall	.+30     	; 0x37ae <__ultoa_invert+0x86>
    3790:	c9 f7       	brne	.-14     	; 0x3784 <__ultoa_invert+0x5c>
    3792:	f6 cf       	rjmp	.-20     	; 0x3780 <__ultoa_invert+0x58>
    3794:	46 2f       	mov	r20, r22
    3796:	4f 70       	andi	r20, 0x0F	; 15
    3798:	40 5d       	subi	r20, 0xD0	; 208
    379a:	4a 33       	cpi	r20, 0x3A	; 58
    379c:	18 f0       	brcs	.+6      	; 0x37a4 <__ultoa_invert+0x7c>
    379e:	49 5d       	subi	r20, 0xD9	; 217
    37a0:	31 fd       	sbrc	r19, 1
    37a2:	40 52       	subi	r20, 0x20	; 32
    37a4:	41 93       	st	Z+, r20
    37a6:	02 d0       	rcall	.+4      	; 0x37ac <__ultoa_invert+0x84>
    37a8:	a9 f7       	brne	.-22     	; 0x3794 <__ultoa_invert+0x6c>
    37aa:	ea cf       	rjmp	.-44     	; 0x3780 <__ultoa_invert+0x58>
    37ac:	b4 e0       	ldi	r27, 0x04	; 4
    37ae:	a6 95       	lsr	r26
    37b0:	97 95       	ror	r25
    37b2:	87 95       	ror	r24
    37b4:	77 95       	ror	r23
    37b6:	67 95       	ror	r22
    37b8:	ba 95       	dec	r27
    37ba:	c9 f7       	brne	.-14     	; 0x37ae <__ultoa_invert+0x86>
    37bc:	00 97       	sbiw	r24, 0x00	; 0
    37be:	61 05       	cpc	r22, r1
    37c0:	71 05       	cpc	r23, r1
    37c2:	08 95       	ret
    37c4:	9b 01       	movw	r18, r22
    37c6:	ac 01       	movw	r20, r24
    37c8:	0a 2e       	mov	r0, r26
    37ca:	06 94       	lsr	r0
    37cc:	57 95       	ror	r21
    37ce:	47 95       	ror	r20
    37d0:	37 95       	ror	r19
    37d2:	27 95       	ror	r18
    37d4:	ba 95       	dec	r27
    37d6:	c9 f7       	brne	.-14     	; 0x37ca <__ultoa_invert+0xa2>
    37d8:	62 0f       	add	r22, r18
    37da:	73 1f       	adc	r23, r19
    37dc:	84 1f       	adc	r24, r20
    37de:	95 1f       	adc	r25, r21
    37e0:	a0 1d       	adc	r26, r0
    37e2:	08 95       	ret

000037e4 <_exit>:
    37e4:	f8 94       	cli

000037e6 <__stop_program>:
    37e6:	ff cf       	rjmp	.-2      	; 0x37e6 <__stop_program>
